<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Atlantis on Team Atlanta</title>
    <link>http://localhost:1313/categories/atlantis/</link>
    <description>Recent content in Atlantis on Team Atlanta</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Aug 2025 18:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/atlantis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jazzer&#43;LibAFL: Insights into Java Fuzzing</title>
      <link>http://localhost:1313/blog/post-crs-java-libafl-jazzer/</link>
      <pubDate>Thu, 14 Aug 2025 18:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/post-crs-java-libafl-jazzer/</guid>
      <description>&lt;p&gt;AIxCC involved finding bugs in software written in two languages: C++ and &lt;em&gt;Java&lt;/em&gt;.&#xA;The focus of the competition was on the use of LLMs and AI, however, our teams&#xA;approach was to balance ambitious strategies alongside proven traditional&#xA;bug-finding techniques like fuzzing.&#xA;While our team was deeply familiar with fuzzing C++ from decades of academic&#xA;research and industry work, Java was uncharted territory for us.&#xA;In part of our Java fuzzing development we created a fork of Jazzer that uses&#xA;LibAFL as the fuzzing backend and it is available as&#xA;&lt;a href=&#34;https://github.com/Team-Atlanta/aixcc-afc-atlantis/tree/main/example-crs-webservice/crs-java/crs/fuzzers/atl-libafl-jazzer&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;part of our open source release&lt;/a&gt;.&#xA;This post details some of the lessons we learned about Java fuzzing and the&#xA;creation of this fork.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Atlantis Infrastructure</title>
      <link>http://localhost:1313/blog/post-atl-infra/</link>
      <pubDate>Wed, 13 Aug 2025 05:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/post-atl-infra/</guid>
      <description>&lt;p&gt;The AIxCC competition is not just about creating automated bug-finding and patching techniques&#xA;&amp;ndash; it is about building a &lt;strong&gt;cyber reasoning system&lt;/strong&gt; (CRS) that can do both without any human assistance.&#xA;To succeed, a CRS must excel in three critical infrastructure areas:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Reliability:&lt;/strong&gt; Run continuously for weeks without intervention.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Scalability:&lt;/strong&gt; Handle many challenge projects concurrently.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Budget Utilization:&lt;/strong&gt; Maximize Azure cloud and LLM credit usage.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Submission Management:&lt;/strong&gt; Consistently deliver valid POVs, Patches, SARIF assessments, and Bundles.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In this post, we will share how we designed the infrastructure of our CRS, &lt;strong&gt;Atlantis&lt;/strong&gt;, to meet these keys and make it as robust as possible.&#xA;We could not have won AIxCC without the exceptional work of &lt;a href=&#34;http://localhost:1313/authors/#team-infra&#34;&#xA;&#xA;&#xA;&#xA; &#xA;&#xA;&#xA;&gt;our infrastructure team&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
