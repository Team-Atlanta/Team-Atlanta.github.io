<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concolic Execution on Team Atlanta</title><link>https://team-atlanta.github.io/tags/concolic-execution/</link><description>Recent content in Concolic Execution on Team Atlanta</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 29 Sep 2025 23:00:00 +0900</lastBuildDate><atom:link href="https://team-atlanta.github.io/tags/concolic-execution/index.xml" rel="self" type="application/rss+xml"/><item><title>Our GraalVM Executor: How We Achieved Compatibility, Scale, and Speed</title><link>https://team-atlanta.github.io/blog/post-crs-java-concolic/</link><pubDate>Mon, 29 Sep 2025 23:00:00 +0900</pubDate><guid>https://team-atlanta.github.io/blog/post-crs-java-concolic/</guid><description>&lt;p>In the AIxCC competition,
while fully committing to the challenge of leveraging Large Language Models (LLMs),
we also integrated traditional techniques to create a more robust bug-finding system with fewer blind spots.&lt;/p>
&lt;p>The competition provided a baseline fuzzer (Jazzer for Java projects),
but coverage-guided fuzzing in general often struggles with the complex validation logic that guards deep code paths.
To address this, concolic execution is a well-known solution for exploring these paths by solving their input conditions.
Our main challenge, therefore, was how to effectively leverage this powerful technique for the competition&amp;rsquo;s bug-finding goals.&lt;/p></description></item></channel></rss>