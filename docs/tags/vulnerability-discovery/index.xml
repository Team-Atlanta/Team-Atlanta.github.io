<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vulnerability-Discovery on Team Atlanta</title><link>https://team-atlanta.github.io/tags/vulnerability-discovery/</link><description>Recent content in Vulnerability-Discovery on Team Atlanta</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 07 Sep 2025 11:00:00 +0000</lastBuildDate><atom:link href="https://team-atlanta.github.io/tags/vulnerability-discovery/index.xml" rel="self" type="application/rss+xml"/><item><title>BCDA: The AI Detective Separating Real Bugs from False Alarms</title><link>https://team-atlanta.github.io/blog/post-mlla-bcda/</link><pubDate>Sun, 07 Sep 2025 11:00:00 +0000</pubDate><guid>https://team-atlanta.github.io/blog/post-mlla-bcda/</guid><description>&lt;h2 id="-from-potential-sink-to-actionable-intelligence">ðŸŽ¯ From Potential Sink to Actionable Intelligence&lt;/h2>
&lt;p>BCDA (Bug Candidate Detection Agent)&amp;rsquo;s core mission is to address the fundamental challenge of lightweight sink analysis: distinguishing real vulnerabilities from false-positive noise.
When MCGA, our cartographer, flags a function containing a potentially vulnerable &amp;ldquo;sink&amp;rdquo; (such as a function that executes system commands), BCDA takes over.&lt;/p>
&lt;p>Its job isn&amp;rsquo;t just to say &amp;ldquo;yes&amp;rdquo; or &amp;ldquo;no.&amp;rdquo;
BCDA performs a deep, multi-stage investigation powered by LLMs to produce a &lt;strong>Bug Inducing Thing (BIT)&lt;/strong>.
A BIT is a high-fidelity, structured report detailing a confirmed vulnerability candidate.
It includes the exact location, the specific trigger conditions (like &lt;code>if-else&lt;/code> branches), and a detailed analysis generated by LLMs.
This report becomes a detailed guide for our demolition expert, BGA, and the fuzzing stages.&lt;/p></description></item><item><title>MLLA: Teaching LLMs to Hunt Bugs Like Security Researchers</title><link>https://team-atlanta.github.io/blog/post-mlla-overview/</link><pubDate>Thu, 28 Aug 2025 10:00:00 +0000</pubDate><guid>https://team-atlanta.github.io/blog/post-mlla-overview/</guid><description>&lt;h2 id="when-fuzzing-meets-intelligence">When Fuzzing Meets Intelligence&lt;/h2>
&lt;p>Picture this: you&amp;rsquo;re a security researcher staring at 20 million lines of code, hunting for vulnerabilities that could compromise everything from your smartphone to critical infrastructure. Traditional fuzzers approach this challenge with brute force â€“ throwing millions of random inputs at the program like a toddler mashing keyboard keys. Sometimes it works. Often, it doesn&amp;rsquo;t.&lt;/p>
&lt;p>But what if we could change the game entirely?&lt;/p>
&lt;p>&lt;span style="background-color:lightgray;color:green">Meet MLLA (Multi-Language LLM Agent) â€“ the most ambitious experiment in AI-assisted vulnerability discovery we&amp;rsquo;ve ever built. Instead of random chaos, MLLA thinks, plans, and hunts bugs like an experienced security researcher, but at machine scale.&lt;/span>&lt;/p></description></item></channel></rss>