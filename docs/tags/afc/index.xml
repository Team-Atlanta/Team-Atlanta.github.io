<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AFC on Team Atlanta</title><link>https://team-atlanta.github.io/tags/afc/</link><description>Recent content in AFC on Team Atlanta</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 19 Aug 2025 12:15:00 +0000</lastBuildDate><atom:link href="https://team-atlanta.github.io/tags/afc/index.xml" rel="self" type="application/rss+xml"/><item><title>Hybrid Fuzzing: Exploring Complex Paths with Concolic Execution</title><link>https://team-atlanta.github.io/blog/post-crs-concolic/</link><pubDate>Tue, 19 Aug 2025 12:15:00 +0000</pubDate><guid>https://team-atlanta.github.io/blog/post-crs-concolic/</guid><description>&lt;h2 id="1-why-concolic-execution"&gt;1. Why Concolic Execution?&lt;/h2&gt;
&lt;p&gt;We integrated a hybrid fuzzer based on concolic execution to enable our fuzzer to explore complex path conditions. The following code snippet from the &lt;code&gt;curl-delta-01&lt;/code&gt; challenge problem in Round 3 illustrates a complex path condition that benefits from concolic execution. The function &lt;code&gt;verynormalprotocol_doing&lt;/code&gt; contains a synthetic bug triggered when the server response begins with the string &lt;code&gt;&amp;quot;crashycrashy&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; CURLcode &lt;span style="color:#a6e22e"&gt;verynormalprotocol_doing&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Curl_easy &lt;span style="color:#f92672"&gt;*&lt;/span&gt;data, &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;done)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CURLcode result &lt;span style="color:#f92672"&gt;=&lt;/span&gt; CURLE_WEIRD_SERVER_REPLY;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;ssize_t&lt;/span&gt; nread;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; response[&lt;span style="color:#ae81ff"&gt;128&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;done &lt;span style="color:#f92672"&gt;=&lt;/span&gt; FALSE;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;/* Read the response from the server. If we see the correct &amp;#34;heartbeat&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; we should complete the transaction and return CURLE_OK. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; result &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Curl_xfer_recv&lt;/span&gt;(data, response, &lt;span style="color:#ae81ff"&gt;128&lt;/span&gt;, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;nread);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt;(result &lt;span style="color:#f92672"&gt;==&lt;/span&gt; CURLE_AGAIN);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(result) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;/* ... */&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strcasecmp&lt;/span&gt;(response, &lt;span style="color:#e6db74"&gt;&amp;#34;crashycrashy&amp;#34;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) { &lt;span style="color:#75715e"&gt;/* &amp;lt;== COMPLICATED PATH CONDITION */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;done &lt;span style="color:#f92672"&gt;=&lt;/span&gt; TRUE;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;unsigned&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;)result &lt;span style="color:#f92672"&gt;=&lt;/span&gt; CURLE_OK;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;/* ... */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; result;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Traditional fuzzers struggle to generate inputs that satisfy this condition because it requires meeting two distinct requirements simultaneously:&lt;/p&gt;</description></item><item><title>AIxCC Final and Team Atlanta</title><link>https://team-atlanta.github.io/blog/post-afc/</link><pubDate>Tue, 12 Aug 2025 12:15:00 +0000</pubDate><guid>https://team-atlanta.github.io/blog/post-afc/</guid><description>&lt;p&gt;Two years after its first announcement at &lt;a href="https://aicyberchallenge.com/"




 target="_blank"
 


&gt;DEF CON 31&lt;/a&gt;,
our team stood on stage as the winners of the AIxCC Finalâ€”a moment we had been working toward
since the competition began.&lt;/p&gt;
&lt;p&gt;Yet when we heard we placed 1st, relief overshadowed excitement.
Why? While competing head-to-head with world-class teams like &lt;a href="https://theori.io/blog/aixcc-and-roboduck-63447"




 target="_blank"
 


&gt;Theori&lt;/a&gt;
was a privilege, the real-time, long-running nature of this competition
demanded extreme engineering reliability alongside novel approaches to succeed.&lt;/p&gt;</description></item></channel></rss>