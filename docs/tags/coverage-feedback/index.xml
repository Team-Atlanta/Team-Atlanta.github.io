<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coverage-Feedback on Team Atlanta</title>
    <link>http://localhost:1313/tags/coverage-feedback/</link>
    <description>Recent content in Coverage-Feedback on Team Atlanta</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Aug 2025 22:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/coverage-feedback/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Context Engineering: How BGA Teaches LLMs to Write Exploits</title>
      <link>http://localhost:1313/blog/post-context-engineering/</link>
      <pubDate>Wed, 27 Aug 2025 22:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/post-context-engineering/</guid>
      <description>&lt;h1 id=&#34;blog-post-agenda-context-engineering-for-ai-vulnerability-discovery&#34;&gt;BLOG POST AGENDA: Context Engineering for AI Vulnerability Discovery&lt;/h1&gt;&#xA;&lt;h2 id=&#34;target-audience--style&#34;&gt;Target Audience &amp;amp; Style&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Primary&lt;/strong&gt;: ML engineers, prompt engineers, LLM application developers&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Secondary&lt;/strong&gt;: Security researchers wanting implementation details&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Tone&lt;/strong&gt;: Technical deep dive with practical examples&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Style&lt;/strong&gt;: Tutorial-like with concrete techniques and lessons learned&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;core-structure&#34;&gt;Core Structure&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-introduction-beyond-prompt-engineering-300-words&#34;&gt;1. &lt;strong&gt;Introduction: Beyond Prompt Engineering&lt;/strong&gt; (~300 words)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Why &amp;ldquo;context engineering&amp;rdquo; vs &amp;ldquo;prompt engineering&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;The challenge: Teaching LLMs to understand vulnerabilities and write exploits&lt;/li&gt;&#xA;&lt;li&gt;Preview of techniques: XML structuring, coverage integration, domain knowledge injection&lt;/li&gt;&#xA;&lt;li&gt;Connection to BGA&amp;rsquo;s success (link to main BGA post)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-the-context-challenge-in-security-ai-400-words&#34;&gt;2. &lt;strong&gt;The Context Challenge in Security AI&lt;/strong&gt; (~400 words)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Scale problem&lt;/strong&gt;: Massive codebases, limited context windows&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Precision problem&lt;/strong&gt;: Need exact technical details, not approximations&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Feedback problem&lt;/strong&gt;: LLMs need execution results to improve&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Domain problem&lt;/strong&gt;: Generic LLMs lack security expertise&lt;/li&gt;&#xA;&lt;li&gt;Why traditional prompting approaches fail for exploit generation&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-architecture-overview-the-context-engineering-pipeline-300-words&#34;&gt;3. &lt;strong&gt;Architecture Overview: The Context Engineering Pipeline&lt;/strong&gt; (~300 words)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How context flows from analysis → prompt → execution → feedback → refinement&lt;/li&gt;&#xA;&lt;li&gt;The role of different agents in context transformation&lt;/li&gt;&#xA;&lt;li&gt;Integration with execution infrastructure (coverage, Docker, validation)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;4-technique-1-xml-structured-context-design-600-words&#34;&gt;4. &lt;strong&gt;Technique 1: XML-Structured Context Design&lt;/strong&gt; (~600 words)&lt;/h3&gt;&#xA;&lt;h4 id=&#34;41-why-xml-over-json-or-plain-text&#34;&gt;4.1 Why XML Over JSON or Plain Text&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Parsing reliability for structured data&lt;/li&gt;&#xA;&lt;li&gt;Hierarchical organization of complex information&lt;/li&gt;&#xA;&lt;li&gt;Clear section boundaries for LLM comprehension&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;42-core-xml-patterns-in-bga&#34;&gt;4.2 Core XML Patterns in BGA&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;&amp;lt;SOURCE_CODE_INFO&amp;gt;&lt;/code&gt; with function boundaries&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;&amp;lt;COVERAGE_INFO_FOR_KEY_CONDITIONS&amp;gt;&lt;/code&gt; with @VISITED markers&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;&amp;lt;VULNERABILITY_CONTEXT&amp;gt;&lt;/code&gt; with categorized threat information&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;&amp;lt;DATA_STRUCT_GUIDE&amp;gt;&lt;/code&gt; for format-specific knowledge&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;43-real-examples&#34;&gt;4.3 Real Examples&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;BlobGen system prompt structure (from technical report)&lt;/li&gt;&#xA;&lt;li&gt;Generator planning prompt with AttributeCG integration&lt;/li&gt;&#xA;&lt;li&gt;Coverage feedback prompt with execution results&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;5-technique-2-context-window-management-500-words&#34;&gt;5. &lt;strong&gt;Technique 2: Context Window Management&lt;/strong&gt; (~500 words)&lt;/h3&gt;&#xA;&lt;h4 id=&#34;51-the-compression-challenge&#34;&gt;5.1 The Compression Challenge&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Fitting elephant-sized vulnerability contexts into mouse-sized windows&lt;/li&gt;&#xA;&lt;li&gt;Selective inclusion strategies (@KEY_CONDITION, @BUG_HERE filtering)&lt;/li&gt;&#xA;&lt;li&gt;Function boundary extraction and relevance scoring&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;52-hierarchical-context-layering&#34;&gt;5.2 Hierarchical Context Layering&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;System prompt: Role and constraints&lt;/li&gt;&#xA;&lt;li&gt;Context prompt: Vulnerability and code structure&lt;/li&gt;&#xA;&lt;li&gt;Task prompt: Specific exploitation goals&lt;/li&gt;&#xA;&lt;li&gt;Feedback prompt: Execution results and refinement direction&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;53-context-optimization-techniques&#34;&gt;5.3 Context Optimization Techniques&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Line number formatting (&lt;code&gt;[n]:&lt;/code&gt; style from RustAssistant)&lt;/li&gt;&#xA;&lt;li&gt;Comment annotation systems (@-prefix markers)&lt;/li&gt;&#xA;&lt;li&gt;Ellipsis for irrelevant code sections&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;6-technique-3-coverage-driven-context-refinement-600-words&#34;&gt;6. &lt;strong&gt;Technique 3: Coverage-Driven Context Refinement&lt;/strong&gt; (~600 words)&lt;/h3&gt;&#xA;&lt;h4 id=&#34;61-the-feedback-loop-architecture&#34;&gt;6.1 The Feedback Loop Architecture&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How execution results transform into context updates&lt;/li&gt;&#xA;&lt;li&gt;@VISITED marker integration into source code&lt;/li&gt;&#xA;&lt;li&gt;Coverage diff analysis for iterative improvement&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;62-multi-variation-context-merging-generator&#34;&gt;6.2 Multi-Variation Context Merging (Generator)&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Aggregating insights from 20 payload variations&lt;/li&gt;&#xA;&lt;li&gt;Coverage summary generation and analysis&lt;/li&gt;&#xA;&lt;li&gt;Function prioritization based on collective results&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;63-iterative-refinement-workflows&#34;&gt;6.3 Iterative Refinement Workflows&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;BlobGen: 4-iteration single payload refinement&lt;/li&gt;&#xA;&lt;li&gt;Generator: Multi-variation coverage analysis&lt;/li&gt;&#xA;&lt;li&gt;Mutator: Transition-focused context windows&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;7-technique-4-domain-knowledge-integration-700-words&#34;&gt;7. &lt;strong&gt;Technique 4: Domain Knowledge Integration&lt;/strong&gt; (~700 words)&lt;/h3&gt;&#xA;&lt;h4 id=&#34;71-vulnerability-specific-context-templates&#34;&gt;7.1 Vulnerability-Specific Context Templates&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;OS Command Injection patterns and requirements&lt;/li&gt;&#xA;&lt;li&gt;XXE attack strategies and target domains&lt;/li&gt;&#xA;&lt;li&gt;Memory corruption techniques and sanitizer integration&lt;/li&gt;&#xA;&lt;li&gt;Deserialization exploit templates&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;72-format-aware-context-engineering&#34;&gt;7.2 Format-Aware Context Engineering&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;FuzzedDataProvider&lt;/strong&gt;: Consumption patterns and libfdp integration&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ByteBuffer&lt;/strong&gt;: Endianness handling and integer consumption&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Complex formats&lt;/strong&gt;: ZIP+XML combinations, multipart forms&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Binary structures&lt;/strong&gt;: EXIF, GZIP, protocol buffers&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;73-adaptive-context-selection&#34;&gt;7.3 Adaptive Context Selection&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Context-aware prompt generation based on detected patterns&lt;/li&gt;&#xA;&lt;li&gt;Selective domain knowledge inclusion (avoid information overload)&lt;/li&gt;&#xA;&lt;li&gt;Dynamic template selection based on vulnerability classification&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;8-technique-5-multi-agent-context-coordination-500-words&#34;&gt;8. &lt;strong&gt;Technique 5: Multi-Agent Context Coordination&lt;/strong&gt; (~500 words)&lt;/h3&gt;&#xA;&lt;h4 id=&#34;81-context-transformation-between-agents&#34;&gt;8.1 Context Transformation Between Agents&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How BCDA BITs become BGA exploitation contexts&lt;/li&gt;&#xA;&lt;li&gt;Orchestrator&amp;rsquo;s role in context filtering and prioritization&lt;/li&gt;&#xA;&lt;li&gt;Information flow and context adaptation across agent boundaries&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;82-shared-context-infrastructure&#34;&gt;8.2 Shared Context Infrastructure&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Caching strategies for repeated context elements&lt;/li&gt;&#xA;&lt;li&gt;Context version management and updates&lt;/li&gt;&#xA;&lt;li&gt;Cross-agent context consistency&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;83-concurrent-context-management&#34;&gt;8.3 Concurrent Context Management&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Asyncio coordination with context isolation&lt;/li&gt;&#xA;&lt;li&gt;Resource management for multiple LLM calls&lt;/li&gt;&#xA;&lt;li&gt;Context cleanup and memory optimization&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;9-lessons-learned--best-practices-600-words&#34;&gt;9. &lt;strong&gt;Lessons Learned &amp;amp; Best Practices&lt;/strong&gt; (~600 words)&lt;/h3&gt;&#xA;&lt;h4 id=&#34;91-what-worked&#34;&gt;9.1 What Worked&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;XML structure reliability over JSON&lt;/li&gt;&#xA;&lt;li&gt;@VISITED markers for clear execution feedback&lt;/li&gt;&#xA;&lt;li&gt;Role-playing prompts (&amp;ldquo;You are a security researcher&amp;hellip;&amp;rdquo;)&lt;/li&gt;&#xA;&lt;li&gt;Chain-of-thought reasoning before code generation&lt;/li&gt;&#xA;&lt;li&gt;Selective context inclusion over comprehensive dumps&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;92-what-failed&#34;&gt;9.2 What Failed&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Overly complex nested XML structures&lt;/li&gt;&#xA;&lt;li&gt;Too much context leading to diluted focus&lt;/li&gt;&#xA;&lt;li&gt;Generic prompting without domain knowledge&lt;/li&gt;&#xA;&lt;li&gt;Single-shot generation without feedback loops&lt;/li&gt;&#xA;&lt;li&gt;Plain text formatting for complex technical data&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;93-competition-specific-insights&#34;&gt;9.3 Competition-Specific Insights&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Cost optimization strategies (prompt compression, caching)&lt;/li&gt;&#xA;&lt;li&gt;Speed vs accuracy trade-offs in context engineering&lt;/li&gt;&#xA;&lt;li&gt;Model selection impact on context effectiveness&lt;/li&gt;&#xA;&lt;li&gt;Real-world performance under time pressure&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;10-practical-implementation-guide-500-words&#34;&gt;10. &lt;strong&gt;Practical Implementation Guide&lt;/strong&gt; (~500 words)&lt;/h3&gt;&#xA;&lt;h4 id=&#34;101-getting-started&#34;&gt;10.1 Getting Started&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Basic XML prompt structure templates&lt;/li&gt;&#xA;&lt;li&gt;Coverage integration setup&lt;/li&gt;&#xA;&lt;li&gt;Domain knowledge organization&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;102-advanced-techniques&#34;&gt;10.2 Advanced Techniques&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Context compression algorithms&lt;/li&gt;&#xA;&lt;li&gt;Dynamic prompt generation&lt;/li&gt;&#xA;&lt;li&gt;Feedback loop implementation&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;103-integration-points&#34;&gt;10.3 Integration Points&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How to adapt these techniques for other domains&lt;/li&gt;&#xA;&lt;li&gt;Context engineering for non-security AI applications&lt;/li&gt;&#xA;&lt;li&gt;Scaling considerations and optimization&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;11-future-directions-300-words&#34;&gt;11. &lt;strong&gt;Future Directions&lt;/strong&gt; (~300 words)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Context engineering research opportunities&lt;/li&gt;&#xA;&lt;li&gt;Potential improvements based on competition experience&lt;/li&gt;&#xA;&lt;li&gt;Cross-domain applications of these techniques&lt;/li&gt;&#xA;&lt;li&gt;Integration with next-generation LLMs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-resources--deep-dive-links-200-words&#34;&gt;12. &lt;strong&gt;Resources &amp;amp; Deep Dive Links&lt;/strong&gt; (~200 words)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Links to actual prompt templates from BGA source code&lt;/li&gt;&#xA;&lt;li&gt;Context engineering examples from technical report&lt;/li&gt;&#xA;&lt;li&gt;Related techniques in academic literature&lt;/li&gt;&#xA;&lt;li&gt;Tools and libraries for context engineering&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;key-technical-examples-to-include&#34;&gt;Key Technical Examples to Include&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Complete BlobGen System Prompt&lt;/strong&gt; with XML structure analysis&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Generator Coverage Integration&lt;/strong&gt; showing 20-variation feedback processing&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Domain Knowledge Templates&lt;/strong&gt; for different vulnerability types&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Context Compression Examples&lt;/strong&gt; showing before/after optimization&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Multi-Agent Context Flow&lt;/strong&gt; from BCDA BIT to BGA exploitation&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Real Coverage Feedback&lt;/strong&gt; with @VISITED markers and execution results&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;visual-elements&#34;&gt;Visual Elements&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Context engineering pipeline diagram&lt;/li&gt;&#xA;&lt;li&gt;XML structure breakdown with annotations&lt;/li&gt;&#xA;&lt;li&gt;Before/after context optimization examples&lt;/li&gt;&#xA;&lt;li&gt;Multi-agent context transformation flowchart&lt;/li&gt;&#xA;&lt;li&gt;Coverage feedback integration visualization&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;connection-points&#34;&gt;Connection Points&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Link back to main BGA blog post for system overview&lt;/li&gt;&#xA;&lt;li&gt;Reference specific agents and their context needs&lt;/li&gt;&#xA;&lt;li&gt;Show how context engineering enabled the 7 vulnerability discoveries&lt;/li&gt;&#xA;&lt;li&gt;Connect to broader MLLA and UniAFL systems&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;key-messages&#34;&gt;Key Messages&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Context engineering is more precise than prompt engineering&lt;/li&gt;&#xA;&lt;li&gt;Structure and feedback loops are crucial for technical AI applications&lt;/li&gt;&#xA;&lt;li&gt;XML provides reliable parsing for complex technical context&lt;/li&gt;&#xA;&lt;li&gt;Domain knowledge integration requires careful balance&lt;/li&gt;&#xA;&lt;li&gt;Real-world results validate these techniques&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This blog post will serve as a comprehensive guide for implementing advanced context engineering techniques in LLM applications, using BGA&amp;rsquo;s proven success as a case study while providing broadly applicable insights for other domains.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
