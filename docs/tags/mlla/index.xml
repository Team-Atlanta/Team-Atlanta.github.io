<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mlla on Team Atlanta</title><link>https://team-atlanta.github.io/tags/mlla/</link><description>Recent content in Mlla on Team Atlanta</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 07 Sep 2025 11:00:00 +0000</lastBuildDate><atom:link href="https://team-atlanta.github.io/tags/mlla/index.xml" rel="self" type="application/rss+xml"/><item><title>BCDA: The AI Detective Separating Real Bugs from False Alarms</title><link>https://team-atlanta.github.io/blog/post-mlla-bcda/</link><pubDate>Sun, 07 Sep 2025 11:00:00 +0000</pubDate><guid>https://team-atlanta.github.io/blog/post-mlla-bcda/</guid><description>&lt;h2 id="-from-potential-sink-to-actionable-intelligence">ðŸŽ¯ From Potential Sink to Actionable Intelligence&lt;/h2>
&lt;p>BCDA (Bug Candidate Detection Agent)&amp;rsquo;s core mission is to address the fundamental challenge of lightweight sink analysis: distinguishing real vulnerabilities from false-positive noise.
When MCGA, our cartographer, flags a function containing a potentially vulnerable &amp;ldquo;sink&amp;rdquo; (such as a function that executes system commands), BCDA takes over.&lt;/p>
&lt;p>Its job isn&amp;rsquo;t just to say &amp;ldquo;yes&amp;rdquo; or &amp;ldquo;no.&amp;rdquo;
BCDA performs a deep, multi-stage investigation powered by LLMs to produce a &lt;strong>Bug Inducing Thing (BIT)&lt;/strong>.
A BIT is a high-fidelity, structured report detailing a confirmed vulnerability candidate.
It includes the exact location, the specific trigger conditions (like &lt;code>if-else&lt;/code> branches), and a detailed analysis generated by LLMs.
This report becomes a detailed guide for our demolition expert, BGA, and the fuzzing stages.&lt;/p></description></item><item><title>From Harness to Vulnerability: AI Agents for Code Comprehension and Bug Discovery</title><link>https://team-atlanta.github.io/blog/post-mlla-disc-agents/</link><pubDate>Thu, 04 Sep 2025 10:00:00 +0000</pubDate><guid>https://team-atlanta.github.io/blog/post-mlla-disc-agents/</guid><description>&lt;h2 id="beneath-the-exploit-the-groundwork-that-makes-bug-hunting-possible">&lt;strong>Beneath the Exploit: The Groundwork That Makes Bug Hunting Possible&lt;/strong>&lt;/h2>
&lt;p>When people hear about &lt;strong>AI agents finding vulnerabilities&lt;/strong>, they often imagine the spectacular finale: an exploit payload triggering a crash, or a carefully crafted generator slipping past validation layers.&lt;/p>
&lt;p>But hereâ€™s the truth: &lt;strong>none of that would have been possible without groundwork laid by three quieter agents.&lt;/strong>&lt;/p>
&lt;p>Before any exploit can be created, the system must answer harder, subtler questions:&lt;/p></description></item><item><title>Context Engineering: How BGA Teaches LLMs to Write Exploits</title><link>https://team-atlanta.github.io/blog/post-context-engineering/</link><pubDate>Tue, 02 Sep 2025 10:00:00 +0000</pubDate><guid>https://team-atlanta.github.io/blog/post-context-engineering/</guid><description>&lt;h2 id="the-problem-with-teaching-ai-to-hack">The Problem with Teaching AI to Hack&lt;/h2>
&lt;p>Teaching an LLM to write working exploits is more challenging than typical AI tasks. Unlike most applications where &amp;ldquo;close enough&amp;rdquo; works, vulnerability exploitation requires precise execution. A single character error can make an entire exploit fail.&lt;/p>
&lt;p>Take this seemingly simple Java reflective call injection vulnerability:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String className &lt;span style="color:#f92672">=&lt;/span> request.&lt;span style="color:#a6e22e">getParameter&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;class&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Class.&lt;span style="color:#a6e22e">forName&lt;/span>(className); &lt;span style="color:#75715e">// BUG: arbitrary class loading&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This looks straightforward, but there&amp;rsquo;s a catch: to exploit this vulnerability, the LLM must load the exact class name &lt;a href="https://github.com/CodeIntelligenceTesting/jazzer/blob/527fe858f700382f9207cf7c7bc6b95cf59de936/sanitizers/src/main/java/com/code_intelligence/jazzer/sanitizers/Utils.kt#L25"




 target="_blank"
 


>&lt;code>&amp;quot;jaz.Zer&amp;quot;&lt;/code>&lt;/a> to trigger &lt;a href="https://github.com/CodeIntelligenceTesting/jazzer"




 target="_blank"
 


>Jazzer&lt;/a>&amp;rsquo;s detection. Not &lt;code>&amp;quot;jaz.Zero&amp;quot;&lt;/code>, not &lt;code>&amp;quot;java.Zer&amp;quot;&lt;/code>, not &lt;code>&amp;quot;jaz.zer&amp;quot;&lt;/code>. One character wrong and the entire exploit fails.&lt;/p></description></item><item><title>BGA: Self-Evolving Exploits Through Multi-Agent AI</title><link>https://team-atlanta.github.io/blog/post-mlla-bga/</link><pubDate>Fri, 29 Aug 2025 10:00:00 +0000</pubDate><guid>https://team-atlanta.github.io/blog/post-mlla-bga/</guid><description>&lt;h2 id="-where-bga-fits-in-the-mlla-pipeline">ðŸ”„ Where BGA Fits in the MLLA Pipeline&lt;/h2>
&lt;p>Before we dive into BGA&amp;rsquo;s self-evolving exploits, here&amp;rsquo;s how it fits into the broader MLLA vulnerability discovery pipeline:&lt;/p>
&lt;p>&lt;strong>Discovery Agents&lt;/strong> (&lt;a href="https://team-atlanta.github.io/blog/post-mlla-disc-agents/"




 target="_blank"
 


>CPUA, MCGA, CGPA&lt;/a>) â†’ &lt;strong>Detective&lt;/strong> (&lt;a href="https://team-atlanta.github.io/blog/post-mlla-bcda/"




 target="_blank"
 


>BCDA&lt;/a>) â†’ &lt;strong>Exploit Generation&lt;/strong> (&lt;strong>BGA&lt;/strong>)&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Discovery agents&lt;/strong> map the codebase and identify potential vulnerability paths&lt;/li>
&lt;li>&lt;strong>BCDA&lt;/strong> investigates these paths, filtering false positives and creating Bug Inducing Things (BITs) with precise trigger conditions&lt;/li>
&lt;li>&lt;strong>BGA&lt;/strong> receives these confirmed vulnerabilities and generates self-evolving exploits to trigger them&lt;/li>
&lt;/ol>
&lt;p>Now BGA takes the stage, armed with BCDA&amp;rsquo;s detailed intelligence about exactly what conditions must be satisfied to reach each vulnerability.&lt;/p></description></item><item><title>MLLA: Teaching LLMs to Hunt Bugs Like Security Researchers</title><link>https://team-atlanta.github.io/blog/post-mlla-overview/</link><pubDate>Thu, 28 Aug 2025 10:00:00 +0000</pubDate><guid>https://team-atlanta.github.io/blog/post-mlla-overview/</guid><description>&lt;h2 id="when-fuzzing-meets-intelligence">When Fuzzing Meets Intelligence&lt;/h2>
&lt;p>Picture this: you&amp;rsquo;re a security researcher staring at 20 million lines of code, hunting for vulnerabilities that could compromise everything from your smartphone to critical infrastructure. Traditional fuzzers approach this challenge with brute force â€“ throwing millions of random inputs at the program like a toddler mashing keyboard keys. Sometimes it works. Often, it doesn&amp;rsquo;t.&lt;/p>
&lt;p>But what if we could change the game entirely?&lt;/p>
&lt;p>&lt;span style="background-color:lightgray;color:green">Meet MLLA (Multi-Language LLM Agent) â€“ the most ambitious experiment in AI-assisted vulnerability discovery we&amp;rsquo;ve ever built. Instead of random chaos, MLLA thinks, plans, and hunts bugs like an experienced security researcher, but at machine scale.&lt;/span>&lt;/p></description></item></channel></rss>