[{"section":"Blog","slug":"/blog/post-asc-sqlite/","title":"Autonomously Uncovering and Fixing a Hidden Vulnerability in SQLite3 with an LLM-Based System","description":"SQLite3 in ASC","date":"August 28, 2024","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/asc-sqlite/sqlite-bug-finding_hu74f0b92a25ffe4a281fdd3139be11b7b_1377840_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"315\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/asc-sqlite\\/sqlite-bug-finding_hu74f0b92a25ffe4a281fdd3139be11b7b_1377840_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/asc-sqlite/sqlite-bug-finding_hu74f0b92a25ffe4a281fdd3139be11b7b_1377840_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/asc-sqlite\\/sqlite-bug-finding_hu74f0b92a25ffe4a281fdd3139be11b7b_1377840_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Vulnerability Analysis","tags":"Atlantis CRS","content":"Without knowing beforehand that the challenge project involved SQLite3, our team, Team Atlanta , entered our Cyber Reasoning System (CRS), named Atlantis, into the AI Cyber Challenge organized by ARPA-H, DARPA, and the White House .\nRemarkably, Atlantis secured six first-bloods and autonomously identified and patched a real bug in SQLite31, earning us a $2 million prize and a place in the grand finals of AIxCC. For more details, check out our team\u0026rsquo;s announcement blog .\nIn this blog, we will outline our very high-level approach to using LLMs for bug detection and vulnerability remediation, provide an analysis of the fixed SQLite3 vulnerability, and discuss the challenges of using our LLM agents for such fixes.\nFollow us on Twitter/X (@TeamAtlanta24 ) if you\u0026rsquo;re interested in AI or security.\nThe Atlantis Cyber Reasoning System Atlantis is a end-to-end, large language model (LLM)-based bug-finding and fixing system designed to function entirely without human intervention. It is capable of handling complex systems like the Linux kernel and supports a range of modern programming languages, including C/C++, Java, and others.\nOur design philosophy is simple: to emulate the mindset of experienced security researchers and hackers through LLM agents, enhanced with advanced program analysis techniques.\nAtlantis is specifically designed to replicate the behavior of human researchers, particularly in auditing the Git repositories of open-source software (OSS). To harness the full potential of LLMs and address their limitations in tackling complex problems, we incorporate traditional program analysis techniques (both dynamic and static) to assist LLMs in decision-making.\nOne of the interesting features of Atlantis is our \u0026ldquo;baby-security-AGI\u0026rdquo; system, which can emulate the code auditing process based on the habits of the security experts on our team. It\u0026rsquo;s not magic; we\u0026rsquo;ve distilled our collective experience and common practices in manual auditing and reverse engineering into structured prompts, significantly enhancing the system\u0026rsquo;s capabilities.\nAll source code will be open-sourced in accordance with the AIxCC competition rules.\nThe Off-by-One Access in SQLite3 The hidden vulnerability was discovered in the FTS5 module of SQLite3 (link ). The bug is located in the trigram tokenizer, which processes each contiguous sequence of three characters as a token, enabling FTS5 to support more general substring matching.\nWhen creating a virtual table, users can specify options in the trigram field (e.g., case_sensitive 1) as outlined in the documentation .\nHowever, if users fail to provide key-value pairs, SQLite3 does not adequately check for this and assumes that the value is present. This assumption can lead to an off-by-one access error. Because SQLite3 allocates a sufficient heap buffer in such cases, the off-by-one access is confined to the space within an allocated heap chunk. Additionally, due to SQLite\u0026rsquo;s good coding practices, it uses MallocZero to ensure no uninitialized variables exist, which ultimately results in a zero pointer dereference.\nClick me to show the vulnerable code in SQLite3 static int fts5TriCreate( void *pUnused, const char **azArg, int nArg, Fts5Tokenizer **ppOut ){ int rc = SQLITE_OK; TrigramTokenizer *pNew = (TrigramTokenizer*)sqlite3_malloc(sizeof(*pNew)); UNUSED_PARAM(pUnused); if( pNew==0 ){ rc = SQLITE_NOMEM; }else{ int i; pNew-\u0026gt;bFold = 1; pNew-\u0026gt;iFoldParam = 0; for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ const char *zArg = azArg[i+1]; \u0026lt;---- off-by-one if( 0==sqlite3_stricmp(azArg[i], \u0026#34;case_sensitive\u0026#34;) ){ if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39;) || zArg[1] ){ \u0026lt;----null dereference rc = SQLITE_ERROR; }else{ pNew-\u0026gt;bFold = (zArg[0]==\u0026#39;0\u0026#39;); } }else if( 0==sqlite3_stricmp(azArg[i], \u0026#34;remove_diacritics\u0026#34;) ){ if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;2\u0026#39;) || zArg[1] ){ \u0026lt;-- rc = SQLITE_ERROR; }else{ pNew-\u0026gt;iFoldParam = (zArg[0]!=\u0026#39;0\u0026#39;) ? 2 : 0; } }else{ rc = SQLITE_ERROR; } } if( pNew-\u0026gt;iFoldParam!=0 \u0026amp;\u0026amp; pNew-\u0026gt;bFold==0 ){ rc = SQLITE_ERROR; } if( rc!=SQLITE_OK ){ fts5TriDelete((Fts5Tokenizer*)pNew); pNew = 0; } } *ppOut = (Fts5Tokenizer*)pNew; return rc; } Working proof-of-concepts (PoCs) to trigger the bug are as follows:\nPoC 1: CREATE VIRTUAL TABLE t USING fts5(s, tokenize=\u0026#39;trigram case_sensitive\u0026#39;); PoC 2: CREATE VIRTUAL TABLE t USING fts5(s, tokenize=\u0026#39;trigram remove_diacritics\u0026#39;); While human researchers might consider this bug trivial, I am still pleased that our system enabled us to be the only team to discover a real bugâ€”even without knowing that the challenge project was SQLite3.\nAuto-Generated Patch vs Human-Write Patch Automatically patching the aforementioned bug is challenging because a perfect patch2 requires the human or AI patcher to understand that the arguments are paired and that the null pointer dereference results from an off-by-one heap access within a glibc-allocated heap chunk.\nIn other words, the actual root cause is a semantic inconsistency concerning the paired arguments. Therefore, the patcher needs to recognize that the code must verify if the number of arguments is even.\nGenerating Patches Using a Naive Zero-Shot Prompt To get a basic sense of how LLMs reason about patch generation, I asked the models to analyze the root cause and generate a patch for the given bug using the crash logs, PoCs, and the code of the fts5TriCreate() function.\nA patch generated by Claude 3.5 sonnet --- a/sqlite3.c +++ b/sqlite3.c @@ -255841,7 +255841,7 @@ static int fts5TriCreate( for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ const char *zArg = azArg[i+1]; if( 0==sqlite3_stricmp(azArg[i], \u0026#34;case_sensitive\u0026#34;) ){ - if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39;) || zArg[1] ){ + if( !zArg || (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39;) || zArg[1] ){ rc = SQLITE_ERROR; }else{ pNew-\u0026gt;bFold = (zArg[0]==\u0026#39;0\u0026#39;); @@ -255849,7 +255849,7 @@ static int fts5TriCreate( }else if( 0==sqlite3_stricmp(azArg[i], \u0026#34;remove_diacritics\u0026#34;) ){ - if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;2\u0026#39;) || zArg[1] ){ + if( !zArg || (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;2\u0026#39;) || zArg[1] ){ rc = SQLITE_ERROR; }else{ pNew-\u0026gt;iFoldParam = (zArg[0]!=\u0026#39;0\u0026#39;) ? 2 : 0; A patch generated by ChatGPT 4o --- a/sqlite3.c +++ b/sqlite3.c @@ -255835,11 +255835,15 @@ pNew-\u0026gt;iFoldParam = 0; for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ const char *zArg = azArg[i+1]; - if( 0==sqlite3_stricmp(azArg[i], \u0026#34;case_sensitive\u0026#34;) ){ + if( i+1 \u0026gt;= nArg || azArg[i+1] == NULL ){ + rc = SQLITE_ERROR; + }else if( 0==sqlite3_stricmp(azArg[i], \u0026#34;case_sensitive\u0026#34;) ){ if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39;) || zArg[1] ){ rc = SQLITE_ERROR; }else{ pNew-\u0026gt;bFold = (zArg[0]==\u0026#39;0\u0026#39;); } }else if( 0==sqlite3_stricmp(azArg[i], \u0026#34;remove_diacritics\u0026#34;) ){ if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;2\u0026#39;) || zArg[1] ){ rc = SQLITE_ERROR; The patches are fairly close to \u0026ldquo;good patches,\u0026rdquo; and the models almost identify the root causes. However, due to my simple zero-shot prompt, there are still a few minor issues. For example, the patch generated by Claude effectively mitigates the bug by ensuring that a null pointer is always handled when the bug is triggered, but it doesn\u0026rsquo;t fully address the off-by-one root cause. The patch generated by GPT-4o addresses the bounds check but only covers the case_sensitive branch, missing the remove_diacritics branch.\nNonetheless, the results are promising given that a simple prompt was used, and the LLMs almost arrived at the correct solution. However, in real-world scenarios, patch generation can be much more challenging, as it requires locating the source code of the vulnerable parts in a large codebase, dealing with indeterminate results, handling hallucinations, and validating correctness, among other issues.\nPatch Generated by Atlantis CRS Atlantis CRS generates patches by incrementally applying domain-specific knowledge with multiple LLM agents and iteratively refining them using a custom validation oracle. The patch generated by Atlantis is as follows:\ndiff --git a/ext/fts5/fts5_tokenize.c b/ext/fts5/fts5_tokenize.c index f12056170..552f14be9 100644 --- a/ext/fts5/fts5_tokenize.c +++ b/ext/fts5/fts5_tokenize.c @@ -1299,8 +1299,10 @@ static int fts5TriCreate( pNew-\u0026gt;bFold = 1; pNew-\u0026gt;iFoldParam = 0; for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ - const char *zArg = azArg[i+1]; - if( 0==sqlite3_stricmp(azArg[i], \u0026#34;case_sensitive\u0026#34;) ){ + const char *zArg = (i+1 \u0026lt; nArg) ? azArg[i+1] : NULL; + if (zArg == NULL) { + rc = SQLITE_ERROR; + } else if( 0==sqlite3_stricmp(azArg[i], \u0026#34;case_sensitive\u0026#34;) ){ if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39;) || zArg[1] ){ rc = SQLITE_ERROR; }else{ The auto-generated patch successfully checks the bounds and provides additional protection against null pointer dereference. In this case, Atlantis spent ~15 minutes for the entire building, patch generation, iteration, and correctness-validation process, demonstrating its promising potential for application to real-world software.\nAdmittedly, our patching techniques are still in their prototype stages, as we require more time to apply and evaluate the many new ideas we have. However, the patch above illustrates that LLM-based automated vulnerability remediation is a very feasible direction.\nThanks Seunggi for collecting the statistics when patching the bug.\nOfficial SQLite3 patch Click me to show SQlite3's official patch commit e9b919d550262076d1b8453c3d6852b88822b922 Author: drh \u0026lt;\u0026gt; Date: Tue Aug 6 22:49:01 2024 +0000 Improved robustness of parsing of tokenize= arguments in FTS5. [forum:/forumpost/171bcc2bcd|Forum post 171bcc2bcd]. FossilOrigin-Name: d9f726ade6b258f8723f90d0b04a4682e885e30939eb29773913e4dfc8e85503 diff --git a/ext/fts5/fts5_tokenize.c b/ext/fts5/fts5_tokenize.c index 3e9fdff3e..08de0d60d 100644 --- a/ext/fts5/fts5_tokenize.c +++ b/ext/fts5/fts5_tokenize.c @@ -79,7 +79,7 @@ static int fts5AsciiCreate( int i; memset(p, 0, sizeof(AsciiTokenizer)); memcpy(p-\u0026gt;aTokenChar, aAsciiTokenChar, sizeof(aAsciiTokenChar)); - for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ + for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg-1; i+=2){ const char *zArg = azArg[i+1]; if( 0==sqlite3_stricmp(azArg[i], \u0026#34;tokenchars\u0026#34;) ){ fts5AsciiAddExceptions(p, zArg, 1); @@ -90,6 +90,7 @@ static int fts5AsciiCreate( rc = SQLITE_ERROR; } } + if( i\u0026lt;nArg ) rc = SQLITE_ERROR; if( rc!=SQLITE_OK ){ fts5AsciiDelete((Fts5Tokenizer*)p); p = 0; @@ -381,17 +382,16 @@ static int fts5UnicodeCreate( } /* Search for a \u0026#34;categories\u0026#34; argument */ - for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ + for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg-1; i+=2){ if( 0==sqlite3_stricmp(azArg[i], \u0026#34;categories\u0026#34;) ){ zCat = azArg[i+1]; } } - if( rc==SQLITE_OK ){ rc = unicodeSetCategories(p, zCat); } - for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ + for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg-1; i+=2){ const char *zArg = azArg[i+1]; if( 0==sqlite3_stricmp(azArg[i], \u0026#34;remove_diacritics\u0026#34;) ){ if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;2\u0026#39;) || zArg[1] ){ @@ -416,6 +416,7 @@ static int fts5UnicodeCreate( rc = SQLITE_ERROR; } } + if( i\u0026lt;nArg ) rc = SQLITE_ERROR; }else{ rc = SQLITE_NOMEM; @@ -1298,7 +1299,7 @@ static int fts5TriCreate( int i; pNew-\u0026gt;bFold = 1; pNew-\u0026gt;iFoldParam = 0; - for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg; i+=2){ + for(i=0; rc==SQLITE_OK \u0026amp;\u0026amp; i\u0026lt;nArg-1; i+=2){ const char *zArg = azArg[i+1]; if( 0==sqlite3_stricmp(azArg[i], \u0026#34;case_sensitive\u0026#34;) ){ if( (zArg[0]!=\u0026#39;0\u0026#39; \u0026amp;\u0026amp; zArg[0]!=\u0026#39;1\u0026#39;) || zArg[1] ){ @@ -1316,6 +1317,7 @@ static int fts5TriCreate( rc = SQLITE_ERROR; } } + if( i\u0026lt;nArg ) rc = SQLITE_ERROR; if( pNew-\u0026gt;iFoldParam!=0 \u0026amp;\u0026amp; pNew-\u0026gt;bFold==0 ){ rc = SQLITE_ERROR; The patch changes the loop boundary and checks early exit to prevent out-of-bounds access. After the loop, there\u0026rsquo;s an additional check:\nif( i\u0026lt;nArg ) rc = SQLITE_ERROR; This check ensures that all arguments were processed. If i is less than nArg after the loop, it means there was an odd numbers of arguments, which is considered an error because the arguments should always come in pairs.\nInterestingly, the maintainer patched fts5UnicodeCreate() and fts5AsciiCreate() as well because similar code patterns existing there. It actually shows the strength of human-write patches because developers remember potential buggy paths in their code base. However, the additional checks are actually unnecessary because the checks are already at the beginning of the functions. It demonstrates human-write patches are not perfect as well.\nstatic int fts5AsciiCreate( void *pUnused, const char **azArg, int nArg, Fts5Tokenizer **ppOut ){ int rc = SQLITE_OK; AsciiTokenizer *p = 0; UNUSED_PARAM(pUnused); if( nArg%2 ){ \u0026lt;---- already checks rc = SQLITE_ERROR; }else{ --\u0026gt; unnecessary checks \u0026lt;--- I believe the maintainers notice the issues so that they changed their patch in b651084 by checking if (nArgs % 2) == 0 at the beginning of fts5TriCreate(). At the same time, they removed the unnecessary patches in fts5AsciiCreate() and fts5UnicodeCreate().\nThe Author\u0026rsquo;s Random Thoughts By leveraging generative AI models (GenAI) as \u0026ldquo;high-level\u0026rdquo; static analysis tools, we can significantly enhance automated bug finding, thanks to their proficiency in code explanation. For example, complex program analysis tasks such as points-to analysis and inter-procedural analysis, which are challenging for traditional compilers, can be approached differently using GenAI through retrieve-augmented generation (RAG). Additionally, GenAI opens new possibilities for automatic exploit generation and vulnerability remediation due to its strong capabilities in code writing.\nHowever, GenAI is not a cure-all and is far from perfect. That\u0026rsquo;s why our hybrid system is designed to improve GenAI\u0026rsquo;s performance in security research by addressing common issues such as LLM hallucinations, scalability, and domain-specific challenges for particular software.\nAIxCC has provided our team with a fantastic opportunity to put into practice the insights gained from decades of security research in both academia and industry. If you\u0026rsquo;re interested in learning more about our team and the work done by our team members , please feel free to contact us !\nFollow us on Twitter/X (@TeamAtlanta24 ) if you\u0026rsquo;re interested in AI or security.\nDiscovering previously unknown bugs does not count as a valid score in the competition. Team Atlanta secured a finalist spot by submitting the intended bugs and patches for AIxCC.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe word \u0026ldquo;perfect patch\u0026rdquo; is a vague concept in my mind. To clarify, a patch should comprehend the context and semantics of the program and address the actual root causes rather than merely adding superficial checks to bypass address sanitizers (ASAN ).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"section":"Blog","slug":"/blog/post-atl/","title":"Announcing Team Atlanta!","description":"Beginning","date":"August 13, 2024","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/atl/team_hua298431885ad4762626086ea59b71217_2822632_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"315\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/atl\\/team_hua298431885ad4762626086ea59b71217_2822632_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/atl/team_hua298431885ad4762626086ea59b71217_2822632_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/atl\\/team_hua298431885ad4762626086ea59b71217_2822632_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Announcement","tags":"team","content":"Hello, world! We are Team Atlanta, the minds behind Atlantis, our innovative AI-driven cybersecurity solution competing in the prestigious DARPA AIxCC .\nOur team is a collaborative powerhouse made up of six leading institutions: Georgia Tech , GTRI , Samsung Research , Samsung Research America , KAIST , and POSTECH . Each of these organizations is led by Georgia Tech alumni, and includes past winners of prestigious hacking competitions such as DEF CON CTF, Pwn2Own and kernelCTF.\nFor the past several months, we have been diligently preparing for this competition, combining our expertise in AI, cybersecurity, and software engineering. Last week, we proudly competed in the AIxCC Semifinals, showcasing our hard work and dedication to advancing cybersecurity through artificial intelligence.\nThe Journey Begins When AIxCC was announced last year , we quickly assembled a team of friends, including Zellic and SSLab . At that time, much was uncertain; details about the game format, scoring rubric, proof-of-vulnerability (PoV), sanitizers, harnesses, supported programming languages, and proof-of-understanding (PoU) were all unclear. Our team, however, started preparing for the competition from last October.\nMany of our team members previously participated in the DARPA Cyber Grand Challenge (CGC) as part of Crspy , where we were responsible for bug finding and exploitation generation. DARPA CGC was an ambitious endeavor that sparked numerous innovative research directions afterward. However, the competition was not without its challenges, particularly due to the gamification of the event; the scoring metrics and rules significantly influenced the outcomes . In the end, the competing Cyber Reasoning Systems (CRS) that focused on operating reactively\u0026ndash;prioritizing the availability score over fixing bugs\u0026ndash; tended to score higher, as exploitation proved to be far more difficult than patching.\nAware of the gamification issues from CGC, we anticipated that to excel in AIxCC our CRS should leverage AI, particularly LLMs, aggressively in various depths and levels of the CRS pipelines. With this in mind, we strategically chose to focus our efforts on two key directions:\nStatic Analysis. To encourage the use of LLMs and set AIxCC apart from CGC, we anticipated that AIxCC would strongly advocate for the adoption of static analysis while steering away from the dominant use of fuzzing1. It\u0026rsquo;s important to note that finding bugs is quite different from finding crash- or bug-triggering inputs. The latter offers a clear advantage in objectively and autonomously verifying the discovered bug, but it has a much narrower scope compared to the former. In practice, the triggering aspect, also known as the reachability problem, is a significantly more challenging and crucial issue to address, where dynamic tools like fuzzing have a clear edge.\nFine-tuning LLMs for Source Code. Specialization is always an advantage when possible. Given that each CRS will likely need to support more than 10 programming languages during the competition, we decided to fine-tune both in-house and open-source models for analyzing code. This approach is conceptually similar to commitPack , but focuses on commits related to bugs like their fixes, bug-introducing commits, descriptions, and public exploits, if available. Our expectation was that training with this data would enable the fine-tuned LLM to reason about security bugs, their fixes, and likely input corpus, more effectively than the foundational model.\nWe quickly realized that to pursue these directions effectively, we first needed a dataset: a benchmark. Our team divided tasks into three areas: 1) static analysis using LLM prompts/agents, 2) developing a C benchmark from sources like CGC and OSS-Fuzz, and 3) collecting a training dataset pairing CVEs with patches and PoCs for open-source projects to fine-tune our in-house code model at Samsung or to leverage open-source LLMs.\nRemarkably, within 4-5 months, we accomplished all three goals, and our LLM-based Cyber Reasoning System (CRS), dubbed Skynet, performed surprisingly well on our benchmark, and fine-tuning on a smaller dataset shows some promises like in python.\nTime flew by. The cold winter of 2023 ended, and we found ourselves in the new year of 2024. I vividly remember that around this time, our dear friends from Zellic left our team to pursue the Small Business Innovation Research (SBIR) track, which DARPA supports with $1 million for the competition. Unfortunately, Georgia Tech and Samsung were not eligible for this award.\nKick-off with Surprises! At the kick-off event on March 29th, AIxCC unveiled the first challenge project: the Linux kernel, along with an example vulnerability, CVE-2021-43267 . This bug is well documented , and its PoC exploit is publicly available , making it an excellent example to work on.\nWhat makes this bug even more intriguing is the story behind it. A security researcher audited the Linux kernel source code using CodeQL . Specifically, the researcher was searching for instances where 16-bit size parameters are passed to the kmalloc() function for memory allocation, using a dataflow-based CodeQL query. The intuition was that a 16-bit size parameter could easily lead to an integer overflow when accessing the allocated object. However, the discovered bug was not caused by an integer overflow, but an out-of-bound heap overflow due to a missing sanity check on the size and related inputs.\nstatic bool tipc_crypto_key_rcv(struct tipc_crypto *rx, struct tipc_msg *hdr) { struct tipc_crypto *tx = tipc_net(rx-\u0026gt;net)-\u0026gt;crypto_tx; struct tipc_aead_key *skey = NULL; u16 key_gen = msg_key_gen(hdr); u16 size = msg_data_sz(hdr); u8 *data = msg_data(hdr); ... /* Allocate memory for the key */ skey = kmalloc(size, GFP_ATOMIC); if (unlikely(!skey)) { pr_err(\u0026#34;%s: unable to allocate memory for skey\\n\u0026#34;, rx-\u0026gt;name); goto exit; } /* Copy key from msg data */ skey-\u0026gt;keylen = ntohl(*((__be32 *)(data + TIPC_AEAD_ALG_NAME))); memcpy(skey-\u0026gt;alg_name, data, TIPC_AEAD_ALG_NAME); memcpy(skey-\u0026gt;key, data + TIPC_AEAD_ALG_NAME + sizeof(__be32), skey-\u0026gt;keylen); The skey was allocated with a size based on the user-provided hdr, but skey-\u0026gt;key was copied up to skey-\u0026gt;keylen, which was also user-controlled and could therefore be inconsistent with size. Unfortunately, the kernel did not perform a sanity check on these two parameters, causing an out-of-boundary access.\ncommit fa40d9734a57bcbfa79a280189799f76c88f7bb0 Author: Max VA \u0026lt;maxv@sentinelone.com\u0026gt; Date: Mon Oct 25 17:31:53 2021 +0200 tipc: fix size validations for the MSG_CRYPTO type The function tipc_crypto_key_rcv is used to parse MSG_CRYPTO messages to receive keys from other nodes in the cluster in order to decrypt any further messages from them. This patch verifies that any supplied sizes in the message body are valid for the received message. diff --git a/net/tipc/crypto.c b/net/tipc/crypto.c index c9391d38de85..dc60c32bb70d 100644 --- a/net/tipc/crypto.c +++ b/net/tipc/crypto.c @@ -2285,43 +2285,53 @@ static bool tipc_crypto_key_rcv(struct tipc_crypto *rx, struct tipc_msg *hdr) u16 key_gen = msg_key_gen(hdr); u16 size = msg_data_sz(hdr); u8 *data = msg_data(hdr); +\tunsigned int keylen; + +\t/* Verify whether the size can exist in the packet */ +\tif (unlikely(size \u0026lt; sizeof(struct tipc_aead_key) + TIPC_AEAD_KEYLEN_MIN)) { +\tpr_debug(\u0026#34;%s: message data size is too small\\n\u0026#34;, rx-\u0026gt;name); +\tgoto exit; +\t} + +\tkeylen = ntohl(*((__be32 *)(data + TIPC_AEAD_ALG_NAME))); + +\t/* Verify the supplied size values */ +\tif (unlikely(size != keylen + sizeof(struct tipc_aead_key) || +\tkeylen \u0026gt; TIPC_AEAD_KEY_SIZE_MAX)) { +\tpr_debug(\u0026#34;%s: invalid MSG_CRYPTO key size\\n\u0026#34;, rx-\u0026gt;name); +\tgoto exit; +\t} Two checks were added to fix this bug: verifying that size is greater than the minimum key size, and ensuring that keylen is consistent with size, thereby preventing access beyond the allocated object.\nMisunderstanding 1: PoV Given a massive Linux repository (yes, 20 million lines of code), where should we start? The LLM approach is all about asking the right questions, also known as prompt engineering. We utilized various techniques like Chain-of-Thought (CoT) and Tree-of-Thoughts (ToT), and were exploring Retrieval Augmented Generation (RAG) to quickly identify known 1-day bugs.\nAt that time, context size was limited; the most advanced model, gpt-3.5 turbo (yes, pre-gpt-4 era) from OpenAI, supported 16k tokens, making it crucial to ask the right question! We initially tried identifying potentially vulnerable code snippets using a range of static analysis tools, including CodeQL, Semgrep and various tools from academic publications, and then filtered the results with LLMs. We even considered diffing the upstream Linux kernel against the provided repository, so that our CRS can look at the modified part of the code first.\nWe were confident our decision; to promote the use of AI tools, the AIxCC organizers would design the competition in a way that allows a single CRS codebase to explore any code repository using 10+ programming languages and their combinations.\nAh, around that time, Google had just announced gemini-pro with an impressive 128k context and the potential to support 1 million tokens! Meanwhile, gpt-4 introduced a game-changing feature called function calling, which allows the LLM to select which callback to use and integrate the results back into the prompt at runtime. We felt that everything was evolving favorably for our CRS to adopt these cutting-edge techniques.\nHowever, PoV turned out to mean bug-triggering input or a crashing input. To demonstrate the existence of a bug, each CRS needed to formulate an input that the referee could quickly verify. While this approach is straightforward and objective for the competition, it significantly discourages the adoption of LLMs in finding bugs. Our team quickly realized that we needed to pivot to the dynamic approaches like fuzzing for the competition.\nvoid tipc_trigger(uint8_t *smashbuf, uint32_t smashlen, int seqno) { uint8_t pkt[0x1000]; uint32_t w0, w1, w2, w3, w4, w5; w0 = hdr_version(TIPC_VERSION); w0 |= hdr_size(6); w0 |= hdr_user(MSG_CRYPTO); w0 |= hdr_msg_size(24 + 36 + KEY_SIZE); w1 = 0; w2 = seqno; w3 = NODE_ID; w4 = 0; w5 = 0; memset(pkt, 0, sizeof(pkt)); gen_tipc_hdr(pkt, w0, w1, w2, w3, w4, w5); memcpy(pkt+24, \u0026#34;HAXX\u0026#34;, 4); *(uint32_t*)(pkt+24+32) = be32(KEY_SIZE + SMASH_SIZE + smashlen); // \u0026lt;- (1) memset(pkt+24+36, \u0026#39;C\u0026#39;, KEY_SIZE); memset(pkt+24+36+KEY_SIZE, \u0026#39;D\u0026#39;, SMASH_SIZE); memcpy(pkt+24+36+KEY_SIZE + SMASH_SIZE, smashbuf, smashlen); tipc_send(pkt, sizeof(pkt)); } Formulating a bug-triggering input, including ensuring its reachability, is a far more challenging task than simply spotting buggy code in the repository. The strength of fuzzing, perhaps the opposite of a sophisticated LLM, is that once a bug is found, you almost always have a bug-triggering input.\nIn CVE-2021-43267, using CodeQL and auditing, one could identify this bug, but triggering it is an entirely different challenge, not to mention exploiting it . For example, TIPC must be properly set up first, and the keylen needs to be precisely crafted in (1) to trigger the bug.\nMisunderstanding 2. Harnesses Sorry, what\u0026rsquo;s the input needed to trigger CVE-2021-43267? even with a fuzzer?\nTo fuzz the Linux kernel, we needed a user program that calls a sequence of system calls with various arguments. Considering the Linux kernel has over 400 system calls to explore, this was far from ideal for a competition setting.\nWe initially assumed that harnesses and test cases would be provided to indicate which parts of the Linux kernel should be checked for bugs. To tackle this, we implemented and adopted various versions of Linux kernel fuzzers, including a custom kernel syscall fuzzer with kcov and kcmp, and also utilized the most popular Linux fuzzer, Syzkaller . However, our focus remained on determining which sequences of system calls to test, using syscall traces and static analysis of the provided program, and then correctly formulating an end-to-end userspace program to trigger the bug.\n/*** * Blob begins with a 4 byte command count * [4-bytes command count] * Currently there are two commands: * 0 - send a packet blob * [4-bytes size][4-bytes send flags][size-bytes packet data] * 1 - send a netlink packet * [4-bytes Message Type][4-bytes Message Flags][4-bytes Netlink Protocol][4-bytes size][size bytes data] * blob_size MUST be a trusted value */ int harness( uint8_t *blob, uint32_t blob_size) { ... } The Linux Kernel CP was announced in April and came with a harness, linux_test_harness.c . This announcement was full of surprises; the program\u0026rsquo;s structure was provided by the harness, which is alas what we primarily focused on, and the blob needed to be fed to the harness in a way that triggers the bug. The types of system calls we could interact with were limited by the harness, and our task was to find the right data input that would lead the harness to invoke the necessary sequence of system calls with the correct parameters. In other words, we needed to understand the harness first before dealing with the Linux kernel bugs.\nLater, the Jenkins harness was announced, and more surprisingly, it was a fuzz driver (often called a fuzzing harness), a standalone program designed to invoke APIs for fuzz testing. In May, a new CP, called mock-cp (a userspace program), was introduced along with a new harness format, which was simply a shell script executing a CP binary with the provided input. Such diverse formats got us thinking that our CRS should adopt LLM to figure out the structure of the programs and CPs first; like how to compile, how to correctly run, etc.\nBy June, the harness format was officially established - surprisingly, yet not entirely unexpected: libfuzzer for userspace programs (mock-cp and Nginx), jazzer for Java programs (Jenkins), while retaining the blob-based harness for the Linux kernel. We continually updated our CRS to adapt to these changes, but many of these decisions rendered our LLM-based components unnecessary. This decision, however, greatly helped all the participating teams by reducing the engineering time needed for game operation. Unfortunately, we were too proactive in reacting to these changes and ended up wasting some engineering time as a result ðŸ˜Š.\nA harness\u0026rsquo;s role is crucial in the AIxCC competition; it sets the context for the CRS to trigger the bug and serves as a key factor in adjusting the difficulty of bug discovery. Therefore, it\u0026rsquo;s important to strike a balance: it should provide enough detail to relieve the CRS from unnecessary burdens, allowing it to focus on bug finding, but without revealing too much information about the bugs.\nMisunderstanding 3. Proof-of-understanding Unlike CGC, which treated the PoV (a proof-of-concept exploit) as sufficient proof of bug discovery, AIxCC required additional informationâ€”specifically, the bug type as classified by CWE , to be provided along with the PoV. This was an interesting decision, as AIxCC required CRS to find bugs in the source code, whereas CGC focused on discovering bugs in binaries.\nOur team spent a lot of time brainstorming how to accurately identify CWE categories, primarily by using LLM prompts that leverage crashing inputs, sanitizer reports, related code snippets, outputs from static analyzers, and more. However, the notion of CWEs can be ambiguous when used as a scoring mechanism for the competition. For instance, should CVE-2021-43267 be classified as (1) CWE-122 (Heap-based Buffer Overflow), (2) CWE-787 (Out-of-bounds Write), or (3) CWE-20 (Improper Input Validation)? The first two describe the symptoms caused by the bug, while the third identifies the root cause, as the patch for this bug involved adding input validations.\nIn the end, AIxCC shifted the focus from PoV to identifying the bug-introducing commit (BIC) - the specific hash or commit ID in the git repository. Combined with the fuzzing harness and PoV, the CRS\u0026rsquo;s task was to run the fuzzing harness and perform a git-bisect to pinpoint the BIC in the repository. We did a simple bisecting in the semifinal but lots of improvement required to be functional for the final event.\nMisunderstanding 4. Semantic patching Patching is one of the most intriguing aspects of AIxCC. In CGC, the PoV was typically a simple exploit (like arbitrary read/write/execute), so mitigation strategies (e.g., adding a stack canary) could effectively thwart the PoV. In fact, patches could be applied without even knowing the specific bug; for example, adding a stack canary to all functions in a binary can prevent buffer overflow exploits that might exist in some places.\nThe challenge in CGC was that the focus was on the binary, and the organizers introduced rules such as a minimum number of bytes changed and performance overheads added to the scoring rubric (e.g., instrumenting all memory accesses to prevent out-of-bound errors). These rules were designed to encourage competitors to generate correct patches. Ultimately, this forced CRS to weigh the pros and cons of universal patching, as both exploiting and patching were extremely difficult during the CGC era, resulting in a trade-off between losing points from exploitation versus losing points from patching and availability.\nIn AIxCC, the CRS must generate a semantically correct patch that not only fixes the identified PoV but also maintains the functional correctness of the CP. This is a tricky task, as correctness cannot be formally defined for CRS - some functional changes may be acceptable, while others may not, depending on the code owner\u0026rsquo;s criteria. One approach to addressing this ambiguity is to provide test code to see if the patch passes the provided, so-called public tests. However, CRS must still account for private tests set by the organizers.\nIn the semifinals, our CRS submitted a patch that successfully prevented the crash and passed the public tests given to us during the competition, but was ultimately rejected in the private functionality tests. We\u0026rsquo;re eager to learn more about the bug and the patch!\nMisunderstanding 5: Sanitizers The concept of sanitizers was unclear to our team until we encountered their concrete implementation for memory-safe languages like Java, and more specifically, for Jenkins, a web application written in Java! The role of a sanitizer, essentially a bug oracle, is to determine whether a bug has been correctly triggered.\nIn memory-unsafe languages like C, standard tools like ASAN and UBSAN can serve as sanitizers to catch memory-safety issues with low or no false positives (e.g., out-of-bound accesses should never occur). However, in memory-safe languages, things get trickier. For example, is executing a command a legitimate feature in CI tools like Jenkins, or should it be treated as a command injection (CWE-78)?\nIn other words, sanitizers are more CP-specific rather than programming language-specific; each CP needs to provide custom sanitizers (e.g., path traversal sanitizers ).\nOur team initially spent time working on finding web-related bugs like XSS or CSRF in Jenkins - areas where we believed LLMs could excel in seed generation. However, once AIxCC announced that the sanitizers for Java would be jazzer sanitizers, we decided to shift our focus more towards standard jazzer-based fuzzing.\nSemifinal Our team dedicated most of our engineering effort to building a CRS for the Linux Kernel, and we\u0026rsquo;re proud that our CRS was able to find and correctly generate a patch for CVE-2021-43267 in the end. However, during the semifinal, it appeared that only one harness was provided, similar to the exemplar, and none of the CRSes functioned properly for the Linux Kernel. We loved to know more about how our Linux CRS functioned during the competition.\nIn summary, our CRS earned a total of six achievement badges: five for discovering bugs (i.e., first bloods) and one for a patch.\nOur CRS found several unique bugs, which we will describe in a later blog post!\nAside from the known CPsâ€”Linux (C), Jenkins (Java), and Nginx (C) - there were new CPs introduced, namely Tika (Java) and sqlite3 (C). Our CRS performed relatively well on sqlite3, but unfortunately, our Java CRS struggled with Tika. We would love to learn more about what happened during the competition. Tika, a popular file format parser, has many unique features, such as recursively parsing embedded objects, which may have contributed to the challenges we faced.\nLooking Ahead to the AIxCC Final ðŸŽ‰ AIxCC Finalists\rWe are thrilled that our team has advanced to the AIxCC finals! We have several ideas that could make the competition even more exciting:\nDifferent execution times based on code complexity.\nThe Linux kernel, with its 6,000 files and 20 million lines of code, requires substantial time for bookkeeping like building, bootstrapping, and bisecting. Compared to smaller programs (e.g., 200k in Tika), it would be beneficial to allocate more time for CRSes to navigate such complex codebases.\nMore programming languages and their combinations.\nTop candidates include Python, Rust, and JavaScript/HTML, along with combinations like JNI (C) in Java or Rust device drivers in the Linux kernel. These would offer a more comprehensive evaluation of CRS capabilities in diverse and challenging settings where CRS is most needed.\nStandardized execution environments.\nStandardizing the compiler (e.g., clang-18), runtime (e.g., JVM version), and base Docker image ahead of time would help teams explore more advanced techniques, such as LLM-based instrumentation, in a controlled environment.\nImproved visualization during the competition.\nWhile the AIxCC village was impressively set up, competing teams and participants had limited visibility into the competition\u0026rsquo;s progress and how each CRS was functioning. To capture more attention from the DEF CON audience , it would be beneficial to expose more technical information during the competition - such as showing current prompts of each CRS in turn, their CPU usage, or even stdout from CRSes (for fun), along with explanations of the progress.\nWith our baseline system up and running, itâ€™s time for our team to explore the possibility of incorporating LLMs or ML techniques into our CRS workflow. If youâ€™re passionate about AIxCC and as committed to the competition as we are, feel free to contact us !\nWe are fortunate to have support from generous sponsors like GT/GTRI, Samsung, and KAIST/NYU. If your company is interested in sponsoring our team, we would be happy to discuss further!\nLast but not least, we want to extend our heartfelt thanks to the AIxCC organizers for launching the competition we\u0026rsquo;ve been craving. Hackers thrive on competition-driven innovation, and this has been an exciting opportunity for all of us.\nI think itâ€™s one of the worst names ever chosen by a security researcher; non-security folks often think it\u0026rsquo;s a really dumb technique. But if you dig into the details, it\u0026rsquo;s actually an impressive AI tool. It operates entirely autonomously, adapting to unknown code, self-learning from past executions, using feedback loops similar to backpropagation, and employing cost functions like coverage maps, and more! Most importantly, like deep learning, it works incredibly well in practice!\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"}]